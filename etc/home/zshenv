#@IgnoreInspection BashAddShebang
# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'") -*-
# ; outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..."

# This script is run first by every type of zsh, login, interactive, both, or neither

# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
#    (All invocations unless the -f option is set.) Should contain commands to set the PATH and other important
#    environment variables, but not those that produce output or assume the shell is attached to a tty.

# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
#    Meant as an alternative to `.zlogin' for ksh fans; the two are not intended to be used together

# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
#    Should contain commands to set up aliases, functions, options, key bindings, etc.

# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
#    Should be used to set the terminal type and run a series of external commands (fortune, msgs, etc). Not the place
#    for alias definitions, options, env vars, etc.: it should not change the shell environment at all.

# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout
#    Sourced when login shells exit.

log=:
#log=echo
$log '*** In .zshenv'
#set -x


# ======== Default Settings
umask 22
export UNAME=${UNAME:=`uname`}

export ifZsh=:
if [[ "$0" =~ "zsh" ]]; then
    $log zsh!
    ifZsh=
fi

alias ifCygwin=false
alias ifMacOS=false
alias ifLinux=false
case ${UNAME} in
    CYGWIN)
        alias ifCygwin=true
    ;;
    Darwin)
        alias ifMacOS=true
    ;;
    Linux)
        alias ifLinux=true
    ;;
    *)
    ;;
esac

[[ $UID -eq 0 ]] \
    && alias ifRoot=true \
    || alias ifRoot=false


# ======== Exported Variables
[[ -n "$CD_TO" ]] && builtin cd "$CD_TO" && unset CD_TO
export EMAIL=paul.schaaf@gmail.com
[[ "${TERMINAL_EMULATOR}" = "JetBrains-JediTerm" ]] && export inIntelliJ=true
export LC_ALL=en_US.UTF-8
ifLinux && export IDEA_ROOT=/opt
export P4_HOME=/opt/p4v
export P4CLIENT=pschaaf_satori_1124
export SCREENDIR=${SCREENDIR:=${HOME}/tmp}


# ======== List Functions

appendToVar() {
    local var=$1; shift; eval "$var=\${$var}$*"
}
prependToVar() {
	local var=$1; shift; eval "$var=$*\${$var}"
}

member() {
    eval local value=:\$$2:
    echo $value | grep ":$1:" >& /dev/null
}

prependToList() {
    local each var=$1; shift
    for each; do
        member $each $var || eval "$var=\"$each\${$var:+${RS:-:}\$$var}\""
    done
}

appendToList() {
    local each var=$1; shift
    for each; do
        member $each $var || eval "$var=\"\${$var:+\$$var${RS:-:}}$each\""
    done
}

appendClasspath() {
    appendToList  CLASSPATH $*
}
prependClasspath() {
    prependToList CLASSPATH $*
}

appendLibpath() {
	appendToList  LD_LIBRARY_PATH $*
}
prependLibpath() {
	prependToList LD_LIBRARY_PATH $*
}

appendPath() {
	appendToList  PATH $*
}
prependPath() {
	prependToList PATH $*
}

appendRubyLib() {
	appendToList  RUBYLIB $*
}
prependRubyLib() {
	prependToList RUBYLIB $*
}

cleanList() {
    local listName=$1; shift
    eval local contents=\$$listName
	# remove empty elements and double slashes, escape any spaces
	eval $listName=`echo $contents | sed -E 's_::+_:_g; s_//+_/_g; s_ _\\\\ _g; s_^:__; s_:$__'`
   #   's_:([a-z]):/_:/\1/_g;   ' \   # change windows leading drive letter into *nix path
}


# ======== Paths
# Keep only the first occurrence of duplicates
typeset -U CDPATH CLASSPATH FPATH LD_LIBRARY_PATH PATH RUBYLIB
prependPath $HOME/bin
appendPath ~/bin/quick-ssh /usr/X11R6/bin /opt/git-gw ~/Android/Sdk/platform-tools
export CLASSPATH=${CLASSPATH:=.}
appendLibpath /lib /usr/lib $HOME/lib
appendRubyLib $HOME/src/ruby $HOME/bin
export RUBYLIB
cleanList CLASSPATH


# ======== Java
function whichjava() {
    for cmd in 'which java' 'java -version' 'typeset -p JAVA_HOME IDEA_HOME IDEA_JDK'; do
        echo \# $cmd
        eval $cmd
        echo
    done
}

java_root=/usr/lib/jvm
if [[ -d $java_root ]]; then
    for home in ${java_root}/java-*-jdk*; do
        digits=${home##*java-};  digits=${digits%%-*}   # everything between the dashes
        suffix=${home##*jdk};    suffix=${suffix//-/_}  # everything after the jdk[-_]
        javaDigitsHome=JAVA${digits}_HOME${suffix}
        export $javaDigitsHome=$home
        # typeset $javaDigitsHome
        alias java${digits}${suffix}="PATH=\${PATH//\$JAVA_HOME/\$$javaDigitsHome}; JAVA_HOME=\$$javaDigitsHome; whichjava"
        if [[ -z "${suffix}" ]]; then
            eval export JAVA_HOME=\$${javaDigitsHome}  # keep the highest-numbered version
        fi
    done
    if [[ -n "$JAVA11_HOME" ]]; then
        JAVA_HOME=$JAVA11_HOME
    fi
    unset digits javaDigitsHome suffix
else
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
fi
unset java_root

prependPath ${JAVA_HOME}/bin

if [[ -d "${JAVA_HOME}_nodcevm" ]]; then
    IDEA_JDK=${JAVA_HOME}_nodcevm
fi

export JAVA16_HOME=/usr/lib32/jvm/java32-6-jdk
export JAVA18_AMD64_HOME=${JAVA8_HOME}


# ======== OS-Specific

case ${UNAME} in
    CYGWIN*)
        source ~/etc/rc/zshenv.cygwin
        ;;
    MINGW32_NT*)
        # Change the driveLetter+colon combo into forwardSlash+driveLetter, swap
        # all slashes, replace semicolons with colons. We can't use cygpath.exe
        # for this because it collapses all references to $CYGROOT to /, which
        # doesn't work outside of Cygwin (since $CYGWIN won't be the root
        # directory)
        CYGROOT=`echo $CYGROOT | sed 's~\([a-zA-Z]\):~/\1~g; s~\\\\~/~g; s~;~:~g'`
        alias cygpath=${CYGROOT}/bin/cygpath.exe

        fixDOSPathIn ANT_HOME GIT_PATH JAVA_HOME
        ;;
    *)
        ;;
esac


# ======== Guidewire
if [[ -f ~/dotfiles/secrets ]]; then
    source ~/dotfiles/secrets
fi
export ARTIFACTORY_USERNAME=$USER
export TEAMCITY_USER=$USER


# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself.
: <<DEBUG_NO_EXEC
DEBUG_NO_EXEC
set +x
