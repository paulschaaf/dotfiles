#@IgnoreInspection BashAddShebang
# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'") -*-
# ; outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..."

# This script is run first by every type of zsh, login, interactive, both, or neither

# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

log=:

umask 22
set +x

export TERM=xterm-256color

# ======== Default Settings
# default is to ignore remaining line
# but enable the line if we're running the right shell
export ifZsh=:
export ifNotZsh=:
if [[ "$0" =~ "zsh" ]]; then
    $log zsh!
    ifZsh=
else
    ifNotZsh=
fi

$log '*** In .zshenv'

exportDefault() {
    eval : \${$1:='$2'}
    export $1
}

exportDefault UNAME    `uname`
exportDefault HOSTNAME `hostname`

export ifCygwin=:
export ifNotCygwin=:
if [[ "$UNAME" =~ "CYGWIN" ]]; then
    ifCygwin=
else
    ifNotCygwin=
fi

# ======== Global Flags
if [ -n "$CD_TO" ]; then
    builtin cd "$CD_TO" && unset CD_TO
fi

typeset -U CDPATH CLASSPATH FPATH LD_LIBRARY_PATH PATH


# ======== Pathing Functions
appendToVar() {
    local var=$1; shift; eval "$var=\${$var}$*"
}
prependToVar() {
	local var=$1; shift; eval "$var=$*\${$var}"
}

member() {
    eval local value=:\$$2:
    echo $value | grep ":$1:" >& /dev/null
}

prependToList() {
    local each var=$1; shift
    for each; do
        member $each $var || eval "$var=\"$each\${$var:+${RS:-:}\$$var}\""
    done
}

appendToList() {
    local each var=$1; shift
    for each; do
        member $each $var || eval "$var=\"\${$var:+\$$var${RS:-:}}$each\""
    done
}

appendClasspath() {
    appendToList  CLASSPATH $*
}
prependClasspath() {
    prependToList CLASSPATH $*
}

appendLibpath() {
	appendToList  LD_LIBRARY_PATH $*
}
prependLibpath() {
	prependToList LD_LIBRARY_PATH $*
}

appendPath() {
	appendToList  PATH $*
}
prependPath() {
	prependToList PATH $*
}

appendRubyLib() {
	appendToList  RUBYLIB $*
}
prependRubyLib() {
	prependToList RUBYLIB $*
}

cleanList() {
    local listName=$1; shift
    eval local contents=\$$listName
	 eval $listName=`echo $contents | sed -r '
     s_::+_:_g                  # remove empty elements
     s_//+_/_g                  # remove double slashes
     s_:([a-z]):/_:/\1/_g       # change windows leading drive letter into *nix path
     s_^:__
     s_:$__
   '`
}


# ======== Path
prependPath $HOME/bin
appendPath ~/bin/quick-ssh /usr/X11R6/bin /opt/git-gw ~/Android/Sdk/platform-tools

# ======== Environment and Shell Variables
exportDefault CLASSPATH .

# ======== Remote sessions
if   [ -n "$SSH_TTY"    ]; then
    CONNECTION=ssh
elif [ -n "$REMOTEHOST" ]; then
    CONNECTION=tlnt
elif [ -n "$SUDO_USER"  ]; then
    CONNECTION=sudo
elif [ -n "$REMOTEUSER" ]; then
    CONNECTION=tlnt
fi
export CONNECTION

export EDITOR=/usr/bin/emacs
export ALTERNATTE_EDITOR=$EDITOR

export ANDROID_SDK_HOME=/opt/Android

case $USER in
    pschaaf)
        export EMAIL=paul.schaaf@gmail.com
        ;;
    root)
        EDITOR=${EDITOR}' -u pschaaf -nw'
        export EMAIL=paul.schaaf@gmail.com
        ;;
    *)
        ;;
esac

export ESHELL=$SHELL
export FCEDIT=zed
export FIGNORE=.class:.o:\~:.stackdump:dump.txt:nohup.out
export GIT_PS1_SHOWDIRTYSTATE=1
if (( ! EUID )); then
  HISTFILE=~/.history_root
else
  HISTFILE=~/.history
fi
export HISTSIZE=1000
export LC_ALL=en_US.UTF-8
export SAVEHIST=1000

#export ANT_HOME=/depot/ant/apache-ant-1.8.2
#export AARDVARK_HOME=/depot/aardvark/alpha

export IDEA_ROOT=/opt
#export IDEA_HOME=$IDEA_ROOT/ideahead

#local iconDir=/usr/share/icons/oxygen/48x48
#local failIcon=$iconDir/actions/process-stop.png
# local successIcon=$iconDir/actions/flag-green.png
#local successIcon=/gw/apollo/cc/app-cc/cc/webresources/themes/shared/resources/images/app/favicon.ico

function whichjava() {
    for cmd in 'typeset -p JAVA_HOME' 'which java' 'java -version'; do
        echo \# $cmd
        eval $cmd
        echo
    done
}

if [ -d /usr/lib/jvm/java-8-jdk ]; then
    for home in /usr/lib/jvm/java-[0-9]-jdk*; do
        digit=${home##*java-};   digit=${digit%%-*}     # everything between the dashes
        suffix=${home##*jdk};    suffix=${suffix//-/_}  # everything after the jdk[-_]
        javaDigitHome=JAVA${digit}_HOME${suffix}
        export $javaDigitHome=$home
        # typeset $javaDigitHome
        alias java${digit}${suffix}="PATH=\${PATH//\$JAVA_HOME/\$$javaDigitHome}; JAVA_HOME=\$$javaDigitHome; whichjava"
        if [ -z "${suffix}" ]; then
            eval export JAVA_HOME=\$${javaDigitHome}  # keep the highest-numbered version
        fi
    done
    unset digit javaDigitHome suffix
fi

if [ -d "${JAVA_HOME}_nodcevm" ]; then
    IDEA_JDK=${JAVA_HOME}_nodcevm
fi

export JAVA16_HOME=/usr/lib32/jvm/java32-6-jdk
export JAVA18_AMD64_HOME=${JAVA8_HOME}

export M2_HOME=/depot/maven/apache-maven-3.0.4
export P4_HOME=/opt/p4v

export P4CLIENT=pschaaf_satori_1124

prependPath \
    ${AARDVARK_HOME:+$AARDVARK_HOME/bin} \
    ${ANT_HOME:+$ANT_HOME/bin} \
    ${M2_HOME:+$M2_HOME/bin} \
    ${JAVA_HOME}/bin \
    ${P4_HOME}/bin

appendClasspath \
    ${M2_HOME:+$M2_HOME/lib/\*} \
    ${AARDVARK_HOME:+$AARDVARK_HOME/lib/\*}  \
    ${ANT_HOME:+$ANT_HOME/lib/\*} \
    ${M2_HOME:+$M2_HOME/lib/\*}

export LESS=' --RAW-CONTROL-CHARS --hilite-unread --ignore-case --jump-target=2 --no-init --quit-if-one-screen --status-column -Ps%dt/%D ?f%f::STDIN:$'
export LESSKEY=${HOME}/.less_$HOSTNAME

# ======== Library Path
export LIBPATH_NAME=LD_LIBRARY_PATH
appendLibpath /lib /usr/lib $HOME/lib

# ======== ls Options
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;37;41:mi=01;37;41:ex=01;32:*.btm=01;32:*.tar=01;31:*.tgz=01;31:*.tbz2=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lha=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:*.tiff=01;35'

export LS_FLAGS=-BCFbh
$ifZsh export LS_FLAGS=${LS_FLAGS}H

export PAGER=less

# ======== RUBYLIB
export RUBYLIB
appendRubyLib /home/pschaaf/src/ruby /home/pschaaf/bin

export MANPAGER=less

exportDefault SCREENDIR ${HOME}/tmp

export SHELL=/usr/bin/zsh

#export STUDIO_VM_OPTIONS=~/etc/rc/studio64.vmoptions

export USE_COLOR=true

# Any punctuation char in WORDCHARS is considered a part of the adjacent word.
# The remaining punctuation chars are considered separate words, regardless of
# what may be adjacent:  !"#&'()+,./:;<=>?@[]`{|}
export WORDCHARS='|*?-~\\$%^'


# # ======== Functions

alias ag='command ag --color --ignore build'

alert() {
  if [ $? -eq 0 ]; then
    notify-send -t 3000 -i info Success\! "\n$1"
  else
    notify-send -t 5000 -i error Failed\! "\n$1"
    return 1
  fi
}

alias cd=pushd

alias cores='inxi -C'

df() {
    /bin/df -hl -x devtmpfs -x tmpfs --total -T $* | lite -c cyan '^total.*' -c underline '^Filesystem.*'
}

# cd to the specified directory, or if it's a file, to the containing directory
pushd() {
    if [ -z "$1" ]; then
        builtin pushd
    elif [ -f "$1" ]; then
        builtin pushd ${1:h}
    else
        builtin pushd ${1}
    fi
}

echoList() {
    show_type=''
    rm_row=0
    listName=$1
    eval local contents=\$${listName}
    shift
    while [ -n "$*" ]; do  # process switches
        case $1 in
            --help)
                echo --help      Show this screen
                echo --show-type Shows the type of the argument files
                echo --rm #      Removes item number # from the list and print the new value
                local exit='true'
                ;;
            --show-type)
                show_type='file -L'
                ;;
            --rm)
                shift
                contents=`echo $contents | awk 'NR != RM_ROW {printf ":" ""; print}' RM_ROW=$1 RS=: ORS='' | sed -r 's/::+/:/g; s/^:|:$//g'`
                eval $listName=$contents
               ;;
            *)
                break
                ;;
        esac
        shift
    done

    if [ -z "$exit" ]; then
        if [ -z "$ifZsh" ]; then
            echo " ${listName} has type ${(Pt)listName}"
        fi

        # save all AWK output to the end to avoid screen flicker
        echo -E ${contents} | awk '
        NR == 1 {split(file, files, " ")}
        {
          gsub("/c" ENVIRON["HOME"],"~")
          gsub(ENVIRON["HOME"],"~")
          dirname = $0
          carat = " "
          startColor = ""
          endColor = ""
          for (idx in files) {  # note if any of the argument files are in this dir
            fullpath = $1 "/" files[idx]
            if (! system("test -f " fullpath)) {
                startColor = "[1;33m"
                endColor = "[0m"
                matches = matches " " fullpath
                carat=">"
                break
            }
          }
          output = output sprintf("\n%s%2d %s%s%s", carat, NR, startColor, dirname, endColor)
        }
        END {
            print output
            if (matches) {
                print ls matches "\n"
                system(ls matches)
                if (show_type) {
                    print "\n" show_type matches "\n"
                    system(show_type matches)
                }
            }
        }' RS=${RS:-:} file=${@} ls="/bin/ls \${LS_FLAGS} -HUl" show_type=${show_type}
    fi
}

echoVar() {
    local var
    for var; do
        echo -n "\n # ${var} has type ${(Pt)var}\n "
        typeset -p $var | sed 's/^typeset -x//'
    done
}

alias classpath='echoList CLASSPATH'
alias grep='command grep --extended-regexp --color'
alias fpath='echoList FPATH'
alias libpath='echoList LD_LIBRARY_PATH'

path() {
    show_type=''
    if [ "$1" = "--show-type" -o "$1" = "-t" ]; then
        show_type='--show-type'
        shift
    fi
    if [ -z "$ifZsh" ]; then
#        set -x
        local regex="${*// /\|}"
        echo
    fi
    echoList ${show_type} PATH $*
}

rubylib() {
    echoVar RUBYLIB
    echo
    local RUBYLIB=`ruby -e 'print $:.join(":")'`
    echoList RUBYLIB | sed 's/^.*has type.*/ Including implicit dirs:/'
}

ddu() {
    # show the size of each subdirectory
    find ${*:-.} -maxdepth 1 -type d -print0 | xargs -0 du -hs | sort -n
}

pcd() {
    # Change to the specified dir & remove starting place from dir stack
    cd "$@"; popd +1 2>/dev/null
}

alias vpnc-connect='sudo vpnc-connect'
alias vpnc-disconnect='sudo vpnc-disconnect'

wcat()   {
	cat $(which $*)
}
wcd()    {
	cd $(which $*)
}
wfile()  {
	file $(which ${@}) 2>/dev/null || echo \'${@}\' not found
}
whence() {
	builtin whence -ac $*
}
wless()  {
	${PAGER} $(which ${@}) 2>/dev/null || echo \'${@}\' not found
}

# ======== ls Aliases and Functions
unalias l la ll ls lsd lld lsda lldarm d s p rd 2>/dev/null
alias l='/bin/ls ${LS_COLORS:+--color}'

export LS="l ${LS_FLAGS}"
alias ls=${LS}

alias la='ls -A'
alias ll='ls -l'
alias lla='ls -Al'

alias llt='ls -lrt'
alias lr='ls -R'
lsd() {
    dir=${1}${1:+/}
    l ${LS_FLAGS/F/} -d ${dir}*/
}
lld() {
    dir=${1:-.}
    ls -ld ${dir}/*/
}
lsda() {
    if [ $# -eq 0 ]; then
	l ${LS_FLAGS/F/} -ld */(D)
    else
	for dir in ${*}; do
	    echo
	    ls -d $dir
	    l ${LS_FLAGS/F/} -ld ${dir}/*/(D)
	done
    fi
}

alias llda='lsda -l'

lsf() {
    local x
    for x in ${*:-*}; do
        echo `file -N -- $x`:`ls -d -- $x` | sed 's/^[^:]*: //'
    done | column -t -s ':'
}

# ======== Aliases
alias ..='pushd ..'
alias ...="pushd ../.."
alias du='du -h'
alias perf='./perf -Ddir.user=pschaaf'
alias rm='rm -i'
alias root='sudo -u root ZDOTDIR=/home/pschaaf zsh -il'
alias tree="tree -a --dirsfirst"

case ${UNAME} in
    CYGWIN*)
        source ~/etc/rc/zshenv.cygwin
        ;;
    MINGW32_NT*)
        # Change the driveLetter+colon combo into forwardSlash+driveLetter, swap
        # all slashes, replace semicolons with colons. We can't use cygpath.exe
        # for this because it collapses all references to $CYGROOT to /, which
        # doesn't work outside of Cygwin (since $CYGWIN won't be the root
        # directory)
        CYGROOT=`echo $CYGROOT | sed 's~\([a-zA-Z]\):~/\1~g; s~\\\\~/~g; s~;~:~g'`
        alias cygpath=${CYGROOT}/bin/cygpath.exe

        fixDOSPathIn ANT_HOME GIT_PATH JAVA_HOME
        ;;
    *)
        ;;
esac

cleanList PATH
cleanList CLASSPATH

# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself.
: <<DEBUG_NO_EXEC
DEBUG_NO_EXEC
