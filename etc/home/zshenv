# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'") -*-
# ; outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..."

# This script is run first by every type of zsh, login, interactive, both, or neither

# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

log=:

umask 22
set +x

export TERM=xterm-256color

# ======== Default Settings
# default is to ignore remaining line
# but enable the line if we're running the right shell
export ifZsh=:
export ifNotZsh=:
if [[ "$0" =~ "zsh" ]]; then
    $log zsh!
    ifZsh=
else
    ifNotZsh=
fi

$log '*** In .zshenv'

exportDefault () {
    eval : \${$1:='$2'}
    export $1
}

exportDefault UNAME    `uname`
exportDefault HOSTNAME `hostname`

export ifCygwin=:
export ifNotCygwin=:
if [[ "$UNAME" =~ "CYGWIN" ]]; then
    ifCygwin=
else
    ifNotCygwin=
fi

# ======== Global Flags
if [ -n "$CD_TO" ]; then
    builtin cd "$CD_TO" && unset CD_TO
fi

typeset -U CDPATH CLASSPATH FPATH LD_LIBRARY_PATH PATH


# ======== Pathing Functions
appendToVar  () {
    local var=$1; shift; eval "$var=\${$var}$*"
}
prependToVar () {
	local var=$1; shift; eval "$var=$*\${$var}"
}

member () {
    eval local value=:\$$2:
    echo $value | grep ":$1:" >&/dev/null
}

prependToList () {
    local each var=$1; shift
    for each; do
        member $each $var || eval "$var=\"$each\${$var:+${RS:-:}\$$var}\""
    done
}

appendToList () {
    local each var=$1; shift
    for each; do
        member $each $var || eval "$var=\"\${$var:+\$$var${RS:-:}}$each\""
    done
}

appendClasspath  () {
    appendToList  CLASSPATH $*
}
prependClasspath () {
    prependToList CLASSPATH $*
}

appendLibpath    () {
	appendToList  LD_LIBRARY_PATH $*
}
prependLibpath   () {
	prependToList LD_LIBRARY_PATH $*
}

appendPath       () {
	appendToList  PATH $*
}
prependPath      () {
	prependToList PATH $*
}

appendRubyLib    () {
	appendToList  RUBYLIB $*
}
prependRubyLib   () {
	prependToList RUBYLIB $*
}

# echo a path without double slashes, or empty or relative paths
cleanpath () {
	echo :$PATH: | sed '
     s_:::*_:_g;
     s_///*_/_g;
     s_:c:/_:/c/_g;
     s_:[^/][^:]*__g;
     s_:[^:]*/pschaaf/bin/win__g;
     s_^:__;
     s_:$__
   '
}
PATH=`cleanpath`


# ======== Path
prependPath $HOME/bin
appendPath ~/bin/quick-ssh /usr/X11R6/bin /opt/git-gw /gw-dev/Android/Sdk/platform-tools

# ======== Environment and Shell Variables
# export BROWSER=chrome
exportDefault CLASSPATH .

# ======== Remote sessions
if   [ -n "$SSH_TTY"    ]; then
    CONNECTION=ssh
elif [ -n "$REMOTEHOST" ]; then
    CONNECTION=tlnt
elif [ -n "$SUDO_USER"  ]; then
    CONNECTION=sudo
elif [ -n "$REMOTEUSER" ]; then
    CONNECTION=tlnt
fi
export CONNECTION

export EDITOR=/usr/bin/emacs
export ALTERNATTE_EDITOR=$EDITOR

case $USER in
    pschaaf)
        EMAIL=paul.schaaf@gmail.com
        ;;
    root)
        EDITOR=${EDITOR}' -u pschaaf -nw'
        EMAIL=paul.schaaf@gmail.com
        ;;
    *)
        ;;
esac
export EDITOR EMAIL

export ESHELL=$SHELL
export FCEDIT=zed
export FIGNORE=.class:.o:\~:.stackdump:dump.txt:nohup.out
export GIT_PS1_SHOWDIRTYSTATE=1
if (( ! EUID )); then
  HISTFILE=~/.history_root
else
  HISTFILE=~/.history
fi
export HISTSIZE=1000
export SAVEHIST=1000

export ANT_HOME=/depot/ant/apache-ant-1.7.1
export AARDVARK_HOME=/depot/aardvark/alpha

if [ -d /opt/idea16 ]; then
    for home in /opt/idea[1-9][1-9]; do
        export IDEA${home##*idea}_HOME=$home
    done
fi

local iconDir=/usr/share/icons/oxygen/48x48
local failIcon=$iconDir/actions/process-stop.png
# local successIcon=$iconDir/actions/flag-green.png
local successIcon=/gw/apollo/cc/app-cc/cc/webresources/themes/shared/resources/images/app/favicon.ico

function whichjava() {
    for cmd in 'typeset -p JAVA_HOME' 'which java' 'java -version'; do
        echo \# $cmd
        eval $cmd
        echo
    done
}

if [ -d /usr/lib/jvm/java-8-oracle ]; then
    for home in /usr/lib/jvm/java-[0-9]-oracle*; do
        local digit=${home##*java-};   digit=${digit%%-*}
        local suffix=${home##*oracle}; suffix=${suffix//-/_}
        local javaDigitHome=JAVA${digit}_HOME${suffix}
        export $javaDigitHome=$home
        # typeset $javaDigitHome
        alias java${digit}${suffix}="PATH=\${PATH//\$JAVA_HOME/\$$javaDigitHome}; JAVA_HOME=\$$javaDigitHome; whichjava"
        # which java${digit}${suffix}
    done
fi
export JAVA_HOME=$JAVA9_HOME

export M2_HOME=/depot/maven/apache-maven-3.0.4
export P4_HOME=/opt/p4v

export P4CLIENT=pschaaf_satori_1124

prependPath \
    ${AARDVARK_HOME:+$AARDVARK_HOME/bin} \
    ${ANT_HOME:+$ANT_HOME/bin} \
    ${M2_HOME:+$M2_HOME/bin} \
    ${JAVA_HOME}/bin \
    ${P4_HOME}/bin

appendClasspath \
    ${M2_HOME:+$M2_HOME/lib/\*jar} \
    ${AARDVARK_HOME:+$AARDVARK_HOME/lib/\*jar}  \
    ${ANT_HOME:+$ANT_HOME/lib/\*jar} \
    ${M2_HOME:+$M2_HOME/lib/\*jar}

export LESS=' --RAW-CONTROL-CHARS --hilite-unread --ignore-case --jump-target=2 --no-init --status-column -Ps%dt/%D ?f%f::STDIN:$'
export LESSKEY=${HOME}/.less_$HOSTNAME

# ======== Library Path
export LIBPATH_NAME=LD_LIBRARY_PATH
appendLibpath /lib /usr/lib $HOME/lib

# ======== ls Options
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;37;41:mi=01;37;41:ex=01;32:*.btm=01;32:*.tar=01;31:*.tgz=01;31:*.tbz2=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lha=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:*.tiff=01;35'

export LS_FLAGS=${LS_COLORS:+--color }-BCFbh
$ifZsh export LS_FLAGS=${LS_FLAGS}H

export PAGER=less

# ======== RUBYLIB
export RUBYLIB
appendRubyLib ${HOME}/src/ruby $HOME/bin

export MANPAGER=less

exportDefault SCREENDIR ${HOME}/tmp

export SHELL=/usr/bin/zsh

export STUDIO_JDK=$JAVA8_HOME
export STUDIO_VM_OPTIONS=~/etc/rc/studio64.vmoptions

# Any punctuation char in WORDCHARS is considered a part of the adjacent word.
# The remaining punctuation chars are considered separate words, regardless of
# what may be adjacent:  !"#&'()+,./:;<=>?@[]`{|}
export WORDCHARS='|*?-~\\$%^'


# # ======== Functions

alias ag='command ag --color --ignore build'

alert() {
  if [ $? -eq 0 ]; then
    notify-send -t 3000 -i info Success\! "\n$1"
  else
    notify-send -t 5000 -i error Failed\! "\n$1"
    return 1
  fi
}

alias cd=pushd

# cd to the specified directory, or if it's a file, to the containing directory
pushd () {
    if [ -z "$1" ]; then
        builtin pushd
    elif [ -f "$1" ]; then
        builtin pushd ${1:h}
    else
        builtin pushd ${1}
    fi
}

echoList () {
    local show-type
    if [ "$1" = "--show-type" ]; then
        show-type=file
        shift
    fi
    if [ -z "$ifZsh" ]; then
        echo ' ${'${1}'} has type '${(Pt)1}
    fi
    eval local list=\$${1}
    shift
    # save all AWK output to the end to avoid screen flicker
    echo -E ${list} | awk '
    NR == 1 {split(file, files, " ")}

    { gsub("/c" ENVIRON["HOME"],"~")
      gsub(ENVIRON["HOME"],"~")
      dirname = $0
      for (idx in files) {
        fullpath = $1 "/" files[idx]
        if (! system("test -f " fullpath)) {
            dirname = "[1;33m" dirname "[0m"
            matches = matches " " fullpath
            break
        }
      }
      output = output sprintf("\n %2d ", NR) dirname
    }
    END {
        print output
        if (matches) {
            print ls matches "\n"
            system(ls matches)
            if (show-type) {
                print "\n" show-type matches "\n"
                system(show-type matches)
            }
        }
    }' RS=${RS:-:} file=${@} ls="ls ${LS_FLAGS}Ul" show-type=${show-type}
}

if [ -z "$ifZsh" ]; then
    echoVar () {
        local var
        for var; do
            echo "\n # \${${var}} has type ${(Pt)var}"
            echo -n ' '
            set | grep -a "^$var="
        done
    }
else
    echoVar () {
        local var
        for var; do
            typeset -p $var | grep -a $var
            echo
        done
    }
fi

alias classpath='echoList CLASSPATH'
alias grep='command grep --color'
alias fpath='echoList FPATH'
alias libpath='echoList LD_LIBRARY_PATH'

path () {
    local show-type
    if [ "$1" = "--show-type" -o "$1" = "-t" ]; then
        show-type=yes
        shift
    fi
    if [ -z "$ifZsh" ]; then
        local regex="${*// /\|}"
        echo -n ' '
        whence $* | sed '/^$\|^\/\|not found$/d; s:^\('$regex'\):[1;40;33m\1[0;0m:g'
        echo
    fi
    echoList ${show-type:+--show-type} PATH $*
}

rubylib () {
    echoVar RUBYLIB
    echo
    local RUBYLIB=`ruby -e 'print $:.join(":")'`
    echoList RUBYLIB | sed 's/^.*has type.*/ Including implied dirs:/'
}

ddu () {
    # show the size of each subdirectory
    find ${*:-.} -maxdepth 1 -type d -print0 | xargs -0 du -hs | sort -n
}

pcd () {
    # Change to the specified dir & remove starting place from dir stack
    cd "$@"; popd +1 2>/dev/null
}

alias vpnc-connect='sudo vpnc-connect'
alias vpnc-disconnect='sudo vpnc-disconnect'

wcat ()   {
	cat $(which $*)
}
wcd ()    {
	cd $(which $*)
}
wfile ()  {
	file $(which ${@}) 2>/dev/null || echo \'${@}\' not found
}
whence () {
	builtin whence -ac $*
}
wless ()  {
	${PAGER} $(which ${@}) 2>/dev/null || echo \'${@}\' not found
}

# ======== ls Aliases and Functions
unalias l la ll ls lsd lld lsda lldarm d s p rd 2>/dev/null
alias l=/bin/ls

alias ls="l ${LS_FLAGS}"

alias la='l '${LS_FLAGS}A
alias ll='l '${LS_FLAGS}l
alias lla='la -l'

alias llt='ll -rt'
alias lr='ls -R'
alias lsd="l ${LS_FLAGS/F/}d */"
alias lld="l ${LS_FLAGS/F/}ld */"
alias lsda="l ${LS_FLAGS/F/}ld */(D)"
alias llda='lsda -l'

lsf () {
    local x
    for x in ${*:-*}; do
        echo `file -N -- $x`:`ls -d -- $x` | sed 's/^[^:]*: //'
    done | column -t -s ':'
}

# ======== Aliases
alias ...=../..
alias ....=../../..
alias ..='pushd ..'
alias df='df -h -x supermount -x tmpfs'
alias du='du -h'
alias perf='./perf -Ddir.user=pschaaf'
alias rm='rm -i'
alias root='sudo -u root ZDOTDIR=/home/pschaaf zsh -il'
alias tree="tree -a --dirsfirst"

case ${UNAME} in
    CYGWIN*)
        source ~/etc/rc/zshenv.cygwin
        ;;
    MINGW32_NT*)
        # Change the driveLetter+colon combo into forwardSlash+driveLetter, swap
        # all slashes, replace semicolons with colons. We can't use cygpath.exe
        # for this because it collapses all references to $CYGROOT to /, which
        # doesn't work outside of Cygwin (since $CYGWIN won't be the root
        # directory)
        CYGROOT=`echo $CYGROOT | sed 's~\([a-zA-Z]\):~/\1~g; s~\\\\~/~g; s~;~:~g'`
        alias cygpath=${CYGROOT}/bin/cygpath.exe

        fixDOSPathIn ANT_HOME GIT_PATH JAVA_HOME
        ;;
    *)
        ;;
esac

# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself.
: <<DEBUG_NO_EXEC
DEBUG_NO_EXEC
