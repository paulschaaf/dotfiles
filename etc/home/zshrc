#@IgnoreInspection BashAddShebang
#@IgnoreInspection BashAddShebang
# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'"); outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..." -*-

# This script is run by interactive shells

# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

log=:
#log=echo
$log '*** In .zshrc'
#set -x
interactive=true

# ======== Zsh Compinstall
if [ -z "$ifZsh" ]; then
    zstyle ':completion:*' expand prefix suffix
    zstyle ':completion:*' file-sort name
    zstyle ':completion:*' group-name ''
    zstyle ':completion:*' ignore-parents parent ..
    zstyle ':completion:*' list-colors ''
    zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
    zstyle ':completion:*' menu select=0
    zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
    zstyle ':completion:*' squeeze-slashes true
    zstyle ':zftp:' titlebar true
    zstyle ':completion:*' verbose true
    zstyle  :compinstall filename "$HOME/etc/rc/$HOST.zsh"

    fpath=(~/etc/zshcompletion $fpath)

    autoload -U compinit && compinit
    autoload zed                  && alias fned='zed -f'
    unalias  run-help 2>/dev/null && autoload run-help
    zmodload -i zsh/complist
#    autoload -U compinit
fi


# ======== Shell Options

# limit coredumpsize 0

if [ -z "$ifZsh" ]; then
    unsetopt \
        beep \
        clobber \
        flow_control \
        hup \
        notify \
        print_exit_value \
        rm_star_silent

    setopt \
        auto_list \
        auto_menu \
        auto_param_slash \
        auto_pushd \
        auto_remove_slash \
        bang_hist \
        correct \
        extended_history \
        function_argzero \
        hash_cmds \
        hash_dirs \
        hist_find_no_dups \
        hist_ignore_dups \
        hist_ignore_space \
        hist_no_functions \
        hist_reduce_blanks \
        ignore_eof \
        inc_append_history \
        pushd_silent \
        share_history
fi

# move to upper left then resize terminal -- see https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
ifMacOS alias home="printf '\e[3;0;0;1t\e[8;142;100t'"
ifMacOS alias work="printf '\e[3;0;0;1t\e[8;106;100t'"

#function @#() {
#    printf "\e[48;5;21m\n--- $*\e[0m\n"
#}

ifMacOS && find () { [[ $1 == -* ]] && command find . $* || command find $* }

frotz () {
    pushd ~/Box\ Sync/Infocom
    local stories=".*/${1:-.*}\\.dat\$"
    if [ "$*" = "" ]; then
        # if no args, show all game files
        find . -regex $stories -print | sed 's/^\.\//  /; s/\.dat$//' | sort
    else
        # otherwise run the one requested
        local story=`find . -maxdepth 1 -regex $stories -print -quit`
        story=${story#./}
        echo Story is $story
        if [ -f ${story} ]; then
            dir=${story%%.*}
            mkdir $dir
            builtin cd $dir
            command frotz ../$story
            builtin cd ..
            rmdir $dir 2>/dev/null // remove only if empty
        else
            echo Cannot find story "$story"
        fi
    fi
    popd
}

if [[ "${TERMINAL_EMULATOR}" = "JetBrains-JediTerm" ]]; then
    function rg() {
        pattern=$1; shift
        command rg --no-heading $pattern ${*:-$PWD} | sed "s_^/_${GW_PRODUCT:+file://}/_"
    }
fi

settitle () {
    printf '\e]1;%s\a' ${*:-$GIT_REPO}
}

splitMp3() {
   local file=$1
   local base=${1%%.*}
   local extension=${1##*.}
   local title=${2:-$base}
   local index=1
   set -x
   ffmpeg -i ${file} -f segment -segment_time 600 -c copy tmp_${base}%03d.${extension}

   count=`ls -1q tmp_* | awk 'END {print NR}'`
   for track in tmp_*; do
      ffmpeg -i ${track} -metadata title="${title} ${index}/${count}" -c copy ${track##tmp_}
      rm -f ${track}
      : $((index++))
   done
}

splitFlac() {
    local cue=$1
    local flac=$2
    if [ "${2##*.}" = "cue" ]; then
        cue=$2
        flac=$1
    fi
    echo "    CUE  = $cue"
    echo "    FLAC = $flac"
    shnsplit -f $cue -t %n-%t -o flac $flac
}

wedit () {
    local cmd file x
    for x in $*
    do
        file=$(which $x) && cmd="${cmd:-edit} $file" || echo $file
    done
    eval $cmd
}

# ======== Dir Functions

# basename () {
#     echo ${(F)@:t}
# }
# dirname  () {
#     echo ${(F)@:h}
# }


if [ "$USER" != "pschaaf" ]; then
    alias  emacs='emacs -u pschaaf'
fi

alias exp=dolphin
alias pd=popd

# Use Emacs key bindings
bindkey -e

# ======== Function Keys

bindkey -s "[Z" " popd\n"

# Here's what we'd like to accomplish:
#    __PRESS__  __TO__
#    F6         cut
#    F7         copy
#    F8         paste
#    F9         search
#    F12        exit

bindkey "[17~" kill-whole-line
bindkey "[18~" copy-region-as-kill
bindkey "[19~" yank
bindkey "[20~" history-incremental-search-backward
bindkey -s "[21~" " exit\n"

# ======== Other Extra Keys

# Here's what we'd like to accomplish:

#   __PRESS __  __TO__
#   ctrl_left   backward-word
#   ctrl_right  forward-word

#   home        beginning-of-line
#   end         end-of-line

#   ctrl_delete backward-kill-word
#   delete      delete-char

bindkey "\033[3~" delete-char

# echo; (bindkey | grep 'backward-delete-char'; echo; bindkey | grep 'backward-kill-word') | sed 's/" /"\t/g'

bindkey "\M-C\M-5" up-case-word
bindkey "\M-C\M-," down-case-word

case ${TERM} in
    cygwin*)
        bindkey "\033H"     backward-delete-char
        bindkey "\033?"     backward-kill-word
        bindkey "\033[1;5D" backward-word
        bindkey "\033[1~"   beginning-of-line
        bindkey "\033[4~"   end-of-line
        bindkey "\033[1;5C" forward-word
        bindkey "\033[3;5~" kill-word
        ;;
    rxvt*)
        bindkey "^H"        backward-delete-char
        bindkey "\033Od"    backward-word
        bindkey "\033[7~"   beginning-of-line
        bindkey "\033[3~"   delete-char-or-list
        bindkey "\033[8~"   end-of-line
        bindkey "\033Oc"    forward-word
        bindkey "\033[3;5~" kill-word

        bindkey "\033?"     backward-kill-word
        bindkey "\033[1;5D" backward-word
        bindkey "\033[1~"   beginning-of-line
        bindkey "\033[4~"   end-of-line
        bindkey "\033[1;5C" forward-word
        bindkey "\033[3;5~" kill-word
        ;;
    xterm*)
        bindkey "^?"        backward-delete-char
        bindkey "^H"        backward-kill-word
        bindkey "\033[1;5D" backward-word
        bindkey "\033[H"    beginning-of-line
        bindkey "\033[1~"   beginning-of-line
        bindkey "\033[3~"   delete-char-or-list
        bindkey "\033[4~"   end-of-line
        bindkey "\033[F"    end-of-line
        bindkey "\033[1;5C" forward-word
        bindkey "\033[3;5~" kill-word
        ;;
    *)
        echo Unknown terminal type: $TERM
        ;;
esac

# ======== Macro Keys
# C-? prepends 'whence' to command line
bindkey -s ""^_"" "\C-apath \C-e\C-m"
#     if [ -z "$CONNECTION" ]; then
#         #bindkey -r "\C-h" 	# remove binding
#         #bindkey "\C-h\C-k" describe`-key-briefly	#
#     fi

updateManpath () {
    appendManpath `echo $PATH | awk '/\/bin$/ {gsub(/\/bin$/, "/man"); print}' RS=':'`
}

rootColorString='[37;1;41m'

case $HOSTNAME:$UNAME in
#    *:AIX*)
#        # blue
#        hostColor='[34;40m'
#        ;;
    *:CYGWIN*)
        # white on green
        hostColor='[37;42m'
        ;;
    *:Darwin*)
        hostColor='[32;40m'
        ;;
#    *:HPUX*)
#        # cyan
#        hostColor='[36;40m'
#        ;;
    *:Linux*)
        # green
        hostColor='[32;40m'
        ;;
#    *:SunOS*)
#        # yellow
#        hostColor='[33;40m'
#        ;;
    *:Windows*)
        # white bold on blue
        hostColor='[37;1;44m'
        ;;
    *:UNKN*|*)
        # magenta
        hostColor='[35;40m'
        ;;
esac

case $CONNECTION in
    ssh)
        connection_color='[0;30;48;5;226m'
        ;;
    tlnt)
        connection_color='[31;1m'
        ;;
    sudo)
        connection_color='[35;1;40m'
        ;;
    *)
        ;;
esac
if [ -n "$CONNECTION" ]; then
    hostColor=${hostColor/m/;4m}  # underline the host name
fi

if [ -n "$connection_color" ]; then
    CONNECTION="%{$connection_color%}$CONNECTION%{[0m%} "
fi

if [[ -f ~/etc/rc/git_zshrc.sh ]]; then
    source ~/etc/rc/git_zshrc.sh
else
    function updateGitVars() { : }
    GIT_STATUS=''
fi

export dirs

updateDirs () {
    dirs="`builtin dirs -p | awk '
       NR == 2 {printf(\"%s\", \"[0;38;5;243m\")};
       {print}
    ' ORS=' '`"
}

#if [ $UID -eq 0 ]; then
#    updateGuidewireVars () {
#        :
#    }
#else
#    updateGuidewireVars () {
#        source gwSetEnv 2>&1 > /dev/null
#    }
#fi

alias fixprompt='updateGitVars'

function git () {
    command git $*
    echo "$*" | grep --quiet 'checkout\|--edit-description' && updateGitVars
}

autoload -U add-zsh-hook
add-zsh-hook chpwd updateDirs
add-zsh-hook precmd updateGitVars

if [ -n "$HOSTMESSAGE" ]; then
    HOSTMESSAGE+=' '
fi

currentUser=${USERNAME//pschaaf/}
currentUser=${currentUser}${currentUser:+@}

PS1="%{[4;38;5;235m%}\${(l.\${COLUMNS}.. .)}
%{$reset_color%}%T %{%(!.%{$rootColorString%}.%{$hostColor%})%}${currentUser}%m%{$reset_color%}$HOSTMESSAGE %{$fg_bold[yellow]%}%62>\>>\$dirs%<<
%{$reset_color%}\$GIT_STATUS%2(L.%{$fg_bold[cyan]%}%L/.)%{$fg_no_bold[cyan]%}%!%{$reset_color%} $CONNECTION$SCRIPTING_MSG\$GW_PROMPT%(!.#.$) "

PS2="(%{[35;1m%}%_%{$reset_color%}) %(!.#.$) "

pcd .
$ifZsh compinit

# Guidewire
alias granite='source ~/src/guidewire/granite.env'

# Bootstrap the huge nvm (Node version manager) function
#alias nvm='unalias nvm; echo Installing...; source /usr/share/nvm/init-nvm.sh; nvm'

### START-Keychain ###
# Let  re-use ssh-agent and/or gpg-agent between logins
# /usr/bin/keychain $HOME/.ssh/id_rsa $HOME/.ssh/id_dsa
# source $HOME/.keychain/$HOSTNAME-sh
#if [ $UID -gt 0 ]; then  # if I'm not root
#    eval `keychain --eval --agents ssh ~/.ssh/id_rsa`
#fi
### End-Keychain ###

# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself. Don't forget that any
# edits are lost if this file is re-generated.
: <<DEBUG_NO_EXEC
DEBUG_NO_EXEC
set +x

export NVM_DIR="/Users/pschaaf/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
