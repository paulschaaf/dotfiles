#@IgnoreInspection BashAddShebang
# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'"); outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..." -*-

# This script is run by interactive shells. It should contain commands to set up aliases, functions, options, key
# bindings, etc.
#
# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

# ========
# ======== Profiling
( (($#debug)) || (($#trace)) ) && echo "\e[42m# ===== Sourcing ${(%):-%N}\e[0m"
(( $#trace )) && set -x || set +x

inMacOS && path=(${os_override_path[@]} ${path[@]}) # fix the order after Mac's /etc/zprofile screws it up
unset os_override_path

# ========
# ======== Shell Options

# Changing directories
setopt auto_cd                   # If a command can’t be executed as normal but is the name of a directory, cd to it.
setopt auto_pushd                # Make cd push the old directory onto the directory stack
setopt pushd_silent              # Do not print the directory stack after pushd or popd.
setopt pushd_to_home             # Have pushd with no arguments act like ‘pushd $HOME’.

# Completion
setopt auto_list                 # Automatically list choices on an ambiguous completion.
setopt auto_menu                 # Automatically use menu completion after the second consecutive request for completion, for example by pressing the tab key repeatedly
setopt auto_param_slash          # If a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space.
setopt auto_remove_slash         # When the last character resulting from a completion is a slash and the next character typed is a word delimiter, a slash, or a character that ends a command (such as a semicolon or an ampersand), remove the slash.
setopt glob_complete             # When the current word has a glob pattern, cycle through matches rather than inserting all possibilities.

# Expansion and Globbing
setopt extendedglob              # treat #, ~, and ^ as part of patterns for filename generation

# History
setopt bang_hist                 # Perform textual history expansion, csh-style, treating the character ‘!’ specially.
setopt extended_history          # Write the history file in the ":start:elapsed;command" format.
setopt hist_find_no_dups         # Do not display a line previously found.
setopt hist_ignore_all_dups      # Delete old recorded entry if new entry is a duplicate.
setopt hist_ignore_dups          # Don't record an entry that was just recorded again.
setopt hist_ignore_space         # Don't record an entry starting with a space.
setopt hist_no_functions         # Remove function definitions from the history list.
setopt hist_reduce_blanks        # Remove superfluous blanks before recording entry.
setopt hist_save_no_dups         # Don't write duplicate entries in the history file.
setopt hist_verify               # Don't execute immediately upon history expansion.
setopt inc_append_history        # Write to the history file immediately, not when the shell exits.
setopt share_history             # Share history between all sessions.

# Initialization

# Input/Outut
unsetopt clobber                 # Require ‘>!’ or ‘>|’ to truncate a file.
setopt   correct                 # Try to correct the spelling of commands.
unsetopt flow_control            # Disable output flow control via start/stop characters.
setopt   hash_cmds               # Note the location of each command the first time it is executed to avoid future path searches.
setopt   hash_dirs               # Hash the directory containing a command, as well as all directories that occur earlier in the path.
setopt   ignore_eof              # Do not exit on end-of-file. Require the use of exit or logout instead.
setopt   interactive_comments    # Allow comments even in interactive shells.
unsetopt print_exit_value        # Do not print the exit value of programs with non-zero exit status.
unsetopt rm_star_silent          # Query the user before executing ‘rm *’ or ‘rm path/*’.

# Job Control
unsetopt hup                     # Do not send the HUP signal to running jobs when the shell exits.
unsetopt notify                  # Report the status of background jobs immediately, rather than waiting until the next prompt.

# Prompting
setopt prompt_subst              # Perform parameter expansion, command substitution and arithmetic expansion in prompts.

# Scripts and Functions
setopt eval_lineno               # Line numbers of expressions evaluated using the builtin eval are tracked separately of the enclosing environment.
setopt function_argzero          # Set $0 temporarily to the name of the executing function/script.

# Shell Emulation

# Shell State

# Zle
unsetopt beep                    # Do not beep on error in ZLE.

# set default bindings before any tweaks made by `autoload`, `source`, etc.
bindkey -e # Use Emacs key bindings


# ========
# ======== Exported Variables
#autoload -Uz colors && colors

export ESHELL=${SHELL}
export FCEDIT=zed
export fignore=(.class .o \~ .stackdump dump.txt nohup.out)

if ((UID)); then
  export HISTFILE=~/.history
else
  export HISTFILE=~/.history_root
fi

export HISTSIZE=3000
export SAVEHIST=$HISTSIZE

# less
export LESS='--RAW-CONTROL-CHARS --hilite-unread --ignore-case --jump-target=2 --no-init --quit-if-one-screen --status-column -Ps%dt/%D ?f%f::STDIN:$'
# LESS_TERMCAP_DEBUG=true        # make manpages show markup codes
export LESS_TERMCAP_mb=$(tput bold; tput setaf 6)               # start blink => cyan
export LESS_TERMCAP_md=$(tput bold; tput setaf 2)               # start bold => green
export LESS_TERMCAP_me=$(tput sgr0)                             # end bold, blink & underline

export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) # start inverse video => yellow on blue
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)                  # stop inverse video =>

export LESS_TERMCAP_us=$(tput smul; tput bold;    tput setaf 1) # start underline => ul red
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)                  # stop underline

export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)
export LESS_TERMCAP_ZN=$(tput ssubm)
export LESS_TERMCAP_ZV=$(tput rsubm)
export LESS_TERMCAP_ZO=$(tput ssupm)
export LESS_TERMCAP_ZW=$(tput rsupm)

export GROFF_NO_SGR=1         # For Konsole and Gnome-terminal

# set dir colors
if [[ "$USER" = "pschaaf" ]]; then
  src=~/etc/rc/dircolors
  dest=~/.dircolors
  if [[ ! -s ${dest}.zwc || ${dest}.zwc -ot ${src} ]]; then
    # generate then compile the command script
    dircolors ${src} >| ${dest}
    zcompile ${dest}
    # but only keep the compiled version
    rm -f ${dest}
    echo Recompiled ${dest}
  fi
  source ${dest}
  unset src dest
fi

export MANPAGER=less
export PAGER=less
export RIPGREP_CONFIG_PATH=~pschaaf/etc/rc/ripgreprc

# Any punctuation char in WORDCHARS is considered a part of the adjacent word. The remaining punctuation chars are
# considered separate words, regardless of what may be adjacent.
export WORDCHARS='|*?-~\\$%^'

if inMacOS; then
  eval "$(starship init zsh)"
  export ITERM2_SQUELCH_MARK=1
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
fi

# ========
# ======== Aliases
alias 8080="open http://localhost:8080/cc"
alias 8090="open http://localhost:8090/cc"
alias cd=pushd
alias du='du -h'
alias grep='grep --extended-regexp --color'
inLinux && alias hpcalc=x48
[[ "$TERMINAL_EMULATOR" = "JetBrains-JediTerm" ]] && alias fd='fd --format "file://${PWD}/{}"'
inCygwin && alias open=explorer
if inLinux; then
  function open() {
    nohup dolphin --new-window ${*:-.} &> /dev/null &
    disown
  }
fi
alias neofetch='neofetch --config ~/etc/rc/neofetchrc'
alias pd=popd
inLinux && alias restartplasma='kquitapp5 plasmashell && kstart5 plasmashell'
alias rpn='java -jar ~/Applications/rpncalc.jar'
#alias rm='rm -i'
! inCygwin && alias rm=trash
alias term='echoVar TERM'
alias tree="tree -a --dirsfirst"
inLinux && alias yay="command yay --color=auto --answerclean None --answerdiff None --answeredit None"


# ========
# ======== Global Aliases - works anywhere on a line
#alias -g ...='../..'


# ========
# ======== Suffix Aliases - type filename<return> to open the file
alias -s txt=kate


# ========
# ======== ls Aliases and Functions
export LS_FLAGS='-BbCFHh --color'

inMacOS && _ls=${HOMEBREW_PREFIX}/bin/gls || _ls=/bin/ls
alias ls="${_ls} ${LS_FLAGS}"
unset _ls

alias la='ls -A'
alias ll='ls -l'
alias lla='ll -A'
alias llt='ll -rt'
alias lr='ls -R'
autoload -Uz lsd
autoload -Uz lld
autoload -Uz llda
alias llda='lsda -l'
autoload -Uz lsf


# ========
# ======== Var and List Processing
autoload -Uz echoList
autoload -Uz echoVar
#alias classpath='echoList CLASSPATH'
#alias fpath='echoList FPATH'
#alias libpath='echoList LD_LIBRARY_PATH'
alias path='echoList PATH'
autoload -Uz rubylib


# ========
# ======== Functions and Aliases
autoload -Uz alert

function browse() {
  ${BROWSER} $@
}

inMacOS && autojump=/usr/local/etc/profile.d/autojump.sh
inLinux && autojump=/etc/profile.d/autojump.sh
[[ -s $autojump ]] && source $autojump
unset autojump

alias gwcd='cd "$(gwls --choose)"'

autoload -Uz colorLabel

inMacOS \
  && alias df='df -Phl' \
  || autoload -Uz df

autoload -Uz ddu

# function basename() { echo ${(F)@:t} }
# function dirname() { echo ${(F)@:h} }

inMacOS && function find() { [[ $1 == -* ]] && command find . ${*} || command find ${*} }

function joinPhotos() {
  local nums=(1 2 3 4 5 6 7 8 9 10)
  for i in $nums; do
    local front=Front0000$i.jpg
    local back=Back${front#Front}
    local joined="joined_$i.jpg"
    if [[ -f ${front} ]]; then
      if [[ -f ${back} ]]; then
        convert ${front} ${back} +append ${joined}
        echo Created ${joined}
      else
        echo "....... ${joined}: can't find ${back}"
      fi
    else
      echo "....... "${joined}: "can't find ${front}"
    fi
  done
}

# Change to the specified dir & remove starting place from dir stack
function pcd() { cd "$@" && popd +1 2>/dev/null }

function pidport() {
  lsof -i tcp:$1
}

# cd to the specified directory, or if it's a file, to the containing directory
function pushd() {
  if [[ -f "$1" ]]; then
    builtin pushd ${1:h}
  else
    builtin pushd ${1}
  fi
}

alias rmgps='exiftool -gps:all= -xmp-exif:all='

#function settitle() { printf '\e]1;%s\a' ${*:-$GIT_REPO} }
autoload -Uz settitle

autoload -Uz splitMp3
autoload -Uz splitFlac

function wcat()  { cat $(which $*) }
function wcd()   { cd $(which $*) }
function wfile() { file $(which ${@}) 2>/dev/null || echo \'${@}\' not found }

alias whence='whence -ac'
autoload -Uz whichjava
inLinux alias yay='yay --answerclean None --answerdiff None --answeredit None'
autoload -Uz zed && alias fned='zed -f'


# ========
# ======== Key Bindings
#[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

bindkey "^?"         backward-delete-char                 # backspace
bindkey "^H"         backward-kill-word                   # ctrl_backspace
bindkey "\033[1;3D"  backward-word                        # alt_left
bindkey "\033[1;5D"  backward-word                        # ctrl_left
bindkey "\033[H"     beginning-of-line                    # home
bindkey "\033[18~"   copy-region-as-kill                  # F7
bindkey "\033[3~"    delete-char                          # delete
bindkey "\M-C\M-,"   down-case-word
bindkey "\033[F"     end-of-line                          # end
bindkey "\033[1;3C"  forward-word                         # alt_right
bindkey "\033[1;5C"  forward-word                         # ctrl_right
bindkey "\033[20~"   history-incremental-search-backward  # F9
bindkey "\033[17~"   kill-whole-line                      # F6
bindkey "\033[3;5~"  kill-word                            # ctrl_delete
bindkey "\M-C\M-5"   up-case-word
bindkey "\033[19~"   yank                                 # F8

if [[ "$TERMINAL_EMULATOR" = "JetBrains-JediTerm" ]]; then
  bindkey "\033[5D"    backward-word         # ctrl_left
  bindkey "\033[5C"    forward-word          # ctrl_right
fi

# Macro Keys

bindkey -s "\033[21~"  ' exit\n'                  # F10
bindkey -s "\033[Z"    ' popd\n'                  # shift_tab
inMacOS && bindkey -s "\033[27~" ' ~/bin/macos/hpcalc\n'
inMacOS && bindkey -s "\033[28~" ' ~/bin/macos/Copernicus-audio-Play-or-Pause\n'


# ========
# ======== The Prompt
autoload -Uz add-zsh-hook

function updateDirs() {
  export DIRS=`dirs -p | awk 'NR > 1 {print}' ORS=' '`
}
(( $#DIRS )) || updateDirs # unless DIRS is already set, run updateDirs
add-zsh-hook chpwd updateDirs

export STARSHIP_CONFIG=~pschaaf/etc/rc/starship.toml
eval "$(starship init zsh)"


# ========
# ======== Guidewire
#if [[ -s ${NVM_DIR}/nvm.sh ]]; then
#  zrecompile -U ${NVM_DIR}/nvm.sh
#  # Bootstrap the enormous nvm (Node version manager) function
#  alias node="nvm install 10.13.0 && unalias node && node"
#  alias nvm="echo Loading...; [[ -s ${NVM_DIR}/nvm.sh ]] && unalias nvm && source ${NVM_DIR}/nvm.sh && nvm"
#fi


# ========
# ======== Keychain
# Start or connect to the existing ssh-agent and/or gpg-agent
if (( ! $#SSH_AGENT_PID )); then
  if inLinux; then
    ((! UID)) || eval `/usr/bin/keychain -Q --eval ~/.ssh/id_ecdsa`
  elif inMacOS; then
    ssh_pid_file="$HOME/.config/ssh-agent.pid"
    SSH_AUTH_SOCK="$HOME/.config/ssh-agent.sock"
    if [ -z "$SSH_AGENT_PID" ]; then
      # no PID exported, try to get it from pidfile
      SSH_AGENT_PID=$(cat "$ssh_pid_file")
    fi

    if ! kill -0 $SSH_AGENT_PID &> /dev/null; then
      # the agent is not running, start it
      rm "$SSH_AUTH_SOCK" &> /dev/null
      >&2 echo "Starting SSH agent, since it's not running; this can take a moment"
      eval "$(ssh-agent -s -a "$SSH_AUTH_SOCK")"
      export SSH_AGENT_PID
      export SSH_AUTH_SOCK

      echo "$SSH_AGENT_PID" >| "$ssh_pid_file"
      >&2 echo "Started ssh-agent with '$SSH_AUTH_SOCK'"

      ssh-add --apple-use-keychain ~/.ssh/id_ecdsa #~/.ssh/id_?sa || ssh-add ~/.ssh/id_?sa
    fi
  fi
fi


# ========
# ======== Zsh Compinstall
#zstyle  :compinstall filename "~/etc/rc/$HOST.zsh"

zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort name
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent ..
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=0
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' verbose true
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'


# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
# shellcheck disable=SC1036
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
  compinit -i -C
else
  compinit -i
  # shellcheck disable=SC1073
  { zrecompile ~/.zcompdump } &!
fi
unset _comp_files
#    unalias  run-help 2>/dev/null && autoload -Uz run-help
zmodload -i zsh/complist


# load atmos
for file in /Users/pschaaf/.atmos/dotfiles.d/*(N); do
  source $file
done

# ========
# ======== Tricks and Tips

## enumerate associative array
# for key value in ${(@kv)associativeArray}; do ...; done

# shrink music - needs work:
# for file in Alternative_Rock/**/*.flac; do ffmpeg -i $file -c:v copy -q:a 0 /run/media/pschaaf/E8CC-6CF9/${file:r}.mp3; done

# shrink PDF: gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.6 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf input.pdf

## brace expansion - example
#  $ X=(A B C)
#  $ Y=(+ -)
#  $ print -r -- $^X.$^Y
#  A.+ A.- B.+ B.- C.+ C.-
#
## Lists every executable in PATH
#  $ print -l ${^path}/*(-*N)

## recursive chmod
#  $ chmod 700 **/(.) # Only files
#  $ chmod 700 **/(/) # Only directories

## List files beginning at `foo23' upwards (foo23, foo24, foo25, ..)
#  $ ls -l foo<23->

## List files in the current directory are not writable by the owner
#  $ print -l ~/*(ND.^w)


# Test on modification times
#  $ autoload -U age

## files modified today
#  $ print *(e:age today now:)

## files modified since 5 pm
#  $ print *(e-age 17:00 now-)

## ... since 5 o'clock yesterday
#  $ print *(e-age yesterday,17:00 now-)

## ... from last Christmas before today
#  $ print *(e-age 2006/12/25 today-)

## ... before yesterday
#  $ print *(e-age 1970/01/01 yesterday-)

## all files modified between the start of those dates
#  $ print *(e:age 2006/10/04 2006/10/09:)

## all files modified on that date
#  $ print *(e:age 2006/10/04:)

## Supply times.
#  $ print *(e-age 2006/10/04:10:15 2006/10/04:10:45-)

## MacOS kill listener on port 8081
# /bin/kill -9 $(lsof -i tcp:8081 -t) 2> /dev/null && print -P "%K{42}Killed%k" || print -P "%K{20}Not found%k"
