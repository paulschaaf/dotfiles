#@IgnoreInspection BashAddShebang
# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'"); outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..." -*-

# This script is run by interactive shells. It should contain commands to set up aliases, functions, options, key
# bindings, etc.
#
# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

# ========
# ======== Profiling
( (($#debug)) || (($#trace)) ) && echo "\e[42m# ===== Sourcing ${(%):-%N}\e[0m"
(( $#trace )) && set -x || set +x

inMacOS && path=(${os_override_path[@]} ${path[@]}) # fix the order after Mac's /etc/zprofile screws it up
unset os_override_path

# ========
# ======== Shell Options

# Changing directories
setopt auto_cd                   # If a command can’t be executed as normal but is the name of a directory, cd to it.
setopt auto_pushd                # Make cd push the old directory onto the directory stack
setopt pushd_silent              # Do not print the directory stack after pushd or popd.
setopt pushd_to_home             # Have pushd with no arguments act like ‘pushd $HOME’.

# Completion
setopt auto_list                 # Automatically list choices on an ambiguous completion.
setopt auto_menu                 # Automatically use menu completion after the second consecutive request for completion, for example by pressing the tab key repeatedly
setopt auto_param_slash          # If a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space.
setopt auto_remove_slash         # When the last character resulting from a completion is a slash and the next character typed is a word delimiter, a slash, or a character that ends a command (such as a semicolon or an ampersand), remove the slash.
setopt glob_complete             # When the current word has a glob pattern, cycle through matches rather than inserting all possibilities.

# Expansion and Globbing
setopt extendedglob              # treat #, ~, and ^ as part of patterns for filename generation
# History
setopt bang_hist                 # Perform textual history expansion, csh-style, treating the character ‘!’ specially.
setopt extended_history          # Write the history file in the ":start:elapsed;command" format.
setopt hist_find_no_dups         # Do not display a line previously found.
setopt hist_ignore_all_dups      # Delete old recorded entry if new entry is a duplicate.
setopt hist_ignore_dups          # Don't record an entry that was just recorded again.
setopt hist_ignore_space         # Don't record an entry starting with a space.
setopt hist_no_functions         # Remove function definitions from the history list.
setopt hist_reduce_blanks        # Remove superfluous blanks before recording entry.
setopt hist_save_no_dups         # Don't write duplicate entries in the history file.
setopt hist_verify               # Don't execute immediately upon history expansion.
setopt inc_append_history        # Write to the history file immediately, not when the shell exits.
setopt share_history             # Share history between all sessions.

# Initialization

# Input/Outut
unsetopt clobber                 # Require ‘>!’ or ‘>|’ to truncate a file.
setopt correct                   # Try to correct the spelling of commands.
unsetopt flow_control            # Disable output flow control via start/stop characters.
setopt hash_cmds                 # Note the location of each command the first time it is executed to avoid future path searches.
setopt hash_dirs                 # Hash the directory containing a command, as well as all directories that occur earlier in the path.
setopt ignore_eof                # Do not exit on end-of-file. Require the use of exit or logout instead.
setopt interactive_comments      # Allow comments even in interactive shells.
unsetopt print_exit_value        # Do not print the exit value of programs with non-zero exit status.
unsetopt rm_star_silent          # Query the user before executing ‘rm *’ or ‘rm path/*’.

# Job Control
unsetopt hup                     # Do not send the HUP signal to running jobs when the shell exits.
unsetopt notify                  # Report the status of background jobs immediately, rather than waiting until the next prompt.

# Prompting
setopt prompt_subst              # Perform parameter expansion, command substitution and arithmetic expansion in prompts.

# Scripts and Functions
setopt eval_lineno               # Line numbers of expressions evaluated using the builtin eval are tracked separately of the enclosing environment.
setopt function_argzero          # Set $0 temporarily to the name of the executing function/script.

# Shell Emulation

# Shell State

# Zle
unsetopt beep                    # Do not beep on error in ZLE.

# set default bindings before any tweaks made by `autoload`, `source`, etc.
bindkey -e # Use Emacs key bindings

# ========
# ======== Exported Variables
autoload -Uz colors && colors

export ESHELL=${SHELL}
export FCEDIT=zed
export fignore=(.class .o \~ .stackdump dump.txt nohup.out)

if ((UID)); then
   export HISTFILE=~/.history
else
   export HISTFILE=~/.history_root
fi

export HISTSIZE=3000
export SAVEHIST=$HISTSIZE

export LESS='--RAW-CONTROL-CHARS --hilite-unread --ignore-case --jump-target=2 --no-init --quit-if-one-screen --status-column -Ps%dt/%D ?f%f::STDIN:$'

# LESS_TERMCAP_DEBUG=true man find        # opens manpage showing markup codes
export LESS_TERMCAP_mb=${fg_bold[cyan]}   # start blink
export LESS_TERMCAP_md=${fg_bold[green]}  # start bold
export LESS_TERMCAP_me=${reset_color}     # end bold, blink & underline

export LESS_TERMCAP_so=${fg_bold[yellow]} # start inverse video
export LESS_TERMCAP_se=${reset_color}     # stop inverse video

export LESS_TERMCAP_us=${fg_bold[red]/m/;$color[underline]m} # start underline
export LESS_TERMCAP_ue=${reset_color}     # end underline

export LESSKEY=~pschaaf/.less_${HOSTNAME}

# di=38;5;105
inMacOS export LSCOLORS="gxfxcxdxbxegedabagacad"

#lsColors=(
#  'bd=40;33;01'  # block devices
#  'cd=40;33;01'  # character devices
#  'di=01;34'     # directories
#  'ex=01;32'     # executable files
#  'fi=00'        # regular files
#  'ln=01;36'     # symlinks
#  'mi=01;37;41'
#  'no=00'
#  'or=01;37;41'  # symlinks with no target
#  'pi=40;33'     # named pipes
#  'so=01;35'     # sockets
#
#  '*.arc=01;31'
#  '*.arj=01;31'
#  '*.bmp=01;35'
#  '*.btm=01;32'
#  '*.bz2=01;31'
#  '*.bz=01;31'
#  '*.gif=01;35'
#  '*.gz=01;31'
#  '*.jpeg=01;35'
#  '*.jpg=01;35'
#  '*.lha=01;31'
#  '*.lzh=01;31'
#  '*.png=01;35'
#  '*.rpm=01;31'
#  '*.tar=01;31'
#  '*.taz=01;31'
#  '*.tbz2=01;3'
#  '*.tgz=01;31'
#  '*.tif=01;35'
#  '*.tiff=01;35'
#  '*.tz=01;31'
#  '*.xbm=01;35'
#  '*.xpm=01;35'
#  '*.z=01;31'
#  '*.Z=01;31'
#  '*.zip=01;31'
#)
## crunch it into a single colon-delimited String for zsh
#export LS_COLORS=${(j_:_)lsColors}; unset lsColors

# set LS_COLORS
src=~/etc/rc/dircolors
dest=~/.dircolors
if [[ ! -s ${dest}.zwc || ${dest}.zwc -ot ${src} ]]; then
  # generate then compile the command script
  dircolors ${src} >| ${dest}
  zcompile ${dest}
  # but only keep the compiled version
  rm -f ${dest}
  echo Recompiled ${dest}
fi
source ${dest}
unset src dest

export MANPAGER=less
export NVM_DIR=~/.nvm
export PAGER=less
export RIPGREP_CONFIG_PATH=~pschaaf/etc/rc/ripgreprc

# Any punctuation char in WORDCHARS is considered a part of the adjacent word. The remaining punctuation chars are
# considered separate words, regardless of what may be adjacent.
export WORDCHARS='|*?-~\\$%^'


# ========
# ======== Aliases
alias 8080="open http://localhost:8080/cc"
alias 8090="open http://localhost:8090/cc"
#alias ..='pushd ..' # doesn't work on MaoOS terminal
#alias ...="pushd ../.."
alias cd=pushd
alias du='du -h'
alias grep='grep --extended-regexp --color'
inLinux && alias hpcalc=x48
inCygwin && alias open=explorer
if inLinux; then
  alias open=dolphin
  function dolphin() {
     command dolphin ${*:-.} &
  }
fi
alias macbook=pschaaf-mbp15
alias neofetch='neofetch --config ~/etc/rc/neofetchrc'
alias pd=popd
alias restartplasma='kquitapp5 plasmashell && kstart5 plasmashell'
#alias rm='rm -i'
alias rm=trash
alias root='dirs -c && pcd'
alias term='echoVar TERM'
alias tree="tree -a --dirsfirst"
alias yay="command yay --color=auto"


# ========
# ======== Global Aliases - works anywhere on a line
alias -g ...='../..'


# ========
# ======== Suffix Aliases - type filename<return> to open the file
alias -s txt=kate


# ========
# ======== ls Aliases and Functions
export LS_FLAGS='-BbCFHh --color'

inMacOS && _ls=/usr/local/bin/ls || _ls=/bin/ls
alias ls="${_ls} ${LS_FLAGS}"
unset _ls

alias la='ls -A'
alias ll='ls -l'
alias lla='ll -A'
alias llt='ll -rt'
alias lr='ls -R'
autoload -Uz lsd
autoload -Uz lld
autoload -Uz llda
alias llda='lsda -l'
autoload -Uz lsf


# ========
# ======== Var and List Processing
autoload -Uz echoList
autoload -Uz echoVar
alias classpath='echoList CLASSPATH'
alias fpath='echoList FPATH'
alias libpath='echoList LD_LIBRARY_PATH'
alias path='echoList PATH'
autoload -Uz rubylib


# ========
# ======== Functions and Aliases
autoload -Uz alert

function browse() {
  ${BROWSER} $@
}

inMacOS && autojump=/usr/local/etc/profile.d/autojump.sh
inLinux && autojump=/etc/profile.d/autojump.sh
[[ -s $autojump ]] && source $autojump
unset autojump

inMacOS && source /Users/pschaaf/.config/broot/launcher/bash/br

inMacOS \
    && alias df='df -Phl' \
    || autoload -Uz df

autoload -Uz ddu

# function basename() { echo ${(F)@:t} }
# function dirname() { echo ${(F)@:h} }

inMacOS && function find() { [[ $1 == -* ]] && command find . ${*} || command find ${*} }

autoload -Uz frotz

autoload -Uz mkfunction

function joinPhotos() {
  local nums=(1 2 3 4 5 6 7 8 9 10)
  for i in $nums; do
    local front=Front0000$i.jpg
    local back=Back${front#Front}
    local joined="joined_$i.jpg"
    if [[ -f ${front} ]]; then
      if [[ -f ${back} ]]; then
        convert ${front} ${back} +append ${joined}
        echo Created ${joined}
      else
        echo "....... ${joined}: can't find ${back}"
      fi
    else
      echo "....... "${joined}: "can't find ${front}"
    fi
  done
}

#function parse_options() {
#  # declare the vars with defaults
#  local o_port=(-p "default port")
#  local o_root=(-r "default root")
#  local o_log=(-d "default log")
#  local o_help=()
#
#  # populate the vars
#  zparseopts -K -- p:=o_port r:=o_root l:=o_log h=o_help
#  if [[ $? != 0 || "$o_help" != "" ]]; then
#    echo Usage: $(basename "$0") "[-p PORT] [-r DIRECTORY]"
#    exit 1
#  fi
#
#  # extract the args
#  local port=$o_port[2]
#  local root=$o_root[2]
#  local log=$o_log[2]
#
#  [[ $root[1] != '/' ]] && root="$PWD/$root"
#  typeset -p port root log help
#}
## now use the function:
#parse_options -p 1024

# Change to the specified dir & remove starting place from dir stack
function pcd() { cd "$@" && popd +1 2>/dev/null }

function pidport() {
   lsof -i tcp:$1
}

# cd to the specified directory, or if it's a file, to the containing directory
function pushd() {
    if [[ -f "$1" ]]; then
        builtin pushd ${1:h}
    else
        builtin pushd ${1}
    fi
}

function root() {
    pcd $0 && dirs -
}

function settitle() { printf '\e]1;%s\a' ${*:-$GIT_REPO} }

autoload -Uz splitMp3
autoload -Uz splitFlac

function wcat()  { cat $(which $*) }
function wcd()   { cd $(which $*) }
function wfile() { file $(which ${@}) 2>/dev/null || echo \'${@}\' not found }

alias whence='whence -ac'
autoload -Uz whichjava
inLinux alias yay='yay --answerclean None --answerdiff None --answeredit None'
autoload -Uz zed && alias fned='zed -f'


# ========
# ======== Key Bindings
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

bindkey "\033[17~"   kill-whole-line       # F6
bindkey "\033[18~"   copy-region-as-kill   # F7
bindkey "\033[19~"   yank                  # F8
bindkey "\033[20~"   history-incremental-search-backward # F9

if (( $#inIntelliJ )); then
    bindkey "\033[5D"    backward-word         # ctrl_left
    bindkey "\033[5C"    forward-word          # ctrl_right

    bindkey "\033[H"     beginning-of-line     # home
    bindkey "\033[F"     end-of-line           # end
else
    bindkey "\033[1;5D"  backward-word         # ctrl_left
    bindkey "\033[1;5C"  forward-word          # ctrl_right

    if inCygwin; then
       bindkey "\033[H"     beginning-of-line     # home
       bindkey "\033[F"     end-of-line           # end
    else
       bindkey "\033[1~"    beginning-of-line     # home
       bindkey "\033[4~"    end-of-line           # end
    fi
fi

bindkey "\M-C\M-5"   up-case-word
bindkey "\M-C\M-,"   down-case-word

bindkey "\033[3~"    delete-char           # delete
bindkey "^?"         backward-delete-char  # backspace

bindkey "\033[3;5~"  kill-word             # ctrl_delete
bindkey "^H"         backward-kill-word    # ctrl_backspace

case ${TERM} in
    rxvt*)
        bindkey "^H"     backward-delete-char
        bindkey "\033?"  backward-kill-word
        ;;
    *)
        ;;
esac


# Macro Keys

bindkey -s "\033[21~"  ' exit\n'                  # F10
bindkey -s "\033[Z"    ' popd\n'                  # shift_tab
#bindkey -s ""^_""      '\C-apath \C-e\C-m!$\011'  # ctrl_? prepends 'path'
inMacOS && bindkey -s "\033[27~" ' ~/bin/macos/hpcalc\n'
inMacOS && bindkey -s "\033[28~" ' ~/bin/macos/Copernicus-audio-Play-or-Pause\n'


# ========
# ======== Remote sessions
if (( $#SUDO_USER )); then
    export CONNECTION=sudo
    colored_connection="%F{magenta}"
elif (( $#SSH_TTY )); then
    export CONNECTION=ssh
    colored_connection="%F{226}%S"
elif (( $#REMOTEHOST || $#REMOTEUSER )); then
    export CONNECTION=tlnt
    colored_connection="%B%F{red}"
fi

(( $#colored_connection )) && colored_connection=' '${colored_connection}${CONNECTION}%b%f%k%s


# ========
# ======== The Prompt
autoload -Uz add-zsh-hook vcs_info
function git_status() {
  vcs_info
    export VCS_STATUS="${vcs_info_msg_0_}${vcs_info_msg_0_:+
}"
}
add-zsh-hook precmd git_status

zstyle ':vcs_info:*' enable git

# ref: https://timothybasanov.com/2016/04/23/zsh-prompt-and-vcs_info.html
zstyle ':vcs_info:git*' check-for-changes true
zstyle ':vcs_info:git*' stagedstr '%{%F{green}%B%}S%{%b%f%}'
zstyle ':vcs_info:git*' unstagedstr '%{%F{red}%B%}U%{%b%f%}'
#-zstyle ':vcs_info:*' formats '%{%F{cyan}%}%45<…<%R%<</%{%f%}%{%F{green}%}(%25>…>%b%<<)%{%f%}%{%F{cyan}%}%S%{%f%}%c%u'
#-zstyle ':vcs_info:git*' formats "%{$fg[green]%}%b%a%m%u%c%{$reset_color%} "
zstyle ':vcs_info:git*' formats "(%b m:%m %u c:%c)"
#-zstyle ':vcs_info:*' actionformats '%{%F{cyan}%}%45<…<%R%<</%{%f%}%{%F{red}%}(%a|%m)%{%f%}%{%F{cyan}%}%S%{%f%}%c%u'
zstyle ':vcs_info:git*' actionformats "(%b|a:%a m:%m %u c:%c)"
#zstyle ':vcs_info:*' nvcsformats ''
zstyle ':vcs_info:git:*' patch-format '%10>…>%p%<< (%n applied)'
zstyle ':vcs_info:*+set-message:*' hooks home-path
#function +vi-home-path() {
#  # Replace $HOME with ~
#  hook_com[base]="$(echo ${hook_com[base]} | sed "s/${HOME:gs/\//\\\//}/~/" )"
#}
#zstyle ':vcs_info:git+post-backend:*' hooks git-remote-staged
#function +vi-git-remote-staged() {
#  # Show "unstaged" when changes are not staged or not committed
#  # Show "staged" when last committed is not pushed
#  #
#  # See original VCS_INFO_get_data_git for implementation details
#
#  # Set "unstaged" when git reports either staged or unstaged changes
#  if (( gitstaged || gitunstaged )) ; then
#    gitunstaged=1
#  fi
#
#  # Set "staged" when current HEAD is not present in the remote branch
#  if (( querystaged )) && \
#     [[ "$(${vcs_comm[cmd]} rev-parse --is-inside-work-tree 2> /dev/null)" == 'true' ]] ; then
#      # Default: off - these are potentially expensive on big repositories
#      if ${vcs_comm[cmd]} rev-parse --quiet --verify HEAD &> /dev/null ; then
#          gitstaged=1
#          if ${vcs_comm[cmd]} status --branch --short | head -n1 | grep -v ahead > /dev/null ; then
#            gitstaged=
#          fi
#      fi
#  fi
#
#  hook_com[staged]=$gitstaged
#  hook_com[unstaged]=$gitunstaged
#}

#if [[ -f ~/etc/rc/git/git_zshrc.sh ]]; then
#    zrecompile -U ~/etc/rc/git/git_zshrc.sh
#    source ~/etc/rc/git/git_zshrc.sh
#
#    function git() {
#        command git $*
#        local exitVal=$?
#        echo "$*" | grep --quiet 'checkout\|--edit-description' && updateGitVars
#        return $exitVal
#    }
#fi

function updateDirs() {
    dirs=`dirs -p | awk 'NR > 1 {print}' ORS=' '`
}
(( $#dirs )) || updateDirs # unless dirs is already set, run updateDirs

add-zsh-hook chpwd updateDirs

export GIT_PS1_SHOWDIRTYSTATE=1

currentUser=${USER//pschaaf/}

case ${UNAME}:${HOSTNAME} in
   CYGWIN*|Windows)
#       HOST_ICON=`echo "\U1FA9F "`
       HOST_ICON="🪟 "
       ;;
   Darwin*)
       HOST_ICON="🍎 "
       ;;
   Linux*)
       HOST_ICON="🐧 "
       ;;
   *)
#       HOST_ICON=`echo "\U2047" `
       HOST_ICON="⁇ "
       ;;
esac
export HOST_ICON

if (( $#currentUser || $#CONNECTION )); then # this is true unless it's simply pschaaf@localhost
    if ((UID)); then
        case ${UNAME}:${HOSTNAME} in
            CYGWIN*)
                hostColor=%B%F{white}%K{green}
                ;;
            Darwin*)
                hostColor=%F{green}%K{black}
                ;;
            Linux*)
                hostColor=%F{green}%K{black}
                ;;
            Windows*)
                hostColor=%B%F{white}%K{blue}
                ;;
            *)
                hostColor=%B%F{white}%K{black}
                ;;
        esac
    else
       hostColor=%B%F{white}%K{red}
    fi

    # append the host machine, maybe preceeded by an @
    (( $#CONNECTION )) && currentUser=${currentUser}${currentUser:+@}'%m'

    currentUser=' '$hostColor${currentUser}%b%f%k
    unset hostColor
fi

(( $#HOSTMESSAGE )) && HOSTMESSAGE=" %B%F{magenta}%K{black}$HOSTMESSAGE%k%f%b"

PS1="%F{235}%U\${(l.\${COLUMNS}.. .)}%u%f
%(?..%B%K{red}-%?%k%b )%T${currentUser}${HOSTMESSAGE} ${HOST_ICON}%F{yellow}%B%80>…>%~%b%F{240} \$dirs%<<%f
\$VCS_STATUS%F{cyan}%2(L.%L_.)%!%f${colored_connection} \$GW_PROMPT%(!.#.$) "
#RPROMPT=\$vcs_info_msg_0_
PS2="(%F{magenta}%_%f) > "


# ========
# ======== Guidewire
#if [[ -s ${NVM_DIR}/nvm.sh ]]; then
#    zrecompile -U ${NVM_DIR}/nvm.sh
#    # Bootstrap the enormous nvm (Node version manager) function
#    alias node="nvm install 10.13.0 && unalias node && node"
#    alias nvm="echo Loading...; [[ -s ${NVM_DIR}/nvm.sh ]] && unalias nvm && source ${NVM_DIR}/nvm.sh && nvm"
#fi


# ========
# ======== Keychain
# Start or connect to the existing ssh-agent and/or gpg-agent
if inLinux && (( ! $#SSH_AGENT_PID )); then
     isRoot || eval `/usr/bin/keychain -Q --eval ~/.ssh/id_?sa`
elif inMacOS; then
     ssh-add -T ~/.ssh/id_?sa || ssh-add ~/.ssh/id_?sa
     alias ssh='command ssh -o UseKeychain=yes'
fi

# ========
# ======== Zsh Compinstall
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort name
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent ..
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=0
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' squeeze-slashes true
zstyle ':zftp:' titlebar true
zstyle ':completion:*' verbose true
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle  :compinstall filename "~/etc/rc/$HOST.zsh"

# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
# shellcheck disable=SC1036
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
    compinit -i -C
else
    compinit -i
    # shellcheck disable=SC1073
    { zrecompile ~/.zcompdump } &!
fi
unset _comp_files
#    unalias  run-help 2>/dev/null && autoload -Uz run-help
zmodload -i zsh/complist


# load atmos
for file in /Users/pschaaf/.atmos/dotfiles.d/*(N); do
   source $file
done


# ========
# ======== Tricks and Tips

# shrink PDF: gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.6 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf input.pdf

## brace expansion - example
#  $ X=(A B C)
#  $ Y=(+ -)
#  $ print -r -- $^X.$^Y
#  A.+ A.- B.+ B.- C.+ C.-
#
## Lists every executable in PATH
#  $ print -l ${^path}/*(-*N)

## recursive chmod
#  $ chmod 700 **/(.) # Only files
#  $ chmod 700 **/(/) # Only directories

## List files beginning at `foo23' upwards (foo23, foo24, foo25, ..)
#  $ ls -l foo<23->

## List files in the current directory are not writable by the owner
#  $ print -l ~/*(ND.^w)


# Test on modification times
#  $ autoload -U age

## files modified today
#  $ print *(e:age today now:)

## files modified since 5 pm
#  $ print *(e-age 17:00 now-)

## ... since 5 o'clock yesterday
#  $ print *(e-age yesterday,17:00 now-)

## ... from last Christmas before today
#  $ print *(e-age 2006/12/25 today-)

## ... before yesterday
#  $ print *(e-age 1970/01/01 yesterday-)

## all files modified between the start of those dates
#  $ print *(e:age 2006/10/04 2006/10/09:)

## all files modified on that date
#  $ print *(e:age 2006/10/04:)

## Supply times.
#  $ print *(e-age 2006/10/04:10:15 2006/10/04:10:45-)

## MacOS kill listener on port 8081
# /bin/kill -9 $(lsof -i tcp:8081 -t) 2> /dev/null && print -P "%K{42}Killed%k" || print -P "%K{20}Not found%k"
