#@IgnoreInspection BashAddShebang
# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'"); outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..." -*-

# This script is run by interactive shells. It should contain commands to set up aliases, functions, options, key
# bindings, etc.
#
# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 3) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 4) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

# zmodload zsh/zprof # uncomment, then run zprof afterward to profile this file

# ======== Shell Options
if  [[ -z "$ifZsh" ]]; then
    unsetopt \
        beep \
        clobber \
        flow_control \
        hup \
        notify \
        print_exit_value \
        rm_star_silent

    setopt \
        auto_list \
        auto_menu \
        auto_param_slash \
        auto_pushd \
        auto_remove_slash \
        bang_hist \
        correct \
        extended_history \
        function_argzero \
        hash_cmds \
        hash_dirs \
        hist_find_no_dups \
        hist_ignore_dups \
        hist_ignore_space \
        hist_no_functions \
        hist_reduce_blanks \
        ignore_eof \
        inc_append_history \
        prompt_subst \
        pushd_silent \
        share_history
fi


# ======== Zsh Compinstall
if  [[ -z ${ifZsh} ]]; then
    zstyle ':completion:*' expand prefix suffix
    zstyle ':completion:*' file-sort name
    zstyle ':completion:*' group-name ''
    zstyle ':completion:*' ignore-parents parent ..
    zstyle ':completion:*' list-colors ''
    zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
    zstyle ':completion:*' menu select=0
    zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
    zstyle ':completion:*' squeeze-slashes true
    zstyle ':zftp:' titlebar true
    zstyle ':completion:*' verbose true
    zstyle  :compinstall filename "${HOME}/etc/rc/$HOST.zsh"

    autoload -Uz colors && colors
    autoload -Uz compinit
    ifRoot \
        && compinit -u \
        || compinit
    autoload -Uz zed                  && alias fned='zed -f'
#    unalias  run-help 2>/dev/null && autoload -Uz run-help
    zmodload -i zsh/complist
    zrecompile ~/.zcompdump
fi


# ======== Exported Variables
export ESHELL=$SHELL
export FCEDIT=zed
export FIGNORE=.class:.o:\~:.stackdump:dump.txt:nohup.out
if (( ! EUID )); then
  HISTFILE=~/.history_root
else
  HISTFILE=~/.history
fi
export HISTSIZE=1000
export SAVEHIST=1000
export LESS=' --RAW-CONTROL-CHARS --hilite-unread --ignore-case --jump-target=2 --no-init --quit-if-one-screen --status-column -Ps%dt/%D ?f%f::STDIN:$'
export LESS_TERMCAP_mb=$fg_bold[green]
export LESS_TERMCAP_md=$fg_bold[green]
export LESS_TERMCAP_me=$reset_color
export LESS_TERMCAP_se=$reset_color
export LESS_TERMCAP_so=$fg_bold[yellow]
export LESS_TERMCAP_ue=$reset_color
export LESS_TERMCAP_us=${fg_bold[red]/m/;$color[underline]m} # insert underline markup

export LESSKEY=${HOME}/.less_${HOSTNAME}
export MANPAGER=less
export NVM_DIR=${HOME}/.nvm
export PAGER=less
export RIPGREP_CONFIG_PATH=~/etc/rc/ripgreprc
# export USE_COLOR=true

# Any punctuation char in WORDCHARS is considered a part of the adjacent word.
# The remaining punctuation chars are considered separate words, regardless of
# what may be adjacent:  !"#&'()+,./:;<=>?@[]`{|}
export WORDCHARS='|*?-~\\$%^'


# ======== Aliases
alias ..='pushd ..'
alias ...="pushd ../.."
alias cd=pushd
alias cores='inxi -C'
alias du='du -h'
ifMacOS && alias home="printf '\e[3;0;0;1t\e[8;142;100t'" # move to upper left then resize terminal -- see https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
ifCygwin && alias open=explorer
ifLinux && alias open=dolphin
alias pd=popd
alias rm='rm -i'
ifRoot || alias root='sudo -u root ZDOTDIR=~pschaaf zsh -il'
alias term='echoVar TERM'
alias tree="tree -a --dirsfirst"
alias vpnc-connect='sudo vpnc-connect'
alias vpnc-disconnect='sudo vpnc-disconnect'
ifMacOS && alias work="printf '\e[3;0;0;1t\e[8;106;100t'"


# ======== ls Aliases and Functions
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;37;41:mi=01;37;41:ex=01;32:*.btm=01;32:*.tar=01;31:*.tgz=01;31:*.tbz2=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lha=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:*.tiff=01;35'
export LS_FLAGS=-BCFbhH
ifMacOS \
    && LS_FLAGS="${LS_FLAGS}G" \
    || LS_FLAGS="${LS_FLAGS}${LS_COLORS:+ --color}"

alias ls="ls ${LS_FLAGS}"
alias la='ls -A'
alias ll='ls -l'
alias lla='ls -Al'
alias llt='ls -lrt'
alias lr='ls -R'
autoload -Uz lsd
autoload -Uz lld
autoload -Uz lsda
alias llda='lsda -l'
autoload -Uz lsf


# ======== Var and List Processing
autoload -Uz echoList
autoload -Uz echoVar
alias classpath='echoList CLASSPATH'
alias grep='grep --extended-regexp --color'
alias fpath='echoList FPATH'
alias libpath='echoList LD_LIBRARY_PATH'
alias path='echoList PATH'
autoload -Uz rubylib



# ======== Functions and Aliases
autoload -Uz alert

ifMacOS && [[ -s /usr/local/etc/profile.d/autojump.sh ]] && source /usr/local/etc/profile.d/autojump.sh
ifLinux && [[ -s /etc/profile.d/autojump.sh ]] && source /etc/profile.d/autojump.sh

ifMacOS \
    && alias df='df -Phl' \
    || autoload -Uz df

autoload -Uz ddu

# function basename() { echo ${(F)@:t} }
# function dirname() { echo ${(F)@:h} }

ifMacOS && function find() { [[ $1 == -* ]] && command find . $* || command find $* }

autoload -Uz frotz
autoload -Uz mkfunction

if [[ -n ${inIntelliJ} ]]; then
    autoload -Uz rg_intellij
    alias rg=rg_intellij
fi

# Change to the specified dir & remove starting place from dir stack
function pcd() { cd "$@" && popd +1 2>/dev/null }

# cd to the specified directory, or if it's a file, to the containing directory
function pushd() {
    if [[ -z "$1" ]]; then
        builtin pushd
    elif [[ -f "$1" ]]; then
        builtin pushd ${1:h}
    else
        builtin pushd ${1}
    fi
}

function settitle() { printf '\e]1;%s\a' ${*:-$GIT_REPO} }

autoload -Uz splitMp3
autoload -Uz splitFlac

function wcat()  { cat $(which $*) }
function wcd()   { cd $(which $*) }
function wfile() { file $(which ${@}) 2>/dev/null || echo \'${@}\' not found }
alias whence='whence -ac'



# ======== Key Bindings
bindkey -e # Use Emacs key bindings

bindkey "\033[17~"   kill-whole-line       # F6
bindkey "\033[18~"   copy-region-as-kill   # F7
bindkey "\033[19~"   yank                  # F8
bindkey "\033[20~"   history-incremental-search-backward # F9

bindkey "\033[1;5D"  backward-word         # ctrl_left
bindkey "\033[1;5C"  forward-word          # ctrl_right

bindkey "\033[1~"    beginning-of-line     # home
bindkey "\033[4~"    end-of-line           # end

bindkey "\M-C\M-5"   up-case-word
bindkey "\M-C\M-,"   down-case-word

bindkey "\033[3~"    delete-char           # delete
bindkey "^?"         backward-delete-char  # backspace

bindkey "\033[3;5~"  kill-word             # ctrl_delete
bindkey "^H"         backward-kill-word    # ctrl_backspace

case ${TERM} in
    cygwin*)
        bindkey "\033H"  backward-delete-char
        bindkey "\033?"  backward-kill-word
        ;;
    rxvt*)
        bindkey "^H"     backward-delete-char
        bindkey "\033?"  backward-kill-word
        ;;
    *)
        ;;
esac

# Macro Keys

bindkey -s "\033[21~"  ' exit\n'                  # F10
bindkey -s "\033[Z"    ' popd\n'                  # shift_tab
bindkey -s ""^_""      '\C-apath \C-e\C-m!$\011'  # ctrl_? prepends 'path'

#     if [[ -z "$CONNECTION" ]]; then
#         #bindkey -r "\C-h" 	# remove binding
#         #bindkey "\C-h\C-k" describe`-key-briefly	#
#     fi


# ======== Remote sessions
if [[ -n "$SSH_TTY"    ]]; then
    export CONNECTION=ssh
elif [[ -n "$REMOTEHOST" ]]; then
    export CONNECTION=tlnt
elif [[ -n "$SUDO_USER"  ]]; then
    export CONNECTION=sudo
elif [[ -n "$REMOTEUSER" ]]; then
    export CONNECTION=tlnt
fi


# ======== The Prompt
export GIT_PS1_SHOWDIRTYSTATE=1

case ${HOSTNAME}:${UNAME} in
    *:CYGWIN*)
        hostColor=$fg_bold[white]$bg[green]
        ;;
    *:Darwin*)
        hostColor=$fg[green]$bg[black]
        ;;
    *:Linux*)
        hostColor=$fg[green]$bg[black]
        ;;
    *:Windows*)
        hostColor=$fg_bold[white]$bg[blue]
        ;;
    *:UNKN*|*)
        hostColor=$fg_bold[white]$bg[black]
        ;;
esac

rootColorString=$fg_bold[white]$bg[red]

case ${CONNECTION} in
    ssh)
        connection_color=${fg[black]/m/;48;5;226m}
        ;;
    tlnt)
        connection_color=$fg_bold[red]
        ;;
    sudo)
        connection_color=$fg[magenta]
        ;;
    *)
        ;;
esac
if [[ -n "$CONNECTION" ]]; then
    hostColor=${hostColor/m/;$color[underline]m}  # underline the host name
fi

if [[ -n "$connection_color" ]]; then
    CONNECTION="%{$connection_color%}$CONNECTION%{$reset_color%} "
fi

if [[ -f ~/etc/rc/git/git_zshrc.sh ]]; then
    zrecompile ~/etc/rc/git/git_zshrc.sh && source ~/etc/rc/git/git_zshrc.sh
else
    function updateGitVars() { : }
fi

function updateDirs() {
    dirs=`dirs -p | awk '
       NR == 2 {printf "[0;38;5;243m"};
       {print}
    ' ORS=' '`
}
export dirs=`dirs`

function git() {
    command git $*
    echo "$*" | grep --quiet 'checkout\|--edit-description' && updateGitVars
}

autoload -Uz add-zsh-hook
add-zsh-hook chpwd updateDirs

if [[ -n "$HOSTMESSAGE" ]]; then
    HOSTMESSAGE=" $fg[magenta]$bg[black]$HOSTMESSAGE"
fi

currentUser=${USER//pschaaf/}
currentUser=${currentUser}${currentUser:+@}

PS1="%{[4;38;5;235m%}\${(l.\${COLUMNS}.. .)}
%{$reset_color%}%T %{%(!.%{$rootColorString%}.%{$hostColor%})%}${currentUser}%m%{$reset_color%}$HOSTMESSAGE %{$fg_bold[yellow]%}%62>\>>\$dirs%<<
%{$reset_color%}\$GIT_STATUS%2(L.%{$fg_bold[cyan]%}%L_.)%{$fg_no_bold[cyan]%}%!%{$reset_color%} $CONNECTION$SCRIPTING_MSG\$GW_PROMPT%(!.#.$) "

PS2="(%{$fg_bold[magenta]%}%_%{$reset_color%}) %(!.#.$) "


# ======== Guidewire
# Bootstrap the huge nvm (Node version manager) function
alias nvm="echo Loading...; [[ -s ${NVM_DIR}/nvm.sh ]] && unalias nvm && source ${NVM_DIR}/nvm.sh && nvm"


# ======== Keychain
# Let's re-use ssh-agent and/or gpg-agent between logins
# /usr/bin/keychain ${HOME}/.ssh/id_rsa ${HOME}/.ssh/id_dsa
# source ${HOME}/.keychain/$HOSTNAME-sh
#if [[ $UID -gt 0 ]]; then  # if I'm not root
#    eval `keychain --eval --agents ssh ~/.ssh/id_rsa`
#fi


# ======== Debugging
# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself. Don't forget that any
# edits are lost if this file is re-generated.
: <<DEBUG_NO_EXEC
DEBUG_NO_EXEC
