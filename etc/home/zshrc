# -*- mode: shell-script; compile-command: (concat "zcompile '" buffer-file-name "'"); outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..." -*-

# This script is run by interactive shells

# 1) All:         /etc/zshenv,       $ZDOTDIR/.zshenv
# 2) Login:       /etc/zprofile,     $ZDOTDIR/.zprofile
# 3) Interactive: /etc/zshrc,        $ZDOTDIR/.zshrc
# 4) Login:       /etc/zlogin,       $ZDOTDIR/.zlogin
# ...
# 5) Login:       $ZDOTDIR/.zlogout, /etc/zlogout

log=:
#log=echo
$log '*** In .zshrc'

interactive=true

# ======== Zsh Compinstall
if [ -z "$ifZsh" ]; then
    zstyle ':completion:*' expand prefix suffix
    zstyle ':completion:*' file-sort name
    zstyle ':completion:*' group-name ''
    zstyle ':completion:*' ignore-parents parent ..
    zstyle ':completion:*' list-colors ''
    zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
    zstyle ':completion:*' menu select=0
    zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
    zstyle ':completion:*' squeeze-slashes true
    zstyle ':zftp:' titlebar true
    zstyle ':completion:*' verbose true
    zstyle  :compinstall filename "$HOME/etc/rc/$HOST.zsh"

    fpath=(~/etc/zshcompletion $fpath)

    autoload -U compinit
    autoload zed                  && alias fned='zed -f'
    unalias  run-help 2>/dev/null && autoload run-help
    autoload -U compinit
fi


# ======== Shell Options

# limit coredumpsize 0

if [ -z "$ifZsh" ]; then
    unsetopt \
        beep \
        clobber \
        flow_control \
        hup \
        notify \
        print_exit_value \
        rm_star_silent

    setopt \
        auto_list \
        auto_menu \
        auto_param_slash \
        auto_pushd \
        auto_remove_slash \
        bang_hist \
        correct \
        extended_history \
        function_argzero \
        hash_cmds \
        hash_dirs \
        hist_find_no_dups \
        hist_ignore_dups \
        hist_ignore_space \
        hist_no_functions \
        hist_reduce_blanks \
        ignore_eof \
        inc_append_history \
        pushd_silent \
        pushd_to_home \
        share_history
fi

function @#() {
    printf "\e[48;5;21m\n--- $*\e[0m\n"
}

frotz () {
    pushd ~/private/sync/int-fic
    local stories=".*/${1:-.*}\\.\\(dat\\|z5\\)\$"
    if [ "$*" = "" ]; then
        # if no args, show all game files
        find -regex $stories -print | sed 's/^\.\///; s/\.\(dat\|z5\)$//'
    else
        # otherwise run the one requested
        local story=`find -maxdepth 1 -regex $stories -print -quit`
        command frotz $story
    fi
    popd
}


man() {
    export LESS_TERMCAP_mb=$(tput bold; tput setaf 2) # green
    export LESS_TERMCAP_md=$(tput bold; tput setaf 6) # cyan
    export LESS_TERMCAP_me=$(tput sgr0)
    export LESS_TERMCAP_mh=$(tput dim)
    export LESS_TERMCAP_mr=$(tput rev)
    export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
    export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) # yellow on blue
    export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
    export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) # white
    export LESS_TERMCAP_ZN=$(tput ssubm)
    export LESS_TERMCAP_ZO=$(tput ssupm)
    export LESS_TERMCAP_ZV=$(tput rsubm)
    export LESS_TERMCAP_ZW=$(tput rsupm)
    export PAGER="${commands[less]:-$PAGER}"
    export _NROFF_U=1
#    PATH="$HOME/bin:$PATH"
	 command man "$@"
}

setfont () {
    local name
    case $1 in
        unreadable)
            name=nil2
            ;;
        tiny)
            name=5x7
            ;;
        small)
            name=6x10
            ;;
        medium)
            name=7x13
            ;;
        large)
            name=9x15
            ;;
        huge)
            name=10x20
            ;;
        *)
            name=$1
            ;;
    esac
    echo "]50;$name"
}

setScreenTitle () {
    echo -n "\ek$*\e\\"
}

splitFlac() {
    local cue=$1
    local flac=$2
    if [ "${2##*.}" = "cue" ]; then
        cue=$2
        flac=$1
    fi
    echo "    CUE  = $cue"
    echo "    FLAC = $flac"
    shnsplit -f $cue -t %n-%t -o flac $flac
}

wedit () {
    local cmd file x
    for x in $*
    do
        file=$(which $x) && cmd="${cmd:-edit} $file" || echo $file
    done
    eval $cmd
}

# ======== Dir Functions

# basename () {
#     echo ${(F)@:t}
# }
# dirname  () {
#     echo ${(F)@:h}
# }


if [ "$USER" != "pschaaf" ]; then
    alias  emacs='emacs --user pschaaf'
    alias xemacs='xemacs --user pschaaf'
fi

alias exp=dolphin
alias pd=popd

# Use Emacs key bindings
bindkey -e

# ======== Function Keys

# Here's what we'd like to accomplish:
#    __PRESS__  __TO__
#    F6         cut
#    F7         copy
#    F8         paste
#    F9         search
#    F12        exit

# if [ -z "$ifZsh" ]; then
    bindkey -s "[0d" "popd\n"
    bindkey -s "[Z" "popd\n"
    bindkey "[17~" kill-whole-line
    bindkey "[18~" copy-region-as-kill
    bindkey "[19~" yank
    bindkey "[20~" history-incremental-search-backward

    if [ -z "$inScreen" ]; then
        bindkey -s "[21~" "exit\n"
    fi
# else
#     bind '"\e[17~": kill-whole-line'
#     bind '"\e[18~": copy-region-as-kill'
#     bind '"\e[19~": yank'
# #    bind '"\e[20~": history-incremental-search-backward'
# fi

# ======== Other Extra Keys

# Here's what we'd like to accomplish:

#   __PRESS __  __TO__
#   ctrl_left   backward-word
#   ctrl_right  forward-word

#   home        beginning-of-line
#   end         end-of-line

#   ctrl_delete backward-kill-word
#   delete      delete-char

#set -x
if [ -z "$ifZsh" ]; then
    bindkey "\033[3~" delete-char

    # echo; (bindkey | grep 'backward-delete-char'; echo; bindkey | grep 'backward-kill-word') | sed 's/" /"\t/g'

    bindkey "\M-C\M-5" up-case-word
    bindkey "\M-C\M-," down-case-word

    case ${TERM} in
        cygwin*)
            bindkey "\033H"     backward-delete-char
            bindkey "\033?"     backward-kill-word
            bindkey "\033[1;5D" backward-word
            bindkey "\033[1~"   beginning-of-line
            bindkey "\033[4~"   end-of-line
            bindkey "\033[1;5C" forward-word
            bindkey "\033[3;5~" kill-word
            ;;
        rxvt*)
            bindkey "^H"        backward-delete-char
            bindkey "\033Od"    backward-word
            bindkey "\033[7~"   beginning-of-line
            bindkey "\033[3~"   delete-char-or-list
            bindkey "\033[8~"   end-of-line
            bindkey "\033Oc"    forward-word
            bindkey "\033[3;5~" kill-word

            bindkey "\033?"     backward-kill-word
            bindkey "\033[1;5D" backward-word
            bindkey "\033[1~"   beginning-of-line
            bindkey "\033[4~"   end-of-line
            bindkey "\033[1;5C" forward-word
            bindkey "\033[3;5~" kill-word
            ;;
        xterm*)
            bindkey "^?"        backward-delete-char
            bindkey "^H"        backward-kill-word
            bindkey "\033[1;5D" backward-word
            bindkey "\033[H"    beginning-of-line
            bindkey "\033[1~"   beginning-of-line
            bindkey "\033[3~"   delete-char-or-list
            bindkey "\033[4~"   end-of-line
            bindkey "\033[F"    end-of-line
            bindkey "\033[1;5C" forward-word
            bindkey "\033[3;5~" kill-word
            ;;
        *)
            echo Unknown terminal type: $TERM
            ;;
    esac

elif [ -z $ifMinGW ]; then
    bind    '"\C-?"   backward-kill-word'
fi

# ======== Macro Keys
# C-? prepends 'whence' to command line
bindkey -s ""^_"" "\C-apath \C-e\C-m"
#     if [ -z "$CONNECTION" ]; then
#         #bindkey -r "\C-h" 	# remove binding
#         #bindkey "\C-h\C-k" describe-key-briefly	#
#     fi


updateManpath () {
    appendManpath `echo $PATH | awk '/\/bin$/ {gsub(/\/bin$/, "/man"); print}' RS=':'`
}


export OLD_PS1=${PS1/\\n$ */}

CONNECTION_END=' '
case $CONNECTION in
    ssh)
        export CONNECTION_COLOR='[33;1m'
        ;;
    tlnt)
        export CONNECTION_COLOR='[31;1m'
        ;;
    sudo)
        export CONNECTION_COLOR='[35;1;40m'
        ;;
    tlnt)
        export CONNECTION_COLOR='[31;1m'
        ;;
    *)
        unset CONNECTION_END
        ;;
esac

rootColorString='[37;1;41m'

case $HOSTNAME:$UNAME in
    copernicus*)
        # bold green with underline
        hostColor='[4;92;40m'
        ;;
    *:AIX*)
        # blue
        hostColor='[34;40m'
        ;;
    *:CYGWIN*)
        # white on green
        hostColor='[37;42m'
        ;;
    *:HPUX*)
        # cyan
        hostColor='[36;40m'
        ;;
    *:Linux*)
        # green
        hostColor='[32;40m'
        ;;
    *:SunOS*)
        # yellow
        hostColor='[33;40m'
        ;;
    *:Windows*)
        # white bold on blue
        hostColor='[37;1;44m'
        ;;
    *:UNKN*|*)
        # magenta
        hostColor='[35;40m'
        ;;
esac

source /home/pschaaf/etc/rc/git_zshrc.sh

#ZSH_THEME_GIT_PROMPT_PREFIX="%{\e[38;5;245m%}᚛➝ " # feather mark plus arrow
#ZSH_THEME_GIT_PROMPT_PREFIX="%{\e[38;5;245m%}[7m▶" # pennant style
ZSH_THEME_GIT_PROMPT_BRANCH="%{\e[38;5;99m%}"
ZSH_THEME_GIT_PROMPT_SEPARATOR="%{\e[38;5;245m%}|"

ZSH_THEME_GIT_PROMPT_STAGED="%{\e[38;5;215m%}%{∘%G%}"
#ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$bg[red]%}%{✖%G%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{\e[38;5;45m%}%{+%G%}"
ZSH_THEME_GIT_PROMPT_BEHIND="%{\e[96m↓\e[0m%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{\e[96m↑\e[0m%G%}"
# ZSH_THEME_GIT_PROMPT_UNTRACKED="%{…%G%}"
#ZSH_THEME_GIT_PROMPT_SUFFIX="%{\e[38;5;245m%})"
# ZSH_THEME_GIT_PROMPT_CLEAN="%{$bg_bold[green]%}%{✔%G%}"

export dirs

updateDirs () {
    dirs="`builtin dirs -p |
       awk 'NR == 2 {printf(\"%s\", \"[0;38;5;243m\")}; {print}' ORS=' '`"
}

updateGuidewireVars () {
    source gwSetEnv &>> /dev/null
 }

updateGitVars () {
    # local oldStatus=$GIT_SUPER_STATUS
    GIT_SUPER_STATUS=`git_super_status`
    if [ -z "$GIT_SUPER_STATUS" ]; then
        unset GIT_STATUS
    # elif [ "$GIT_SUPER_STATUS" = "$oldStatus" ]; then
    #     # nothing has changed
    else
        GIT_STATUS="$GIT_SUPER_STATUS  `git config branch.$GIT_BRANCH.description`
"
    fi
}

alias fixprompt='updateGuidewireVars; updateGitVars'

function git () {
    command git $*
    echo "$*" | grep --quiet 'checkout\|--edit-description' && updateGuidewireVars && updateGitVars
}

autoload -U add-zsh-hook
add-zsh-hook chpwd  updateDirs
add-zsh-hook precmd updateGuidewireVars
add-zsh-hook precmd updateGitVars

PS1="%{[4;38;5;235m%}                                                                 %{[0m%}
%2(L.%L-.)%{[0m%}%T %{%(!.%{$rootColorString%}.%{$hostColor%})%}%n@%m%{[0m%}$HOSTMESSAGE %{[93m%}%62>\>>\$dirs%<<
%{[0m%}\$GIT_STATUS%{[36m%}%!%{[0m%} %{$CONNECTION_COLOR%}$CONNECTION%{[0m%}$CONNECTION_END$SCRIPTING_MSG%(!.#.$) "

PS2="(%{[35;1m%}%_%{[0m%}) %(!.#.$) "

pcd .
$ifZsh compinit

### START-Keychain ###
# Let  re-use ssh-agent and/or gpg-agent between logins
# /usr/bin/keychain $HOME/.ssh/id_rsa $HOME/.ssh/id_dsa
# source $HOME/.keychain/$HOSTNAME-sh
if [ $UID -gt 0 ]; then  # if I'm not root
    eval `keychain --eval --agents ssh ~/.ssh/id_rsa`
fi
### End-Keychain ###

# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself. Don't forget that any
# edits are lost if this file is re-generated.
: <<DEBUG_NO_EXEC
DEBUG_NO_EXEC
