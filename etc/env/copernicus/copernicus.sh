# -*- outline-regexp: "^[\t ]*#[\t ]+[^=]\\|^# +\\|^[\t ]*..." -*-

# ****** WARNING: This file is automatically generated. ****** 
# ******          Edits may be overwritten at any time! ****** 

# Built:	Wed Sep 22 22:19:13 PDT 2004
# By:  	pschaaf@copernicus
# For:
#    host     = copernicus   shell    = sh        
#    uname    = Linux        term     = xterm     

if [ -n "$PS1" ]; then
interactive=true
fi
prependToList () {
	local each var=$1; shift
for each
	do
			member $each $var || eval "$var=\"$each\${$var:+:\$$var}\""
		done
}

appendToList () {
	local each var=$1; shift
for each
	do
			member $each $var || eval "$var=\"\${$var:+\$$var:}$each\""
		done
}

_prependToList () {
	local each var=$1; shift
for each
	do
			eval "$var=\"$each\${$var:+:\$$var}\""
		done
}

_appendToList () {
	local each var=$1; shift
for each
	do
			eval "$var=\"\${$var:+\$$var:}$each\""
		done
}

prependToVar () {
	local var=$1; shift; eval "$var=$*\${$var}"
}

appendToVar () {
	local var=$1; shift; eval "$var=\${$var}$*"
}

HOSTNAME=copernicus; export HOSTNAME
echoVar () {
	
      local var
      for var
      do
        eval echo -E $var=\\\'\$$var\\\'
      done
}

member () {
	eval echo :"\$$2": | grep ":$1:" >&/dev/null
}

rmpath () {
	PATH=`echo :$PATH | sed "s~:$1~~; s~^:~~"`
}

setenv () {
	local _label=$1; shift; export $_label="$@"
}

exportDefault () {
	eval : \${$1:='$2'}; export $1
}

# set -x
# ======== umask
# This umask gives these access permissions:
# user=rwx, group=rx, others=rx
umask 22

# ======== Fix the Path
# echo a path without double slashes, or empty or relative paths
cleanpath () {
	echo :$PATH: | sed 's/:::*/:/g; s/:[^/][^:]*//g; s/^://; s/:$//'
}

# ======== Terminal Settings
if [ "$TERM" = "screen" ]; then
fi
if [ -n "$interactive" ]; then
: stty eol '^-' werase '^W' eol2 '^-' erase '^?' eof '^D' start '^Q' intr '^C' rprnt '^R' time '0' lnext '^V' stop '^S' quit '^\\' min '1' flush '^O' susp '^Z' kill '^U' 
fi
# ======== Colors
if [ -n "$interactive" ]; then
if [ "$TERM" != "emacs" ]; then
USE_COLOR=true; export USE_COLOR
fi
fi
# ======== Unalias
unalias l la ll ls lsd rm d s p rd 2>/dev/null
# ======== Default Settings
exportDefault USER $LOGNAME
exportDefault RUBYLIB $HOME/lib/ruby:$HOME/bin
TECHREF=$HOME/doc/TechRef; export TECHREF
# ======== Shell Options






ulimit -c 0


# ======== Completion, Hashing
if [ -n "$interactive" ]; then

FIGNORE=.class:.o:\~:.stackdump:dump.txt:nohup.out; export FIGNORE
fi
# ======== Zsh Compinstall
# ======== Cd, Dirs, Popd, Pushd
if [ -n "$interactive" ]; then
cd () {
	builtin cd $*; pushd -n $OLDPWD > /dev/null
}

popd () {
	builtin popd #{args} && chpwd
}

pushd () {
	# if target is a file, change to its location
         if [ -f $1 ]; then
           pushd $(dirname $1) > /dev/null
         else
           pushd $1 > /dev/null
         fi
         chpwd
}

fi
# ======== Shell History
if [ -n "$interactive" ]; then
fi
# ======== Aliases
if [ -n "$interactive" ]; then
any_alias () {
	local label=$1; shift; alias $label="$*"
}

alias basename='collect command\ basename'
alias bye='exit'
alias createdb='$VERSANT_ROOT/bin/createdb'
dirs () {
	builtin dirs ${*:--p}
}

alias dirname='collect command\ dirname'
alias df >& /dev/null || alias df='df -h -x supermount'
alias du >& /dev/null || alias du='du -h'
alias ECHO='echo'
alias EHCO='echo'
alias ehco='echo'
alias freshen='source ~/'
alias igrep='grep -i'
alias jpegthumb='jegscale 128 $*'

PAGER=less; export PAGER
alias pstree='pstree -G'
rlib () {
	links $@ $TECHREF/languages/ruby/stdlib/index.html
}

if [ "$UID" = "0" ]; then
alias rpm-update='urpmi --noclean --update --auto-select'
fi
alias rm='rm -i'
alias tree='tree --dirsfirst -ACF --ignore_backups --ignore_cvs'
alias which-command='path'
alias visudo='EDITOR=xemacs visudo'
fi
# ======== Clearcase Aliases
# ======== ls Aliases
LS_BIN=ls; export LS_BIN
alias l='$LS_BIN'
LS_COLORS="no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.btm=01;32:*.tar=01;31:*.tgz=01;31:*.tbz2=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lha=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:*.tiff=01;35"; export LS_COLORS
LA_FLAGS='-ACFHb --color=always'; export LA_FLAGS
LS_FLAGS='-BCFHb --color=always'; export LS_FLAGS
LL_FLAGS='-BCFHbhl --color=always'; export LL_FLAGS
alias la='ls -ACFHb --color=always'
alias ls='ls -BCFHb --color=always'
alias ll='ls -BCFHbhl --color=always'
alias lr='ls -R'
alias lla='la -l'
alias llt='ll -rt'
lld () {
	ll  $* | grep --color=never "/$\\|^$\\|^[^ ][^ ]*$"
}

lltt () {
	llt $* | grep "date +%b.%d"
}

lsd () {
	        for x in ${*:-.}
        do
            pushd $x
            ls -BCHbd --color=always */
	    popd
        done
}

lsda () {
	        for x in ${*:-.}
        do
            pushd $x
            ls -BCHabd --color=always */ .*/
	    popd
        done
}

alias lsad='lsda'
lsf () {
	local x
        for x in ${*:-*}
        do
          echo `file -N -F: -- $x`:`ls -d -- $x` | sed 's/^[^:]*: //'
        done | column -t -s ':'
}

# ======== Path Functions
if [ -n "$interactive" ]; then
classpath () {
	echo Examining \$CLASSPATH
	echo
	echoList $CLASSPATH $*
}

infopath () {
	echo Examining \$INFOPATH
	echo
	echoList $INFOPATH $*
}

libpath () {
	echo Examining \$\$LD_LIBRARY_PATH
	echo
	echoList $LD_LIBRARY_PATH $*
}

manpath () {
	echo Examining \$MANPATH
	echo
	echoList ${MANPATH:-`man -w`} $*
}

path () {
	local regex="${*// /\|}"
                            whence $* | 
                              sed '/^$\|^\/\|not found$/d; s:^\('$regex'\):[1;40;33m\1[0;0m:g' | pr -rto 2
	echo
	echoList $PATH $*
}

fi
appendLibpath () {
	appendToList LD_LIBRARY_PATH $*
}

prependLibpath () {
	prependToList LD_LIBRARY_PATH $*
}

appendManpath () {
	appendToList MANPATH $*
}

prependManpath () {
	prependToList MANPATH $*
}

appendPath () {
	appendToList PATH $*
}

prependPath () {
	prependToList PATH $*
}

appendClasspath () {
	appendToList CLASSPATH $*
}

prependClasspath () {
	prependToList CLASSPATH $*
}

if [ -n "$interactive" ]; then
rubylib () {
	echo Examining \$RUBYLIB
	echo
	echoList `ruby -e "print $:.join(':'); %w($*).each {|e| print %Q< #{e} #{e}.rb>}"`
 
}

fi
appendRubyLib () {
	appendToList RUBYLIB $*
}

prependRubyLib () {
	prependToList RUBYLIB $*
}

updateManpath () {
	appendManpath `echo $PATH | awk '/\/bin$/ {gsub(/\/bin$/, "/man"); print}' RS=':'`
}

# ======== Functions
cdl () {
	cd $*; ls
}

clean_gutenberg () {
	ruby -e "File.read(%q-$1-).instance_eval {
    gsub!(/\r/,             %q--);
    gsub!(/(\S)\n(\S)/,     %q-\1 \2-);
    gsub!(/(\n)(\S)/,       %q-\1 \2-);
    gsub!(/^\t(chapter )/i, %q-\1-);
    puts self;
  }"
}

cleanusr () {
	su -l cleanusr
}

collect () {
	local cmd x
cmd=$1; shift
for x
do
eval $cmd $x
done
}

ctset () {
	source ~/bin/ctset
}

cvs-commit () {
	
    echo
    TRAPEXIT () {
      popd
    }
    pushd $HOME
    [ -x bin/color-cvs-output.rb ] || alias color-cvs-output='cat'
    for x in `find $HOME -type d ! -regex ".*/\(courses\|sections\|cvsroot\|etc\).*" -name CVS -maxdepth 2 -printf '%h '` $HOME/etc
    do
      echo "[1;33m"\=============== $x"[0m"
      pushd $x
      cvs -q commit        $*;       make 2>&1 | color-cvs-output.rb
      popd
    done
}

cvs-diff () {
	
    echo
    TRAPEXIT () {
      popd
    }
    pushd $HOME
    [ -x bin/color-cvs-output.rb ] || alias color-cvs-output='cat'
    for x in `find $HOME -type d ! -regex ".*/\(courses\|sections\|cvsroot\|etc\).*" -name CVS -maxdepth 2 -printf '%h '` $HOME/etc
    do
      echo "[1;33m"\=============== $x"[0m"
      pushd $x
      cvs -q diff   -R     $*; echo            | color-cvs-output.rb
      popd
    done
}

cvs-update () {
	
    echo
    TRAPEXIT () {
      popd
    }
    pushd $HOME
    [ -x bin/color-cvs-output.rb ] || alias color-cvs-output='cat'
    for x in `find $HOME -type d ! -regex ".*/\(courses\|sections\|cvsroot\|etc\).*" -name CVS -maxdepth 2 -printf '%h '` $HOME/etc
    do
      echo "[1;33m"\=============== $x"[0m"
      pushd $x
      cvs -q update -d -kb $*; echo; make 2>&1 | color-cvs-output.rb
      popd
    done
}

ddu () {
	find ${*:-.} -type d -maxdepth 1 -exec du -hs {} \; | sort -n
}

echoList () {
	    local list=$1
    shift
    echo $list | sed 's,\(^\|:\)'$HOME',\1~,g' | awk '
    NR == 1 {split(file, files, " ")}

    function output(string) {outstr = outstr string}

    {
      output(sprintf(" %2d ", NR))

      for (idx in files) {
        fullname = " " $1 "/" files[idx]
        if (! system("test -f" fullname)) {
          output("*")
          matches = matches fullname
          break
        }
      }

      output($0 "\n")
    }
    END {
      system("echo \"" outstr "\"|column")
      if (matches) {
        print "\n" cmd matches "\n"
        system("for x in" matches "\ndo\n" cmd " $x\ndone")
      }
    }' RS=: file="$*" cmd="ls $LL_FLAGS" | sed 's/ \*\([^ 	]*\)/[1;33m \1[0m/g'
}

edit () {
	(gnuclient -f 'raise-frame' -q $* 2>/dev/null || xemacs $*) &
}

frotz () {
	pushd ~/local/games/int-fic; command frotz $* && popd
}

jpegscale () {
	boundary=$1; shift
  for file in $*
  do
    jpegtopnm $file | pnmscale -xysize $boundary $boundary | pnmtojpeg >| ${file/./_$boundary.}
  done
}



palm () {
	 ruby -I\"$RUBYLIB\" bin/palm $*
}


# Save script args in variable to allow access inside script
script () {
	SCRIPT_ARGS="script $*" command script $*
}

setfont () {
	local name
        case $1
        in
          unreadable)
             name=nil2
             ;;
          tiny)
             name=5x7
             ;;
          small)
             name=6x10
             ;;
          medium)
             name=7x13
             ;;
          large)
             name=9x15
             ;;
          huge)
             name=10x20
             ;;
          *)
             name=$1
             ;;
        esac
        echo "]50;$name"
}

signals () {
	echo "   \$signals="; echo $signals | tr " " "
" | cat -n | awk ' {print "    ", $1-1, $2}'  | column
}

smspaul () {
	sendSMS.pl -r 4086444762 -p TMOBILE -s $EMAIL
}

smsvic () {
	sendSMS.pl -r 4086444769 -p TMOBILE -s $EMAIL
}

syncdir () {
	make ${1:+-C $1} -ef ~/etc/makefiles/syncdir.make
}

wcat () {
	cat $(which $*)
}

wcd () {
	cd $(which $1)
}

wedit () {
	local cmd file x
         for x in $*
         do
           file=$(which $x) && cmd="${cmd:-edit} $file" || echo $file
         done
       eval $cmd
}

whence () {
	type $*
}

wless () {
	$PAGER `which $*` 2>/dev/null || echo ${args} not found
}

if [ "$UID" = "0" ]; then
emacs () {
	command emacs -r -u pschaaf $*
}

fi
if [ "$UID" = "0" ]; then
xemacs () {
	command xemacs -xrm 'Emacs*menubar*Foreground: white' -xrm 'Emacs*menubar*Background: red3' -u pschaaf $*
}

fi
vicdo () {
	eval sudo /bin/su -l vschaaf -- --restricted ${*:+-c "'$*'"}
}

# ======== ssh
vftp () {
	ssh -Cqt ftp exec gnu/zsh ${*:--l}
}

alias intra='ssh -Cq intra'
RSYNC_RSH=ssh; export RSYNC_RSH
# ======== Remote sessions
if [ -n "$SSH_TTY" ]; then
CONNECTION_COLOR='[1;33m'; export CONNECTION_COLOR
CONNECTION=ssh; export CONNECTION
elif [ -n "$REMOTEHOST" ]; then
CONNECTION_COLOR='[1;31m'; export CONNECTION_COLOR
CONNECTION=tlnt; export CONNECTION
elif [ -n "$SUDO_USER" ]; then
SUDO_COLOR='[43;30m'; export SUDO_COLOR
CONNECTION=sudo; export CONNECTION
elif [ -n "$REMOTEUSER" ]; then
CONNECTION_COLOR='[1;31m'; export CONNECTION_COLOR
CONNECTION=tlnt; export CONNECTION
fi
if [ -n "$CONNECTION" ]; then
CONNECTION_END=' '
fi
# ======== Environment and Shell Variables
exportDefault ANT_HOME /usr/local/ant
BROWSER=mozclient; export BROWSER
CLHSROOT=file:///usr/local/doc/TechRef/languages/lisp/HyperSpec/; export CLHSROOT
export COLUMNS
if [ -n "$CLEARCASE_ROOT" ]; then
CTVIEW=`$HOME/bin/getCTView`; export CTVIEW
if [ -n "$CTVIEW" ]; then
CTVIEW="
[1;35m$CTVIEW[0m"
fi
expr "`oscp -v`" \< "6" > /dev/null && any_alias makedb "makedb -g"
fi

CVSEDITOR=gnuclient; export CVSEDITOR
CVS_COPERNICUS=:pserver:${USER}@COPERNICUS:${HOME}/cvsroot; export CVS_COPERNICUS
CVS_LAPTOP=:pserver:${USER}@:/e//MyDocuments\\\cvsroot; export CVS_LAPTOP
CVS_SOURCEFORGE=:pserver:anonymous@cvs.sourceforge.net:/cvsroot; export CVS_SOURCEFORGE
CVSIGNORE='.class .o \~ .stackdump dump.txt nohup.out'; export CVSIGNORE
CVSROOT=$CVS_LAPTOP; export CVSROOT
EDITOR=gnuclient; export EDITOR
case $USER
in
  vschaaf)
    export EMAIL=designer007@excite.com
    ;;
  pschaaf)
    export EMAIL=paul_schaaf@yahoo.com
    ;;
  root)
    export EMAIL=paul_schaaf@yahoo.com
    ;;
esac
if [ "$USER" = "pschaaf" ]; then
ESHELL=`$HOME/bin/pref_shell`; export ESHELL
else
ESHELL=$SHELL; export ESHELL
fi
EXIT=exit
FCEDIT=gnuclient; export FCEDIT
GREP_COLOR="[1;33"; export GREP_COLOR
GREP_OPTIONS=--color; export GREP_OPTIONS
JAVA_HOME=/usr/java/current; export JAVA_HOME
LESS=' --RAW-CONTROL-CHARS --hilite-unread --ignore-case --jump-target=2 --no-init --quit-at-eof --quit-if-one-screen --status-column -Ps%dt/%D ?f%f::STDIN:$'; export LESS
LIBPATH_NAME=LD_LIBRARY_PATH; export LIBPATH_NAME
OFFICE_DRIVE=C:; export OFFICE_DRIVE
OFFICE_PATH="Program Files//Microsoft Office//Office"; export OFFICE_PATH
PDA_ROOT=:palm; export PDA_ROOT
PDA_INSTALL_DIR=$PDA_ROOT/Install; export PDA_INSTALL_DIR
PLUCKERHOME=$HOME/local/sync/software/man.html; export PLUCKERHOME
exportDefault SCREENDIR $HOME/tmp
if [ -n "$SCRIPT_ARGS" ]; then
SCRIPTING_MSG='[cc] '; export SCRIPTING_MSG
fi
SHELL=sh; export SHELL
UNAME=Linux; export UNAME
if [ -n "$EDITOR" ]; then
VISUAL=$EDITOR; export VISUAL
fi
VERSANT_ROOT=/usr/local/versant/vds605; export VERSANT_ROOT
# ======== Printers
PRINTER=lj1100; export PRINTER
MOZ_PRINTER_NAME=$PRINTER; export MOZ_PRINTER_NAME
# ======== Cygwin Path
# ======== Function Keys
: '"[17~":kill-whole-line'	# F6 cut
: '"[18~":copy-region-as-kill'	# F7 copy
: '"[19~":yank'	# F8 paste
: '"[20~":history-incremental-search-backward'	# F9 search
if [ -z "$inScreen" ]; then
: -x '"[24~":"exit\n"'	# F12 exit
fi
# ======== Cursor Keys
: '"[1;5D":backward-word'	# ctrl_left
: '"[1;5C":forward-word'	# ctrl_right
# ======== Other Extra Keys
: '"[3~":delete-char'	# delete
: '"[4~":end-of-line'	# end
: '"[1~":beginning-of-line'	# home



# ======== Macro Keys
: -s '""^_"":"\C-apath \C-e\C-m"'	# C-? prepends 'whence' to command line
# ======== Lesskey
LESSKEY=/home/pschaaf/.less_copernicus; export LESSKEY
# ======== Classpath
appendClasspath $ANT_HOME/lib/ant.jar
# ======== Path
prependPath /bin /usr/bin /usr/local/bin /usr/X11R6/bin
appendPath /sbin /usr/sbin /usr/local/sbin $JAVA_HOME/bin $HOME/bin /opt/cxoffice/bin
if [ -n "$VERSANT_ROOT" ]; then
appendPath $HOME/bin/vsnt $VERSANT_ROOT/bin
exportDefault VERSANT_DB `dirname $VERSANT_ROOT`/db
exportDefault VERSANT_DBID $VERSANT_DB
exportDefault VERSANT_DBID_NODE copernicus
fi
appendPath /opt/bin /opt/$USER/firefox /opt/$USER/thunderbird /opt/cxoffice/bin
# ======== Library Path
appendLibpath /lib /usr/lib $HOME/lib
appendRubyLib $HOME/lib/ruby $HOME/bin
# ======== Prompt
if [ -n "$interactive" ]; then
case $TERM
in
emacs)
	


;;
*)
	


;;
esac

chpwd
fi
# ======== Cygwin
# ======== Manpath

# Move this heredoc around in the file to temporarily disable sections
# of code. Make sure to keep the opening tag first, and the closing tag
# against the left margin on a line by itself. Don't forget that any
# edits are lost if this file is re-generated.
# : <<DEBUG_NO_EXEC
# DEBUG_NO_EXEC
# 

# Used packages: 
#	ant		column		cvs		cxoffice	emacs
#	gnuclient	grep_color	grep_gnu	info		java_sdk
#	less		ls_color	ls_gnu		msoffice	ruby
#	screen		sms		ssh		suroot		tree
#	versant		vi		vim		x_contrib	xemacs
