#!/bin/zsh

run_color=${run_color:-'48;5;21'}
pass_color=${pass_color:-'48;5;34'}
fail_color=${fail_color:-'48;5;196'}
warn_color=${warn_color:-'48;5;228'}

# Command-line Switches
while [ -n "$*" ]; do
  case $1 in
    --delay)
      shift
      delay=$1
      ;;
    --dry-run)
      _dry_run='echo '
      ;;
    --nice)
      nice='nice '
      ;;
    --no-scan)
      no_scan=true
      ;;
    --old)
      old=true
      ;;
    --trace)
      set -x
      ;;
    --wc)
      outputFilter=wc
      ;;
    --*)
      echo Unknown option $1
      return 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Set up environment
source $HOME/bin/gwSetEnv ${old:+old}

if [ -z "$GW_PL_NUM" ]; then
  printf '\e[1;48;5;196mCould not determine Guidewire platform version!\e[0m' >&2
  return 1
fi

if [ "${GW_START_DIR//'~'/$HOME}" != "$PWD" ]; then
  eval cd ${GW_START_DIR}
  echo
  echo Running in ${PWD}
fi

apd_dirs=(
  app-cc/cc-apd-genlob-content/build
  app-cc/cc-apd-genlob-content/config
  app-cc/cc-apd-genlob-content/generated
  app-cc/cc-apd-genlob-content/generated_classes
  app-cc/cc-apd-genlob-content/gsrc
  app-cc/cc-apd-genlob-content/gtest/gw/smoketest/apd
  app-cc/cc-apd-genlob-content/src
  app-cc/cc-test-apd/build
  app-cc/cc-test-apd/config
  app-cc/cc-test-apd/generated
  app-cc/cc-test-apd/generated_classes
  app-cc/cc-test-apd/gsrc
  app-cc/cc-test-apd/gtest/gw
)
dbbackup=h2database
#failIcon=/usr/share/icons/oxygen/base/48x48/actions/process-stop.png
failIcon=/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns
jvmProcess="java .*-Dgw.port=${GW_PORT_DEBUG}.* com.guidewire"
passIcon=/gw-dev/icons/$(echo $GW_APPCODE | sed 's/.*/\U\0/')_favicon.ico
resourcesDir=${GW_START_DIR/\~/$HOME}/app-cc/cc-run/build/idea/webapp/resources
ssh_socket=~/tmp/cc-fwd-socket
webserverPort=$((GW_PORT_DEBUG + 1))

webserver="ruby -run -ehttpd ${resourcesDir} -p${webserverPort}"

# Printing and Grep Functions
echoVar() {
  typeset -p $* | sed 's/^declare\( -x\)* / /'
  echo
}

setGnuScreenTitle() {
  #    echo -n "\ek${GW_TITLE} ${*}\e\\"
  #	echo 'GW_TITLE='${GW_TITLE}
  #	echo '*='${*}
  #	echo Setting screen title to \"${GW_TITLE} ${*}\"

  printf '\e]1;%s\a' ${GW_TITLE} ${*}
}

log_section() {
  local _color=$1
  local _status=$2
  local _taskDesc=$3

  local _status=" $(date '+%R') - ${_status} "

  # indent, then draw an underline the length of the status message
  printf "\n  \e[4;38;5;243m%-${#_status}s\n" ' '

  # indent with ul, turn ul off, bold & color on, show status, fill remainder with ul
  printf "  \e[0;1;97;${_color}m%-s\e[0;4;38;5;243m%*s\n" ${_status} $(($COLUMNS - ${#_status} - 2))

  # turn off bold and show the task description
  printf "\e[0;97;${_color}m%-${COLUMNS}s\e[0m\n" ' '$_taskDesc
}

grepProcStr() {
  echo "pgrep -af -- '$1'"
}

killProcStr() {
  echo $(grepProcStr "$1")" && pkill -KILL -f -- '$1'"
}

notify() {
  title="$1"
  shift
  inLinux && notify-send -c ${title} -t 5000 ${successIcon:+-i} $successIcon "${*}"
  #  inMacOS && terminal-notifier -title idea -activate com.apple.Terminal -message $*
  inMacOS && notify-send "${*}" ${title}
  set +x
}

# Run the Actual Task
runTask() {
  local userTask=$1
  local task=${nice}$2
  local taskSummary='$ '${task% | sed*} # remove any 'sed' commands from the display
  local successIcon=$3
  local failIcon=$4
  #  local whichJava="pwd:  $(pwd)\njava: $(which java)\n\n$(java -version 2>&1)"

  [ -n "${delay}" ] && echo "\nDelay for $delay" && sleep $delay

  #    echo; typeset -p taskSummary
  setGnuScreenTitle ${taskSummary#./gwb }

  log_section ${run_color} "START '$userTask'" ${taskSummary}

  exitCode=0
  SECONDS=0
  if [ -z $_dry_run ]; then
    if [ -n "$spawn" ]; then
      eval nohup ${task} &
    else
      # make sure we source the gwb script instead of just running it
      task=${task/.\/gwb/source gwb}
      [ -n "$debug" ] && echo actual task is ${task}
      # if it's a Java cmd, display each option indented on a separate line
      eval ${task} | sed '/java / { s/ -/\n   -/g
            }'
      # keep the exit code from the first command in the chain (i.e. not the sed)
      exitCode=${pipestatus[1]}
    fi
  fi
  # tries to display the elapsed seconds as something like 0:00.00.
  elapsedTime=$(date -u -d @${SECONDS} +"in %T")

  if [ $exitCode -eq 0 ]; then
    log_section ${pass_color} "DONE '$userTask' $elapsedTime" $taskSummary
    if [ -z "$noNotifySuccess" ]; then
      notify "Completed $GW_TITLE: $userTask" ${taskSummary}
    else
      unset noNotifySuccess
    fi
  else
    if [ $exitCode -gt 1 ]; then
      exitStr="---with exit code $exitCode"
    fi
    log_section ${fail_color} "FAIL '$userTask' $elapsedTime$exitStr" $taskSummary
    notify "Failed($exitCode) $GW_TITLE: $userTask" ${taskSummary} ${failIcon:+-appIcon} "$failIcon"
  fi

  setGnuScreenTitle
}

[ -n "$debug" ] && set -x

#${_dry_run} konsoleprofile colors=$GW_APPCODE\;icon=${passIcon}\;tabTitle=$GW_TITLE

# Process arguments
while [ -n "$*" ]; do
  task=$1
  
  jvmArgs=(
    -Dgw.${GW_APPCODE}.env=h2mem
    -Dgw.tests.skip.knownbreak=true
    -Djava.awt.headless=true
    -Dgw.webapp.dir=idea/webapp
    -Dgw.classpath.jar=true
    -Dgw.plugins.gclasses.dir=idea-gclasses
    -DgosuInit.supportDiscretePackages=true
    -Dfile.encoding=UTF-8
  )

  javaArgs=(
    -ea
  )
#    -ideVersion5
#    -junit4
#  )

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [[ ${task} =~ "Quiet$" ]]; then
    notify=quiet
    task=${task%Quiet}
  elif [[ ${task} =~ "Loud$" ]]; then
    notify=loud
    task=${task%Loud}
  fi

  fullTask="$GW_START_SCRIPT $task"
  taskFailIcon=
  taskPassIcon=
  case $task in
    apibreaktest)
      javaArgs+=(
        -Xms7500m
        -Xmx9500m
      )
      jvmArgs+=(
        -DapiBreakTest.fix=true
        -Dcom.guidewire.apidiff.apidump.APIDumpRepositoryLocal.PATH_PROPERTY=${HOME}/gw/dumps
        -DapiBreakTest.dump.dir=$HOME/gw/dumps
      )
      ideaTmp=/private/var/folders/r_/sk1r8x993qd8jb8v_dc42dnh0000gq/T
#      javaArgs+=(
#        @${ideaTmp}/idea_arg_file57507065
#        @w@${ideaTmp}/idea_working_dirs_junit.tmp
#        @${ideaTmp}/idea_junit.tmp
#      )
      # todo pschaaf: set up CLASSPATH for cc-test
      isAppModules=(
        ${GW_APPCODE}-test
        ${GW_APPCODE}-all
        ${GW_APPCODE}-custbuild-test
        ${GW_APPCODE}-behavior-test
        ${GW_APPCODE}-gunit-behavior
        ${GW_APPCODE}-gunit-pcf
        ${GW_APPCODE}-gunit-content
        ${GW_APPCODE}-content
        ${GW_APPCODE}
        ${GW_APPCODE}-pl-archiving
        ${GW_APPCODE}-pl
        ${GW_APPCODE}-pl-bizrules
        ${GW_APPCODE}-pl-events
        ${GW_APPCODE}-pl-gwhub-auth
        ${GW_APPCODE}-pl-heatmap
        ${GW_APPCODE}-pl-personaldata
        ${GW_APPCODE}-pl-properties
        ${GW_APPCODE}-pl-inbound-file
        ${GW_APPCODE}-pl-outbound-file
        ${GW_APPCODE}-cmd-common
        ${GW_APPCODE}-pl-solr
        ${GW_APPCODE}-pl-rest-core
        ${GW_APPCODE}-plugin
        ${GW_APPCODE}-pl-bizrules-content
        ${GW_APPCODE}-pl-content
        ${GW_APPCODE}-pl-events-content
        ${GW_APPCODE}-pl-gwhub-auth-content
        ${GW_APPCODE}-pl-personaldata-content
        ${GW_APPCODE}-pl-inbound-file-content
        ${GW_APPCODE}-pl-properties-content
        ${GW_APPCODE}-pl-outbound-file-content
        ${GW_APPCODE}-gunit
        ${GW_APPCODE}-tools
        ${GW_APPCODE}-apd-test-templates
        ${GW_APPCODE}-pl-bizrules-test
        ${GW_APPCODE}-pl-test
      )
      moduleClassDirs=:${(j_/build/idea/classes:_)isAppModules}
      CLASSPATH+=${moduleClassDirs//:/:${PWD}/app-${GW_APPCODE}/} # prepend e.g. "./app-cc/" to each component
      export CLASSPATH
      echoVar CLASSPATH
      class="com.intellij.rt.junit.JUnitStarter com.guidewire.cc.apidiff.APIBreakTest"

      fullTask="java ${javaArgs} ${jvmArgs} ${class}"
      ;;
    backupDb)
      dbName=$(date "+${dbbackup}_%H:%M:%S")
      fullTask="7za a ${dbName} $GW_DB_DIR; 7z l ${dbName}.7z"
      ;;
    cleanIdea)
      taskFailIcon=$failIcon
      ;;
    cleanNuke)
      if read -q "n?Really nuke everything? [yN] "; then
        fullTask='./gwb clean -dxf'
      fi
      ;;
    cleanStudio)
      if [ $GW_PL_NUM -lt 9 ]; then
        fullTask="rm -rf app-cc/cc-studio-run/db"
      else
        fullTask=": this task only works on platform versions less than 9.; exit 1"
      fi
      ;;
    compile)
      fullTask='./gwb compile -DincludeGtest=true'
      ;;
    dropDb)
      if [ $GW_PL_NUM -lt 9 ]; then
        task=dropdb
      else
        task=dropDb
      fi
      taskFailIcon=$failIcon
      ;;
    fixgwb)
      # remove the erroneous spaces from the function defs in the OOB product gwb script
      fullTask="perl -pi.bak -e 's/^([_A-Za-z][_A-Za-z0-9]+) \( \)/\1()/g' gwb"
      ;;
    pgrepStudio)
      fullTask=$(grepProcStr "-Dstudio.sdkroot=${PWD}")
      taskFailIcon=$failIcon
      ;;
    h2)
      spawn=true
      fullTask="find .gradle -type f -regex '.*/h2-[0-9.]*\.jar' -print -quit | xargs java -jar"
      echo
      echo "There's no username or password. Make sure the connection string is correct!"
      ;;
    info)
      infoTasks=(
        "echoVar apiBreakTest_dump_dir apiBreakTest_localDumpPath"
      )
      fullTask=${(j:; :)infoTasks}
      ;;
    http)
      spawn=true
      noNotifySuccess=true
      fullTask=$webserver
      ;;
    httpkill)
      fullTask="pkill -f '$webserver'"
      ;;
    idea)
      if [ $GW_PL_NUM -lt 9 ]; then
        fullTask=${fullTask/idea/gen-ide}
      fi
      ;;
    ij)
      spawn=true
      fullTask="${IDEA_HOME}/bin/idea.sh"
      ;;
    killPort)
      export port=${2:=$GW_PORT}
      shift
      export process=$(lsof -i tcp:${port} -t)
      fullTask="[ -n ${process} ] && /bin/kill -9 ${process} 2> /dev/null && echo Killed || echo Port ${port} is not in use"
      ;;
    killStudio)
      fullTask=$(killProcStr "-Dstudio.sdkroot=${PWD}")
      taskFailIcon=$failIcon
      ;;
    lsApd)
      fullTask="find ${apd_dirs} -type f 2>/dev/null | xargs ls ${LS_FLAGS} -l --color"
      ;;
    pgrep)
      fullTask=$(grepProcStr ${jvmProcess})
      ;;
#    pkill)
#      pgrep -af $jvmProcess
#      fullTask=$(killProcStr ${jvmProcess})
#      ;;
#    pkill8080)
#      pgrep -af ${jvmProcess/90/80}
#      fullTask=$(killProcStr ${jvmProcess/90/80})
#      ;;
    pcf*)
      # extract host:port# argument, if none default to localhost:GW_PORT_DEBUG+1
      if [[ $task =~ 'pcf=' ]]; then
        pcfHost=${task##pcf=}
        pcfHost=${pcfHost##http://}
      else
        pcfHost=localhost:$webserverPort
      fi
      echoVar pcfHost

      if [ ${task} = "pcfs" ]; then
        report='/tmp'
      else
        report=$(/bin/ls -t /tmp/*.html | head -n 1)
      fi
      echoVar report

      noNotifySuccess=true
      fullTask="ruby -pi -e 'gsub(%r(http://[^:]+:(null|[0-9]+)/\w+/resources), %q(http://$pcfHost))' /tmp/*.html && ls -l $report && ${BROWSER} $report"
      ;;
    portCheck)
      fullTask="ssh -S $ssh_socket -O check pschaaf@localhost"
      ;;
    portClose)
      fullTask="ssh -S $ssh_socket -O exit pschaaf@localhost"
      ;;
    portOpen)
      spawn=true
      fullTask="exec ssh -M -S $ssh_socket -fnNT -L 8080:127.0.0.1:8090 pschaaf@localhost"
      ;;
    restoreDb)
      fullTask="7za x -aoa -o${GW_DB_DIR}/.. '$2'"
      shift
      #${dbbackup}.7z"
      ;;
    lsDb)
      noNotifySuccess=true
      fullTask="ls ${GW_DB_DIR}/*"
      ;;
    rmDb)
      fullTask="rm -fv ${GW_DB_DIR}/* && tree ${GW_DB_DIR}" #ls -BCFbhHGl ${GW_DB_DIR}"
      ;;
      #      runSuite)
      #        if (( ! $#* )); then
      #          echo "No suite specified!"
      #        fi
      #        fullTask="gwb compile -DincludeGtest=true; gwb runSuite -Dsuite=${1}"
      #        shift
      #        ;;
    studio)
      if [ $GW_PL_NUM -lt 9 ]; then
        spawn=true
      fi
      unset inScreen
      taskFailIcon=$failIcon
      inLinux && no_scan=true
      task="${no_scan:+--no-scan }${task}"
      ;;
    tasks)
      noNotifySuccess=true
      $GW_START_SCRIPT tasks | sed "s/^\([a-z].*\)\( - \)/[96m\1[0m\2/g" # colorize the output
      exit
      ;;
    testFail | testfail)
      fullTask="time && sleep 1 && exit ${2:-1}"
      shift
      ;;
    testPass | testpass)
      fullTask='time && sleep 1s && echo "done"'
      ;;
    wipeApd)
      echo
      potentialTask="rm -rfv ${apd_dirs}"
      if [[ $# -eq 1 ]]; then # is this the final argument?
        fullTask=$potentialTask
      else
        echo $potentialTask
        if read -q "yn?[30;${warn_color}mReally delete all APD content using the above command? [yN][0m "; then
          fullTask=$potentialTask
        else
          echo "\nAPD content not deleted."
          if (( $# )); then
            if read -q "n?[30;${warn_color}mContinue execution? [yN][0m "; then
              shift
              continue
            fi
            message="Ignored remaining arguments: [1m${*}[0m"
          fi
          log_section ${fail_color} "ABORTING Execution" ${message:=No remaining arguments}
          return
        fi
      fi
      ;;
    *)
      taskPassIcon=$passIcon
      taskFailIcon=$failIcon
      ;;
  esac
  shift

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [ "$notify" = "quiet" ]; then
    taskPassIcon=
    taskFailIcon=
  elif [ "$notify" = "loud" ]; then
    taskPassIcon=$passIcon
    taskFailIcon=$failIcon
  fi

  # grab any arguments
  while [[ "$1" =~ "-.*" ]]; do
    fullTask="${fullTask} $1"
    shift
  done

  fullTask="${fullTask}${outputFilter:+ | }${outputFilter}"
  runTask ${task} ${fullTask} ${taskPassIcon:-''} ${taskFailIcon:-''}
done
