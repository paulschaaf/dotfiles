#!/bin/zsh

#--no-build-cache # do not call the build cache

run_color=${run_color:-'48;5;21'}
pass_color=${pass_color:-'48;5;34'}
fail_color=${fail_color:-'48;5;196'}
warn_color=${warn_color:-'48;5;228'}
unset nice

# Command-line Switches. Add a # directly after the paren to include the switch in the generated zcompletion
while [ -n "$*" ]; do
  case $1 in
    --delay)# Sleep for the specified number of seconds (the default)
      shift
      delay=$1
      ;;
    --debug)#
      debug=true
      ;;
    --dry-run)# Print the commands that will be run, but to not run them
      # shellcheck disable=SC2034 # unused
      _dry_run='echo '
      ;;
    --nice)# Run the command with the specified niceness
      nice=true
      ;;
    --no-scan)
      no_scan=true
      ;;
    --old)
      old=true
      ;;
    --setx)# run "set -x" once this switch is parsed
      set -x
      ;;
    --wc)# Pipe the command output through wc
      outputFilter='wc'
      ;;
    --*)
      echo Unknown option $1
      return 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Set up environment
source $HOME/bin/gwSetEnv ${old:+old}

if ((! $#GW_PL_VERSION)); then
  printf '\e[1;48;5;196mCould not determine Guidewire platform version!\e[0m' >&2
  return 1
fi

#if [ "${GW_START_DIR//'~'/$HOME}" != "$PWD" ]; then
#  eval cd ${GW_START_DIR}
#  echo
#  echo Running in ${PWD}
#fi

apd_dirs=(
  app-cc/cc-apd-genlob-content/build
  app-cc/cc-apd-genlob-content/config
  app-cc/cc-apd-genlob-content/generated
  app-cc/cc-apd-genlob-content/generated_classes
  app-cc/cc-apd-genlob-content/gsrc
  app-cc/cc-apd-genlob-content/gtest/gw/smoketest/apd
  app-cc/cc-apd-genlob-content/src
  app-cc/cc-test-apd/build
  app-cc/cc-test-apd/config
  app-cc/cc-test-apd/generated
  app-cc/cc-test-apd/generated_classes
  app-cc/cc-test-apd/gsrc
  app-cc/cc-test-apd/gtest/gw
)
dbbackup=h2database
failIcon=/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns
jvmProcess="java .*-Dgw.port=${GW_PORT_DEBUG}.* com.guidewire"
passIcon=/gw-dev/icons/$(echo $GW_APPCODE | sed 's/.*/\U\0/')_favicon.ico
resourcesDir=${PWD/\~/$HOME}/app-cc/cc-run/build/idea/webapp/resources
ssh_socket=~/tmp/cc-fwd-socket
webserverPort=$((GW_PORT_DEBUG + 1))

webserver="ruby -run -ehttpd ${resourcesDir} -p${webserverPort}"

# Printing and Grep Functions
echoVar() {
  typeset -p $* | sed 's/^declare\( -x\)* / /'
  echo
}

autoload -Uz settitle

log_section() {
  local _color=$1
  local _status=$2
  local _taskDesc=$3

  local _status="$(date '+%R') - ${_status} "

  # turn bold and color on, show status
  printf "\n\e[97;${_color}m%-s\e[0;38;5;243m\n" ${_status}

  # turn off bold and show the task description
  printf "\e[0;97;${_color}m%-${COLUMNS}s\e[0m\n" $_taskDesc
}

debugPrint() {
  (($#debug)) || return
  print -P "%F{13}$*%f"
}

grepProcStr() {
  echo "pgrep -afl -- '$1' | grep -v pgrep"
}

killProcStr() {
  echo $(grepProcStr "$1")" && pkill -KILL -f -- '$1'"
}

notify() {
  subtitle="$1"
  shift
  alerter -group $PWD -title "$GW_TITLE" -subtitle "$subtitle" -message "${*}" >/dev/null &
  set +x
}

# Run the Actual Task
runTask() {
  local userTask=$1
  local task=$2
  (($#debug)) && typeset nice ignoreNice
  (($#ignoreNice == 0 && $#nice > 0)) && task='nice '${task}
  local taskSummary=${task% | sed*} # remove any 'sed' commands from the display
  (($#debug)) && typeset userTask task taskSummary
  local successIcon=$3
  local failIcon=$4
  debugPrint alpha
  debugPrint beta
  #  local whichJava="pwd:  $(pwd)\njava: $(which java)\n\n$(java -version 2>&1)"

  (($#delay > 0)) && echo "\nDelay for $delay" && sleep $delay

  #    echo; typeset -p taskSummary
  settitle ${GW_TITLE} ${taskSummary#./gwb }

  log_section ${run_color} "START '$userTask'" ${taskSummary}

  exitCode=0
  SECONDS=0
  if (($#_dry_run == 0)); then
    if (($#spawn > 0)); then
      eval nohup ${task} &
    else
      # unless being nice, make sure we source the gwb script instead of just running it
      (($#ignoreNice == 0 || $#nice == 0)) && task=${task/.\/gwb/source gwb}
      (($#debug)) && typeset task | sed 's/task=/actual task is /'
      # if it's a Java cmd, display each option indented on a separate line
      eval ${task} | sed '/java / { s/ -/\n   -/g
            }'
      # keep the exit code from the first command in the chain (i.e. not the sed)
      exitCode=${pipestatus[1]}
    fi
  fi
  # tries to display the elapsed seconds as something like 0:00.00
  elapsedTime=$(date -u -d @${SECONDS} +"in %T")

  if [ $exitCode -eq 0 ]; then
    log_section ${pass_color} "DONE '$userTask' $elapsedTime" $taskSummary
    if (($#noNotifySuccess == 0)); then
      notify "Completed: \"$userTask\"" "${taskSummary}"
    else
      unset noNotifySuccess
    fi
  else
    if [ $exitCode -gt 1 ]; then
      exitStr="---with exit code $exitCode"
    fi
    log_section ${fail_color} "FAIL '$userTask' $elapsedTime$exitStr" $taskSummary
    notify "Failed($exitCode): \"$userTask\"" "${taskSummary}" ${failIcon:+-appIcon} "$failIcon"
  fi

  settitle
}

#${_dry_run} konsoleprofile colors=$GW_APPCODE\;icon=${passIcon}\;tabTitle=$GW_TITLE

# Process arguments
while [ -n "$*" ]; do
  unset ignoreNice
  task=$1
  
#  jvmArgs=(
#    -Dgw.${GW_APPCODE}.env=h2mem
#    -Dgw.tests.skip.knownbreak=true
#    -Djava.awt.headless=true
#    -Dgw.webapp.dir=idea/webapp
#    -Dgw.classpath.jar=true
#    -Dgw.plugins.gclasses.dir=idea-gclasses
#    -DgosuInit.supportDiscretePackages=true
#    -Dfile.encoding=UTF-8
#  )
#
#  javaArgs=(
#    -ea
#  )

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [[ ${task} =~ "Quiet$" ]]; then
    notifyVolume=quiet
    task=${task%Quiet}
  elif [[ ${task} =~ "Loud$" ]]; then
    notifyVolume=loud
    task=${task%Loud}
  fi

  fullTask="$GW_START_SCRIPT $task"
  taskFailIcon=
  taskPassIcon=
  case $task in
    backupDb)#
      dbName=$(date "+${dbbackup}_%H:%M:%S")
      fullTask="7za a ${dbName} $GW_DB_DIR; 7z l ${dbName}.7z"
      ;;
    clean)# Deletes the build directory
      ;;
    cleanIdea)# Deletes the Studio project
#      [[ $GW_PL_NUM -lt 9 ]] && fullTask="rm -rf app-cc/cc-studio-run/db"
      taskFailIcon=$failIcon
      ;;
    cleanNuke)# git clean -dxf -- remove untracked directories, files, and ignores
      if read -q "n?Really nuke everything? [yN] "; then
        fullTask='git clean -dxf' # git reset --hard
      fi
      ;;
    codegen)#
      ;;
    compile)#
      fullTask='./gwb compile -DincludeGtest=true'
      ;;
    dropDb)#
      task=dropDb
      [[ $GW_PL_NUM -lt 9 ]] && task=dropdb
      taskFailIcon=$failIcon
      ;;
    fixgwb)# remove the erroneous spaces from the OOB product gwb script
      fullTask="perl -pi.bak -e 's/^([_A-Za-z][_A-Za-z0-9]+) \( \)/\1()/g' gwb"
      ;;
    genDataDictionary)# in the relative path build/XX/dictionary
      ;;
    genPcfDictionary)#
      ;;
    genPcfXsd)#
      ;;
    genSystemData)# Compiled from system_data.xml
      ;;
    genTypeInfo)# OBSOLETE Generate .gti files
      ;;
    genWsdl)#
      ;;
    genWsiLocal)#
      ;;
    h2)# Open the H2 console
      spawn=true
      fullTask="find .gradle ~/.gradle -type f -regex '.*/h2-[0-9.]*\.jar' -print -quit | xargs java -jar"
      echo
      echo "\nChange the host to 127.0.0.1, and make sure the connection string is correct! There is no username or password."
      ;;
    http)# Start a simple http server in the resources directory
      spawn=true
      noNotifySuccess=true
      fullTask=$webserver
      ;;
    httpkill)# Kill the simple http server in the resources directory
      fullTask="pkill -f '$webserver'"
      ;;
    idea)# Generate Studio project
      [[ $GW_PL_NUM -lt 9 ]] && fullTask=${fullTask/idea/gen-ide}
      ;;
    ij)# Start the appropriate intellij
      spawn=true
      fullTask="${IDEA_HOME}/bin/idea.sh"
      ;;
    killPort)# Kill the process that is holding the specified port, or $GW_PORT if none is specified
      export port=${2:=$GW_PORT}
      shift
      export process=$(lsof -i tcp:${port} -t)
      fullTask="(($#process > 0)) && /bin/kill -9 ${process} 2> /dev/null && echo Killed || (echo Port ${port} was not in use && exit 1)"
      ;;
    killStudio)# Kill the studio whose sdkroot is pwd
      fullTask=$(killProcStr "-Dstudio.sdkroot=${PWD}")
      taskFailIcon=$failIcon
      ;;
    lsApd)# List the files that "wipeApd" would delete
      fullTask="find ${apd_dirs} -type f 2>/dev/null | xargs ls ${LS_FLAGS} -l --color"
      ;;
    lsDb)# List the contents of the database directory
      noNotifySuccess=true
      fullTask="ls ${GW_DB_DIR}/*"
      ;;
    packageCustomerDist)# Generate a customer build zip of this code
      ;;
    pcf*)# (optional host:port#) Browse the most recently changed file named /tmp/*.html
      # extract host:port# argument, if none default to localhost:GW_PORT_DEBUG+1
      if [[ $task =~ 'pcf=' ]]; then
        pcfHost=${task##pcf=}
        pcfHost=${pcfHost##http://}
      else
        pcfHost=localhost:$webserverPort
      fi
      echoVar pcfHost

      if [ ${task} = "pcfs" ]; then
        report='/tmp'
      else
        report=$(/bin/ls -t /tmp/*.html | head -n 1)
      fi
      echoVar report

      noNotifySuccess=true
      fullTask="ruby -pi -e 'gsub(%r(http://[^:]+:(null|[0-9]+)/\w+/resources), %q(http://$pcfHost))' /tmp/*.html && ls -l $report && ${BROWSER} $report"
      ;;
    pgrep)# Is the server process running?
      fullTask=$(grepProcStr ${jvmProcess})
      ;;
    pgrepStudio)# Is studio running?
      fullTask=$(grepProcStr "-Dstudio.sdkroot=${PWD}")
      taskFailIcon=$failIcon
      ;;
#    pkill)# Kill the server process on 8090
#      pgrep -af $jvmProcess
#      fullTask=$(killProcStr ${jvmProcess})
#      ;;
#    pkill8080)# Kill the server process on 8080
#      pgrep -af ${jvmProcess/90/80}
#      fullTask=$(killProcStr ${jvmProcess/90/80})
#      ;;
    portCheck)# Is the SSH tunnel open?
      fullTask="ssh -xS $ssh_socket -O check pschaaf@localhost"
      ;;
    portClose)# Stop the SSH tunnel on port 8080
      fullTask="ssh -xS $ssh_socket -O exit pschaaf@localhost"
      ;;
    portOpen)# Open an SSH tunnel on port 8080 redirecting to 8090
      spawn=true
      fullTask="exec ssh -x -M -S $ssh_socket -fnNT -L 8080:127.0.0.1:8090 pschaaf@localhost"
      ;;
    restoreDb)#
      fullTask="7za x -aoa -o${GW_DB_DIR}/.. '$2'"
      shift
      #${dbbackup}.7z"
      ;;
    rmDb)# Forcibly delete the files in GW_DB_DIR
      fullTask="rm -fv ${GW_DB_DIR}/* && echo && tree ${GW_DB_DIR}" #ls -BCFbhHGl ${GW_DB_DIR}"
      ;;
#    runSuite)# Compile then run the specified suite
#      if (( ! $#* )); then
#        echo "No suite specified!"
#      fi
#      fullTask="gwb compile -DincludeGtest=true; gwb runSuite -Dsuite=${1}"
#      shift
#      ;;
    setBg)# Set the background image in iTerm
      fullTask="itermBg '$2'"
      shift
      ;;
    setPlVersion)# Set the platform version in gradle.properties
      fullTask="perl -pi.bak -e 's/plVersion=.*/plVersion=$2/g' gradle.properties; diff gradle.properties{,.bak}; true"
      shift
      ;;
    stop)# Stop Gradle daemon
      ;;
    studio)# Add --no-scan to skip publishing the build scan
      ignoreNice=true
      # shellcheck disable=SC2034 # var appears unused
      [[ $GW_PL_NUM -lt 9 ]] && spawn=true
      unset inScreen
      taskFailIcon=$failIcon
      if [[ "$GW_APPCODE" = 'ccpi' ]]; then
        fullTask="idea"
      else
        task="${no_scan:+--no-scan }${task}"
      fi
      ;;
    tasks)# List the tasks understood by the GW ./gwb
      # shellcheck disable=SC2034 # var appears unused
      noNotifySuccess=true
      $GW_START_SCRIPT tasks | sed "s/^\([a-z].*\)\( - \)/[96m\1[0m\2/g" # colorize the output
      exit
      ;;
    testFail)# Perform a test that automatically fails. Useful for testing
      fullTask="time && sleep 1 && exit ${2:-1}"
      shift
      ;;
    testPass)# Perform a test that automatically succeeds. Useful for testing
      fullTask='time && sleep 1s && echo "done"'
      ;;
    triggerTests)# dummy change to force TC to re-run tests
      fullTask="git commit --amend --date=now --no-edit; git push -f"
      ;;
    wipeApd)# remove the generated APD files
      echo
      potentialTask="rm -rfv ${apd_dirs}"
      if [[ $# -eq 1 ]]; then # is this the final argument?
        fullTask=$potentialTask
      else
        echo $potentialTask
        if read -q "yn?[30;${warn_color}mReally delete all APD content using the above command? [yN][0m "; then
          fullTask=$potentialTask
        else
          echo "\nAPD content not deleted."
          if (( $# )); then
            if read -q "n?[30;${warn_color}mContinue execution? [yN][0m "; then
              shift
              continue
            fi
            message="Ignored remaining arguments: [1m${*}[0m"
          fi
          log_section ${fail_color} "ABORTING Execution" ${message:=No remaining arguments}
          return
        fi
      fi
      ;;
    *)
      taskPassIcon=$passIcon
      taskFailIcon=$failIcon
      ;;
  esac
  shift

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [ "$notifyVolume" = 'quiet' ]; then
    taskPassIcon=
    taskFailIcon=
  elif [ "$notifyVolume" = 'loud' ]; then
    taskPassIcon=$passIcon
    taskFailIcon=$failIcon
  fi

  # grab any arguments
  # shellcheck disable=SC2076 # quoted right side won't be treated as regex
  while [[ "$1" =~ "-.*" ]]; do
    fullTask="${fullTask} $1"
    shift
  done

  fullTask="${fullTask}${outputFilter:+ | }${outputFilter}"
  runTask "${task}" "${fullTask}" ${taskPassIcon:-''} ${taskFailIcon:-''}
done