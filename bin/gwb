#!/bin/zsh

# Command-line Switches
while [ -n "$*" ]; do
  case $1 in
  --delay)
    shift
    delay=$1
    ;;
  --debug)
    debug=true
    ;;
  --dry-run)
    _dry_run='echo '
    ;;
  --nice)
    nice='nice '
    ;;
  --no-scan)
    no_scan=true
    ;;
  --trace)
     set -x
     ;;
  --*)
    echo Unknown option $1
    return 1
    ;;
  *)
    break
    ;;
  esac
  shift
done

# Set up environment
#eval `$HOME/bin/gwSetEnv | sed 's/ -x / /g'`
source $HOME/bin/gwSetEnv
# echo GW_PL_NUM=${GW_PL_NUM}
# echo GW_PLATFORM=${GW_PLATFORM}

if [ -z "$GW_PL_NUM" ]; then
  printf '\e[1;48;5;196mCould not determine Guidewire platform version!\e[0m' >&2
  return 1
fi

if [ "${GW_START_DIR//'~'/$HOME}" != "$PWD" ]; then
  eval cd ${GW_START_DIR}
  echo
  echo Running in ${PWD}
fi

dbbackup=h2database
ssh_socket=~/tmp/cc-fwd-socket
passIcon=/gw-dev/icons/$(echo $GW_PRODUCT | sed 's/.*/\U\0/')_favicon.ico
#failIcon=/usr/share/icons/oxygen/base/48x48/actions/process-stop.png
failIcon=/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns
resourcesDir=${GW_START_DIR/\~/$HOME}/app-cc/cc-run/build/idea/webapp/resources
webserverPort=$((GW_PORT_DEBUG + 1))
webserver="ruby -run -ehttpd ${resourcesDir} -p${webserverPort}"
jvmProcess="java .*-Dgw.port=${GW_PORT_DEBUG}.* com.guidewire"

# Printing and Grep Functions
echoVar() {
  typeset -p $* | sed 's/^declare\( -x\)* / /'
  echo
}

setGnuScreenTitle() {
  #    echo -n "\ek${GW_TITLE} ${*}\e\\"
  #	echo 'GW_TITLE='${GW_TITLE}
  #	echo '*='${*}
  #	echo Setting screen title to \"${GW_TITLE} ${*}\"

  printf '\e]1;%s\a' ${GW_TITLE} ${*}
}

log_section() {
  local _color=$1
  local _status=$2
  local _taskDesc=$3

  local _status=" $(date '+%R') - ${_status} "

  # indent, then draw an underline the length of the status message
  printf "\n  \e[4;38;5;243m%-${#_status}s\n" ' '

  # indent with ul, turn ul off, bold & color on, show status, fill remainder with ul
  printf "  \e[0;1;97;${_color}m%-s\e[0;4;38;5;243m%*s\n" ${_status} $(($COLUMNS - ${#_status} - 2))

  # turn off bold and show the task description
  printf "\e[0;97;${_color}m%-${COLUMNS}s\e[0m\n" ' '$_taskDesc
}

grepProcStr() {
  echo "pgrep -af -- '$1'"
}

killProcStr() {
  echo $(grepProcStr "$1")" && pkill -KILL -f -- '$1'"
}

notify() {
  inLinux && notify-send -c idea -t 5000 ${successIcon:+-i} $successIcon $1
  inMacOS && terminal-notifier -title idea -activate com.apple.Terminal -message $*
  set +x
}

# Run the Actual Task
runTask() {
  local task=${nice}$1
  local taskSummary=${task% | sed*} # remove any 'sed' commands from the display
  local successIcon=$2
  local failIcon=$3
  local whichJava="pwd:  $(pwd)\njava: $(which java)\n\n$(java -version 2>&1)"

  [ -n "${delay}" ] && echo "\nDelay for $delay" && sleep $delay

  #    echo; typeset -p taskSummary
  setGnuScreenTitle ${taskSummary#./gwb }

  log_section 44 'START' ${taskSummary}

  exitCode=0
  SECONDS=0
  if [ -z $_dry_run ]; then
    if [ -n "$spawn" ]; then
      eval nohup ${task} &
    else
      # make sure we source the gwb script instead of just running it
      task=${task/.\/gwb/source gwb}
      [ -n "$debug" ] && echo actual task is ${task}
      # if it's a Java cmd, display each option indented on a separate line
      eval ${task} | sed '/java / { s/ -/\n   -/g
            }'
      # keep the exit code from the first command in the chain (i.e. not the sed)
      exitCode=${pipestatus[1]}
    fi
  fi
  # tries to display the elapsed seconds as something like 0:00.00. Doesn't work on MacOS.
  if [[ ${UNAME} != "Darwin" ]]; then
    elapsedTime=`date -u -d @${SECONDS} +"in %T"`
  fi

  if [ $exitCode -eq 0 ]; then
    log_section 42 "DONE $elapsedTime" $taskSummary
    notify "Completed $GW_TITLE:'$taskSummary'" $whichJava
  else
    log_section '48;5;196' "FAIL exit($exitCode) $elapsedTime" $taskSummary
      notify "Failed $GW_TITLE:'$taskSummary' (exit code $exitCode)" $whichJava ${failIcon:+-appIcon} "$failIcon"
  fi

  setGnuScreenTitle
}

[ -n "$debug" ] && set -x

#${_dry_run} konsoleprofile colors=$GW_PRODUCT\;icon=${passIcon}\;tabTitle=$GW_TITLE

# Process arguments
while [ -n "$*" ]; do
  task=$1

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [[ ${task} =~ "Quiet$" ]]; then
    notify=quiet
    task=${task%Quiet}
  elif [[ ${task} =~ "Loud$" ]]; then
    notify=loud
    task=${task%Loud}
  fi

  fullTask="$GW_START_SCRIPT $task"
  taskFailIcon=
  taskPassIcon=
  case $task in
      backupDb)
         dbName=`date "+${dbbackup}_%H:%M:%S"`
         fullTask="7za a ${dbName} $GW_DB_DIR; 7z l ${dbName}.7z"
         ;;
      cleanIdea)
        taskFailIcon=$failIcon
        ;;
      cleanStudio)
        if [ $GW_PL_NUM -lt 9 ]; then
          fullTask="rm -rf app-cc/cc-studio-run/db"
        else
          fullTask=": this task only works on platform versions less than 9.; exit 1"
        fi
        ;;
      compile)
        fullTask='./gwb compile -DincludeGtest=true'
        ;;
      dropDb)
        if [ $GW_PL_NUM -lt 9 ]; then
          task=dropdb
        else
          task=dropDb
        fi
        taskFailIcon=$failIcon
        ;;
      fixgwb)
        # remove the erroneous spaces from the OOB product gwb script
        perl -pi.bak -e 's/^([_A-Za-z][_A-Za-z0-9]+) \( \)/\1()/g' gwb
        ;;
      h2)
        spawn=true
        fullTask="find .gradle -type f -regex '.*/h2-[0-9.]*\.jar' -print -quit | xargs java -jar"
        echo; echo "There's no username or password. Make sure the connection string is correct!"
        ;;
      httpkill)
        fullTask="pkill -f '$webserver'"
        ;;
      http)
        spawn=true
        fullTask=$webserver
        ;;
      idea)
        if [ $GW_PL_NUM -lt 9 ]; then
          fullTask=${fullTask/idea/gen-ide}
        fi
        ;;
      ij)
        spawn=true
        fullTask="${IDEA_HOME}/bin/idea.sh"
        ;;
      killPort)
        export port=${2:=$GW_PORT}; shift
        export process=`lsof -i tcp:${port} -t`
        fullTask="[ -n ${process} ] && /bin/kill -9 ${process} 2> /dev/null && echo Killed || echo Port ${port} is not in use"
        ;;
      killStudio)
        fullTask=$(killProcStr "-Dstudio.sdkroot=${PWD}")
        taskFailIcon=$failIcon
        ;;
      pgrep)
        fullTask=$(grepProcStr ${jvmProcess})
        ;;
      pkill)
        pgrep -af $jvmProcess
        fullTask=$(killProcStr ${jvmProcess})
        ;;
      pkill8080)
        pgrep -af ${jvmProcess/90/80}
        fullTask=$(killProcStr ${jvmProcess/90/80})
        ;;
      pcf*)
        # extract host:port# argument, if none default to localhost:GW_PORT_DEBUG+1
        if [[ $task =~ 'pcf=' ]]; then
          pcfHost=${task##pcf=}
          pcfHost=${pcfHost##http://}
        else
          pcfHost=localhost:$webserverPort
        fi
        echoVar pcfHost

        if [ ${task} = "pcfs" ]; then
          report='/tmp'
        else
          report=$(/bin/ls -t /tmp/*.html | head -n 1)
        fi
        echoVar report

        fullTask="ruby -pi -e 'gsub(%r(http://[^:]+:(null|[0-9]+)/\w+/resources), %q(http://$pcfHost))' /tmp/*.html && ls -l $report && ${BROWSER} $report"
        ;;
      portCheck)
        fullTask="ssh -S $ssh_socket -O check pschaaf@localhost"
        ;;
      portClose)
        fullTask="ssh -S $ssh_socket -O exit pschaaf@localhost"
        ;;
      portOpen)
        spawn=true
        fullTask="exec ssh -M -S $ssh_socket -fnNT -L 8080:127.0.0.1:8090 pschaaf@localhost"
        ;;
      restoreDb)
         fullTask="7za x -aoa -o${GW_DB_DIR}/.. '$2'"
          shift
          #${dbbackup}.7z"
         ;;
      lsDb)
         fullTask="ls ${GW_DB_DIR}/*"
         ;;
      rmDb)
         fullTask="rm -fv ${GW_DB_DIR}/*; rmdir ${GW_DB_DIR}; printf '\n---DONE---\n'; tree ${GW_DB_DIR}" #ls -BCFbhHGl ${GW_DB_DIR}"
         ;;
#      runSuite)
#        if (( ! $#* )); then
#          echo "No suite specified!"
#        fi
#        fullTask="gwb compile -DincludeGtest=true; gwb runSuite -Dsuite=${1}"
#        shift
#        ;;
      server) # broken
        fullTask="java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:35455,suspend=y,server=n -server -ea -Djava.awt.headless=true -Dgw.port=8080 -Xmx4g -Dgw.server.mode=dev -Dgwdebug=true -Dgw.webapp.dir=idea/webapp -Dgw.classpath.jar=true -Dgw.plugins.gclasses.dir=idea-gclasses -DgosuInit.supportDiscretePackages=true -Dsmoketest.properties=false,false,false -javaagent:/opt/idea-IU-173.4674.33/plugins/Groovy/lib/agent/gragent.jar -javaagent:/opt/idea-IU-173.4674.33/lib/rt/debugger-agent.jar=/tmp/capture.props -Dfile.encoding=UTF-8 -classpath /tmp/classpath.jar com.guidewire.commons.jetty.GWServerJettyServerMain"
        ;;
      studio)
        if [ $GW_PL_NUM -lt 9 ]; then
          spawn=true
        fi
        unset inScreen
        taskFailIcon=$failIcon
        inLinux && no_scan=true
        task="${no_scan:+--no-scan }${task}"
        ;;
      tasks)
        $GW_START_SCRIPT tasks | sed "s/^\([a-z].*\)\( - \)/[96m\1[0m\2/g" # colorize the output
        exit
        ;;
      testFail|testfail)
        fullTask='time && sleep 1 && ls *someNonexistentFile%%'
        ;;
      testPass|testpass)
        fullTask='time && sleep 1s'
        ;;
      *)
        taskPassIcon=$passIcon
        taskFailIcon=$failIcon
        ;;
  esac
  shift

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [ "$notify" = "quiet" ]; then
    taskPassIcon=
    taskFailIcon=
  elif [ "$notify" = "loud" ]; then
    taskPassIcon=$passIcon
    taskFailIcon=$failIcon
  fi

  # grab any arguments
  while [[ "$1" =~ "-.*" ]]; do
    fullTask="${fullTask} $1"
    shift
  done

  runTask ${fullTask} ${taskPassIcon:-''} ${taskFailIcon:-''}
done
