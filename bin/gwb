#!/bin/zsh

#--no-build-cache # do not call the build cache

run_color=${run_color:-'48;5;21'}
pass_color=${pass_color:-'48;5;34'}
fail_color=${fail_color:-'48;5;196'}
warn_color=${warn_color:-'48;5;228'}
note_color=${note_color:-'97;46'}
unset nice

if [[ "$UNAME" = "Darwin" ]]; then
  alias date=gdate
  alias sleep=gsleep
fi

# Command-line Switches. Add a # directly after the paren to include the switch in the generated zcompletion
while [ -n "$*" ]; do
  case $1 in
    --ce)# Force gwenv to use the IJ Community Edition
      # shellcheck disable=SC2034 # unused variable
      communityEdition=true
      ;;
    --clipboard)# put the command output on the clipboard
      clipboard=true
      ;;
    --delay)# Sleep for the specified number of seconds (the default)
      shift
      delay=$1
      ;;
    --debug)#
      # shellcheck disable=SC2034
      debug=true
      ;;
    --dry-run)# Print the commands that will be run, but do not actually run them
      # shellcheck disable=SC2034 # unused variable
      _dry_run='echo '
      ;;
    --log)# Log session to gwb_$(date "+%Y.%m.%d-%H.%M.%S").log
      logfile=gwb_\$\(date "+%Y.%m.%d-%H.%M.%S"\).log
      # shellcheck disable=SC2154
      echo Logging to $logfile
      exec > >(tee -i $logfile)
      exec 2>&1
      ;;
    --nice)# Run the command with the specified niceness
      nice=true
      ;;
    --no-scan)
      no_scan=true
      ;;
    --setx)# run "set -x" upon parsing this switch
      set -x
      ;;
    --wc)# Pipe the command output through wc
      outputFilter='wc'
      ;;
    --*)
      echo Unknown option $1
      return 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Set up environment
source $HOME/bin/gwSetEnv
defaultRunPort=$(sed -n 's/jettyPort=//p' gradle.properties)
defaultDebugPort=$((defaultRunPort + 10))

if ((! $#GW_PL_VERSION)); then
  printf '\e[1;48;5;196mCould not determine Guidewire platform version!\e[0m' >&2
  return 1
fi

#if [ "${GW_START_DIR//'~'/$HOME}" != "$PWD" ]; then
#  eval cd ${GW_START_DIR}
#  echo
#  echo Running in ${PWD}
#fi

apd_dirs=(
  app-cc/cc-apd-genlob-content/build
  app-cc/cc-apd-genlob-content/config
  app-cc/cc-apd-genlob-content/generated
  app-cc/cc-apd-genlob-content/generated_classes
  app-cc/cc-apd-genlob-content/gsrc
  app-cc/cc-apd-genlob-content/gtest/gw/smoketest/apd
  app-cc/cc-apd-genlob-content/src
  app-cc/cc-test-apd/build
  app-cc/cc-test-apd/config
  app-cc/cc-test-apd/generated
  app-cc/cc-test-apd/generated_classes
  app-cc/cc-test-apd/gsrc
  app-cc/cc-test-apd/gtest/gw
)
dbbackup=h2db
failIcon=/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns
serverDebugProcess="java .*-Dgw.port=${GW_PORT_DEBUG}.* com.guidewire"
passIcon=/gw-dev/icons/$(echo $GW_APPCODE | sed 's/.*/\U\0/')_favicon.ico

function catPumlHeader() {
cat <<HERE
@startuml
!pragma useIntermediatePackages false
'scale 1800 width
'scale 4000 height
hide empty members
'left to right direction
'set separator none
skinparam class {
  BackgroundColor<<gosu>> lightgreen
  BackgroundColor<<internal>> lightblue
  AttributeFontColor<<legacy>> Gray
  StereotypeFontColor<<legacy>> Gray
}
package entity #wheat {}

@enduml
HERE
}

resourcesDir=${PWD/\~/$HOME}/app-${GW_APPCODE}/${GW_APPCODE}-run/build/idea/webapp
ssh_socket=~/tmp/cc-fwd-socket
if [[ "$UNAME" = "Darwin" ]]; then
  seven_zip=7zz
else
  seven_zip=7z
fi
webserverPort=$((GW_PORT_DEBUG + 1))

webserver="ruby -run -ehttpd ${resourcesDir} -p${webserverPort}"

# Printing and Grep Functions
function note() {
  echo
  pastel -f paint -n white --on teal "${@}"
  echo
}

function echoVar() {
  typeset -p $* | sed 's/^declare\( -x\)* / /'
  echo
}

autoload -Uz settitle

function log_section() {
  local _color=$1
  local _status=$2
  local _taskDesc=$3

  local _status="$(date '+%R') - ${_status} "

  # turn bold and color on, show status
  printf "\n\e[97;${_color}m%-s\e[0;38;5;243m\n" ${_status}

  # turn off bold and show the task description
  printf "\e[0;97;${_color}m%-${COLUMNS}s\e[0m\n" $_taskDesc
}

function debugPrint() {
  (($#debug)) || return
  print -P "%F{13}$*%f"
}

function grepProcStr() {
  echo "pgrep -afl -- '$1' | grep -v pgrep"
}

PKILL='pkill -KILL -f --'

function killProcStr() {
  echo $(grepProcStr "$1")" && $PKILL '$1'"
}

function notify() {
  subtitle="$1"
  shift
  terminal-notifier -group $PWD -title "$GW_TITLE" -subtitle "$subtitle" -message "${*}" >/dev/null &
  set +x
}

# Run the Actual Task
function runTask() {
  local userTask=$1
  local task=$2
  (($#debug)) && typeset nice ignoreNice
  (($#ignoreNice == 0 && $#nice > 0)) && task='nice '${task}
  local taskSummary=${task% | sed*} # remove any 'sed' commands from the display
  (($#debug)) && typeset userTask task taskSummary
  local successIcon=$3
  local failIcon=$4
  debugPrint alpha
  debugPrint beta
  #  local whichJava="pwd:  $(pwd)\njava: $(which java)\n\n$(java -version 2>&1)"

  (($#delay > 0)) && echo "\nDelay for $delay" && sleep $delay

  #    echo; typeset -p taskSummary
  settitle ${GW_TITLE} ${taskSummary#./gwb }

  log_section ${run_color} "START '$userTask'" ${taskSummary}

  exitCode=0
  SECONDS=0
  if (($#_dry_run == 0)); then
    if (($#spawn > 0)); then
      eval nohup ${task} &
    else
      # unless being nice, make sure we source the gwb script instead of just running it
      (($#ignoreNice == 0 || $#nice == 0)) && task=${task/.\/gwb/source gwb}
      (($#debug)) && typeset task | sed 's/task=/actual task is /'
      [[ $clipboard ]] && task="${task} | pbcopy"
      # if it's a Java cmd, display each option indented on a separate line
      eval ${task} | sed '/java / { s/ -/\n   -/g
            }'
      # keep the exit code from the first command in the chain (i.e. not the sed)
      exitCode=${pipestatus[1]}
      if (($#clipboard )); then
        echo "\n\e[30;${note_color}mAdded the following to the clipboard\e[0m"
        pbpaste
        echo
      fi
    fi
  fi
  # tries to display the elapsed seconds as something like 0:00.00
  elapsedTime=$(date -u -d @${SECONDS} +"in %T")

  if [ $exitCode -eq 0 ]; then
    log_section ${pass_color} "DONE '$userTask' $elapsedTime" $taskSummary
    if (($#noNotifySuccess == 0)); then
      notify "Completed: \"$userTask\"" "${taskSummary}"
    else
      unset noNotifySuccess
    fi
  else
    if [ $exitCode -gt 1 ]; then
      exitStr="---with exit code $exitCode"
    fi
    log_section ${fail_color} "FAIL '$userTask' $elapsedTime$exitStr" $taskSummary
    notify "Failed($exitCode): \"$userTask\"" "${taskSummary}" ${failIcon:+-appIcon} "$failIcon"
  fi

  settitle
}

# Process arguments
while (($#@)); do
  unset ignoreNice
  task=${1%%=*}
  # value is the text after the equals sign, or empty string if there is none
  # shellcheck disable=SC2299 # expansion can't be nested
  value=${${1##*=}//$task/}

#  jvmArgs=(
#    -Dgw.${GW_APPCODE}.env=h2mem
#    -Dgw.tests.skip.knownbreak=true
#    -Djava.awt.headless=true
#    -Dgw.webapp.dir=idea/webapp
#    -Dgw.classpath.jar=true
#    -Dgw.plugins.gclasses.dir=idea-gclasses
#    -DgosuInit.supportDiscretePackages=true
#    -Dfile.encoding=UTF-8
#  )
#
#  javaArgs=(
#    -ea
#  )

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [[ ${task} =~ "Quiet$" ]]; then
    notifyVolume=quiet
    task=${task%Quiet}
  elif [[ ${task} =~ "Loud$" ]]; then
    notifyVolume=loud
    task=${task%Loud}
  fi

  fullTask="$GW_START_SCRIPT $task"
  taskFailIcon=
  taskPassIcon=
  case $task in
    backupDb)# (optionally specify comment) creates backup named $(date "+${dbbackup}_%H:%M:%S${comment}")
      if (( $#value )); then
        # extract the name portion, and replace spaces with underscores
        comment=_${value// /_}
      else
        comment=""
      fi

      dbName=$(date "+${dbbackup}_%y%m%d_%H:%M:%S${comment}") # keep this in sync with the switch comment above
      fullTask="$seven_zip a ${dbName} $GW_DB_DIR; $seven_zip l ${dbName}.7z"
      ;;
    clean)# Deletes the build directory
      ;;
    cleanIdea)# Deletes the Studio project
      #[[ $GW_PL_NUM -lt 9 ]] && fullTask="rm -rf app-${GW_APPCODE}/${GW_APPCODE}-studio-run/db"
      taskFailIcon=$failIcon
      ;;
    cleanNuke)# git clean -dxf -- remove untracked directories, files, and ignores
      if read -q "n?Really nuke everything? [yN] "; then
        fullTask='git clean -dxf' # git reset --hard
      fi
      ;;
    codegen)#
      ;;
    compile)#
      fullTask='./gwb compile -DincludeGtest=true'
      ;;
    dropDb)#
      task=dropDb
      [[ $GW_PL_NUM -lt 9 ]] && task=dropdb
      taskFailIcon=$failIcon
      ;;
    editDisplayKey)# Edit display.properties in a plain (non-studio) IntelliJ Idea
      spawn=true
      fullTask="idea app-${GW_APPCODE}/${GW_APPCODE}/config/locale/display.properties"
      ;;
    fixgwb)# Remove the erroneous spaces from the OOB product gwb script
      fullTask="perl -pi.bak -e 's/^([_A-Za-z][_A-Za-z0-9]+) \( \)/\1()/g' gwb"
      ;;
    fixRunConfigs)# Replaces the literal port numbers with env var references in each of the .idea/runConfigurations
      fullTask="perl -pi.bak -e 's/-Xmx4g/-Dgw.port=8001 -Xmx4g/' .idea/runConfigurations/Snowcat*.xml && perl -pi.bak -e 's/port=${defaultRunPort}/port=\\$\{GW_PORT\}/; s/port=${defaultDebugPort}/port=\\$\{GW_PORT_DEBUG\}/' .idea/runConfigurations/*.xml"
      ;;
    fixPuml)# Remove the cruft (internal classes, DYNPROPs, Bean-level properties, etc. from the file
      if (( $#value == 0 )); then
        fullTask="echo '$task' requires a file name argument\! && exit 1"
      else
        # make a backup
        cp -f $value{,.bak}
        # add skinparam etc. if it's not already there
        rg 'skinparam class' $value && ruby -pi -e "gsub(/^@startuml$/, %Q(@startuml\n!pragma useIntermediatePackages false\n'scale 1800 width\n'scale 4000 height\nhide empty members\n'left to right direction\n'set separator none\nskinparam class {\n  BackgroundColor<<gosu>> lightgreen\n  BackgroundColor<<internal>> lightblue\n  AttributeFontColor<<legacy>> Gray\n  StereotypeFontColor<<legacy>> Gray\n}\npackage entity #wheat {}
))" $value
        ruby -pi -e "gsub(/^.*\b[gs]et(ArchivePartition|BeanVersion|CreateTime|CreateUser|ID|LoadCommandID|PublicID|Retired|RetiredValue|UpdateTime|UpdateUser)\b.*\n/, %q());\
        gsub(/^.*\b((Insert|Remove|Update)Callback|__createInternalInterface|__getDelegateMap|__getInternalInterface|AbstractEditableRetireableBeanProxy|Approvable|Bean|BeanBase|DelegateLoader|EFTDataDelegate|EntityPropertyInfoReference|EntityTypeReference|EventAware|Extractable|gw.pl.persistence.core.Key|isNew|isNewlyImported|isRetired|KeyableBean|List<EventDescriptor>|remove|Retireable|touch|TransactionTAccountOperationsDelegate|Validatable|Versionable)\b.*\n/, %q());\
        gsub(/^.*[~-] \{static\}.*\n/, %q());\
        gsub(/^.*(DELEGATE_MAP|_DYNPROP|_EVENT|_internal)\n/, %q());\
        gsub(/\b(typekey|java\.(lang|math|util))\./, %q());" $value
        if diff -q $value{,.bak}; then
          rm ${value}.bak
          fullTask="echo No changes made."
        else
          fullTask="wc -l $value{,.bak} | grep -v total"
        fi
      fi
      ;;
    genDataDictionary)# in the relative path build/XX/dictionary
      ;;
    genPcfDictionary)# gen document of each pcf element in build/pcf.xml
      ;;
    genPcfXsd)#
      ;;
    genSystemData)# Compile files from system_data.xml -- for pre-Mammoth builds
      ;;
    genTypeInfo)# OBSOLETE as of Mammoth -- Generate .gti files
      ;;
    genWsdl)#
      ;;
    genWsiLocal)#
      ;;
    h2)# Open the H2 console connected to the database
#      spawn=true
      jarFile=`find .gradle ~/.gradle -type f -regex '.*/h2-[0-9.]*\.jar' -print -quit`
      db_path=`pwd`${GW_DB_DIR#.}/${GW_APPCODE}
      fullTask="java -jar ${jarFile} -url 'jdbc:h2:${db_path};IFEXISTS=TRUE'"
      echo
      echo "\n\e[5;97;101mChange the host to 127.0.0.1.\e[0m"
      ;;
    h2Basic)# Open the H2 console
#      spawn=true
      jarFile=`find .gradle ~/.gradle -type f -regex '.*/h2-[0-9.]*\.jar' -print -quit`
      db_path=`pwd`${GW_DB_DIR#.}/${GW_APPCODE}

      fullTask="java -jar ${jarFile}"
      echo
      echo "\n\e[5;97;101mChange the host to 127.0.0.1, and make sure the JDBC URL is '${db_path}'! There is no username or password.\e[0m"
      ;;
    http)# Start a simple http server in the resources directory
      spawn=true
      noNotifySuccess=true
      fullTask=$webserver
      ;;
    idea)# Generate Studio project
      [[ $GW_PL_NUM -lt 9 ]] && fullTask=${fullTask/idea/gen-ide}
      ;;
    ij)# Start the appropriate intellij
      spawn=true
      fullTask="${IDEA_HOME}/bin/idelsa.sh"
      ;;
    killH2)# Kill the H2 server on port $((defaultRunPort + 2))
      export port=$((defaultRunPort + 2))
      fullTask='process=$(lsof -i tcp:'$port' -t) && /bin/kill -9 ${process} 2> /dev/null && echo Killed process $process || (echo Port '$port' was not in use && exit 1)'
      ;;
    killHttp)# Kill the simple http server in the resources directory
      fullTask="pkill -f '$webserver'"
      ;;
    killPort)# Kill the process that is holding the specified port, or $GW_PORT if none is specified
      export port=${value:=$GW_PORT}
      fullTask='process=$(lsof -i tcp:'$port' -t) && /bin/kill -9 ${process} 2> /dev/null && echo Killed process $process || (echo Port '$port' was not in use && exit 1)'
      ;;
    killServer)# Kill the server process on $GW_PORT_DEBUG
      pgrep -af $serverDebugProcess
#      fullTask=$(killProcStr ${serverDebugProcess})
      fullTask="${PKILL} '${serverDebugProcess}'"
      ;;
    killStudio)# Kill the studio whose sdkroot is pwd
      fullTask="${PKILL} '-Dstudio.sdkroot=${PWD}'"
      taskFailIcon=$failIcon
      ;;
    lsApd)# List the files that "wipeApd" would delete
      fullTask="find ${apd_dirs} -type f 2>/dev/null | xargs ls ${LS_FLAGS} -l --color"
      ;;
    lsDb)# List the contents of the database directory
      noNotifySuccess=true
      fullTask="ls -l ${GW_DB_DIR}"
      ;;
    lsDiff)# put the list of files that have changed since origin/h-master (or the specified branch) on the clipboard
      branch=${value:-origin/h-master}
      [[ $branch = 'coins' ]] && branch=origin/feat/gcl_coinsurance
      clipboard=true
      fullTask="git show --name-only --pretty='' ${branch}.. | toIJScope"
      ;;
    lsplugins)# List all of the user IntelliJ plugins
      expectedPlugins=(
        'GitHub Copilot'
        'GitLink'
        'GitToolBox'
        'Grep Console'
        'Jump to Line'
        'Launch URL from String'
        'PlantUML Parser'
        'plantuml4idea'
        'String Manipulation'
      )
      echo EXPECTED
      note 'Expected:'
      (for exp in ${expectedPlugins}; do echo $exp; done) | cat -n
#      fullTask="echo Found:; fd --base-directory .idea/settings/system/plugins --no-ignore -e zip --format '{/.}' | sort --ignore-case | cat -n"
      installedPlugins=("${(@f)$(sed -E 's/^.*\"id\":([0-9]+).*name\":\"([^\"]+)\".*$/\2  (\1)/' .idea/settings/system/plugins/meta/*.json | sort --ignore-case)}") #" quote to force IJ to consider the previous string as ended

      # Create lookup tables for matches
      typeset -A matched_expected
      typeset -A matched_installed

      # Find all matches
      for expected in "${expectedPlugins[@]}"; do
        for installed in "${installedPlugins[@]}"; do
          if [[ "$installed" == "$expected"* ]]; then
            matched_expected["$expected"]=1
            matched_installed["$installed"]=1
          fi
        done
      done

      echoVar matched_expected matched_installed

      # Create new arrays excluding matched items
      missingExpected=()
      extraInstalled=()
      set -x
      for expected in "${expectedPlugins[@]}"; do
        [[ -z "${matched_expected[$expected]}" ]] && missingExpected+=("$expected")
      done
      set +x
      for installed in "${installedPlugins[@]}"; do
        [[ -z "${matched_installed[$installed]}" ]] && extraInstalled+=("$installed")
      done

      echoVar missingExpected extraInstalled

      fullTask="echo; sed -E 's/^.*\"id\":([0-9]+).*name\":\"([^\"]+)\".*$/\2  (\1)/' .idea/settings/system/plugins/meta/*.json | sort --ignore-case | cat -n | lite "${expectedPlugins}
      ;;
    lsport)# List processes holding the specified port
      fullTask="lsof -i tcp:${value}"
      ;;
    mkpuml)
      if (( $#value == 0 )); then
        fullTask="echo '$task' requires a file name argument\! && exit 1"
      else
        catPumlHeader > ${value}.puml
        fullTask="ls ${value}.puml"
      fi
      ;;
    opendd)# Open the data dictionary
      fullTask='open build/cc/dictionary/data/index.html'
      ;;
    packageCustomerDist)# Generate a customer build zip of this code
      ;;
    pcfs)# (optional host:port#) Browse the most recently changed file named /tmp/*.html
      # extract host:port# argument, if none default to localhost:GW_PORT_DEBUG+1
      if (( $#value )); then
        pcfHost=${task##http://}
      else
        pcfHost=localhost:$webserverPort
      fi
      echoVar pcfHost

      if [ ${task} = "pcfs" ]; then
        report='/tmp'
      else
        report=$(/bin/ls -t /tmp/*.html | head -n 1)
      fi
      echoVar report

      noNotifySuccess=true
      fullTask="ruby -pi -e 'gsub(%r(http://[^:]+:(null|[0-9]+)/\w+/resources), %q(http://$pcfHost/resources))' /tmp/*.html && ls -l $report && ${BROWSER} $report"
      ;;
    pgrepServer)# Is the server process running?
      fullTask=$(grepProcStr ${serverDebugProcess})
      ;;
    pgrepStudio)# Is studio running?
      fullTask=$(grepProcStr "-Dstudio.sdkroot=${PWD} ")
      echo $fullTask
      taskFailIcon=$failIcon
      ;;
#    portCheck)# Is the SSH tunnel open?
#      fullTask="ssh -xS $ssh_socket -O check pschaaf@localhost"
#      ;;
#    portClose)# Stop the SSH tunnel on port 8080
#      fullTask="ssh -xS $ssh_socket -O exit pschaaf@localhost"
#      ;;
#    portOpen)# Open an SSH tunnel on port 8080 redirecting to 8090
#      spawn=true
#      fullTask="exec ssh -x -M -S $ssh_socket -fnNT -L 8080:127.0.0.1:8090 pschaaf@localhost"
#      ;;
    restoreDb)# Restore the database file named in the argument
      if (( $#value == 0 )); then
        fullTask="echo '$task' requires a database name argument\! && exit 1"
      else
        mkdir -p ${GW_DB_DIR}
        fullTask="$seven_zip x -aoa -o${GW_DB_DIR}/.. '${value}' && ls -l ${GW_DB_DIR}"
      fi
      ;;
    rmDb)# Forcibly delete the files in GW_DB_DIR
      fullTask="rm -fv ${GW_DB_DIR}/* && echo && tree ${GW_DB_DIR}" #ls -BCFbhHGl ${GW_DB_DIR}"
      ;;
#    runSuite)# Compile then run the specified suite
#      if (( ! $#* )); then
#        echo "No suite specified!"
#      fi
#      fullTask="gwb compile -DincludeGtest=true; gwb runSuite -Dsuite=${1}"
#      shift
#      ;;
    scratchReport)# Generate scratch suite entries for tests in the current working set
      query="git status --porcelain | grep 'Test\.(gs|java)' | /usr/bin/sed 's/^[ A-Z]* //; s_^.*/g*src/__; s_^.*/g*test/__; s_/_._g; /gs$/ { s/^/\"/; s/.gs$/\"/; }; /java$/ { s/java$/class/; }; s/^/.withTest(/; s/$/)/'"
#      declare query=%q(git status --porcelain \| grep -e 'Test\.(gs|java)' \| /usr/bin/sed ' s_^\[ A-Z]* __; s_^.*/g*src/__; s_^.*/g*test/__; s_/_._g; /gs$/ { s_^_\"_; s_.gs$_\"_; \}; /java$/ { s_java$_class_; \}; s_^_.withTest(_; s_$_\)_' )
#      declare query=%q(git status --porcelain \| grep -e 'Test\.(gs|java)' \| /usr/bin/sed ' s_^[ A-Z]* __; s_^.*/g*src/__; s_^.*/g*test/__; s_/_._g; /gs$/ { s_^_\"_; s_.gs$_\"_; }; /java$/ { s_java$_class_; }; s_^_.withTest(_; s_$_)_' )

#      declare -a query=(
#        git status --porcelain
#        \| grep -e 'Test\.(gs|java)'
#        \| /usr/bin/sed '\
#            s_^[ A-Z]* __;   \
#            s_^.*/g*src/__;  \
#            s_^.*/g*test/__; \
#            s_/_._g;         \
#            /gs$/   { s_^_\"_;           \
#                      s_.gs$_\"_; };     \
#            /java$/ { s_java$_class_; }; \
#            s_^_.withTest(_;             \
#            s_$_)_'
#      )

#      declare -a query=(git status --porcelain
#          \| grep 'Test\.(gs|java)'
#      )
      echoVar query
      eval "$query"
      fullTask="echo '${answer}'"
      fullTask=${query}
#      set -x
#      fullTask="git diff --name-only > /dev/stdout"
#      answer=`$fullTask`
#      echo $answer
      ;;
    setBg)# Set the background image in iTerm
      fullTask="itermBg '$2'"
      shift
      ;;
    setPlVersion)# Set the platform version in gradle.properties
      fullTask="perl -pi.bak -e 's/^plVersion=.*/plVersion=$2/g' gradle.properties; rm gradle.properties.bak; git add gradle.properties; git diff gradle.properties"
      shift
      ;;
    stop)# Stop Gradle daemon
      ;;
    studio)# Add --no-scan to skip publishing the build scan
      ignoreNice=true
      # shellcheck disable=SC2034 # var appears unused
      [[ $GW_PL_NUM -lt 9 ]] && spawn=true
      unset inScreen
      taskFailIcon=$failIcon
      if [[ "$GW_APPCODE" = 'ccpi' ]]; then
        fullTask="idea"
      else
        task="${no_scan:+--no-scan }${task}"
      fi
      ;;
    tasks)# List the tasks understood by the GW ./gwb
      # shellcheck disable=SC2034 # var appears unused
      noNotifySuccess=true
      $GW_START_SCRIPT tasks | sed "s/^\([a-z].*\)\( - \)/[96m\1[0m\2/g" # colorize the output
      exit
      ;;
    testFail)# Perform a test that automatically fails. Useful for testing
      fullTask="time && sleep 1 && exit ${2:-1}"
      shift
      ;;
    testPass)# Perform a test that automatically succeeds. Useful for testing
      fullTask='time && sleep 1s && echo "done"'
      ;;
    triggerTests)# dummy change to force TC to re-run tests
      fullTask="git commit --amend --date=now --no-edit; git push -f"
      ;;
    wc)# count all lines of code excluding generated files and tests
      dirs=(app-${GW_APPCODE})
      [[ -d appcommons ]] && dirs=(${dirs} appcommons)
      [[ -d platform ]] && dirs=(${dirs} platform)
      fullTask="nice -n 15 gfind ${dirs} -type f \( -path '*/build/*' -o -path '*/generated/*' -o -iregex '.*test.*' -prune \) -o \( -name '*.java' -o -name '*.gs' -o -name '*.gst' \) -print0 | gwc --lines --files0-from=- | xargs printf \"\n%'9d %s\"; echo ' from non-test files in: ${dirs}'"
      ;;
    wipeApd)# remove the generated APD files
      echo
      potentialTask="rm -rfv ${apd_dirs}"
      if [[ $# -eq 1 ]]; then # is this the final argument?
        fullTask=$potentialTask
      else
        echo $potentialTask
        if read -q "yn?[30;${warn_color}mReally delete all APD content using the above command? [yN][0m "; then
          fullTask=$potentialTask
        else
          echo "\nAPD content not deleted."
          if (( $# )); then
            if read -q "n?[30;${warn_color}mContinue execution? [yN][0m "; then
              shift
              continue
            fi
            message="Ignored remaining arguments: [1m${*}[0m"
          fi
          log_section ${fail_color} "ABORTING Execution" ${message:=No remaining arguments}
          return
        fi
      fi
      ;;
    www)# Open a browser on the server process
      fullTask="open http://localhost:${GW_PORT_DEBUG}/${GW_APPCODE}"
      ;;
    *)
      taskPassIcon=$passIcon
      taskFailIcon=$failIcon
      ;;
  esac
  shift

  # append 'Loud' or 'Quiet' to any task name to override that task's default for OS notification
  if [ "$notifyVolume" = 'quiet' ]; then
    taskPassIcon=
    taskFailIcon=
  elif [ "$notifyVolume" = 'loud' ]; then
    taskPassIcon=$passIcon
    taskFailIcon=$failIcon
  fi

  # grab any arguments
  # shellcheck disable=SC2076 # quoted right side won't be treated as regex
  while [[ "$1" =~ "-.*" ]]; do
    fullTask="${fullTask} $1"
    shift
  done

  fullTask="${fullTask}${outputFilter:+ | }${outputFilter}"
  runTask "${task}" "${fullTask}" ${taskPassIcon:-''} ${taskFailIcon:-''}
done