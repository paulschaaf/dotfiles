#!/usr/bin/env zsh

# Set the Defaults
fgColor=gray60      # lower number is darker
pointsize=240
smush=100
maxWidth=1900
maxHeight=$maxWidth

function usage() {
   echo "Usage: ${0:t} [OPTION...] TEXT
  Creates an image filename containing the supplied text.
  --dry_run          Show the resulting command but do not execute
  --fg=COLOR         Set the foreground color (default '${fgColor}')
  --font=font        Set the font of the text
  --force            Overwrite the existing file, if any
  -h, --help         Show this screen
  --prodColor=color  The color to use for the product code
  --product          The product code
  --setx             Trace the execution
  --size=num         Set the size of the font (default $pointsize)
  --smush            Sets the spacing between the GW_APPCODE and the project name (default '${smush}')
  --version

  All other switches are passed through to 'convert', after replacing any equals signs with a space. So for instance
  the switch '-font=fixed' will be passed through as '-font fixed'.

  For a list of color names see https://imagemagick.org/script/color.php#color_names
"
}

if ((!$#1)); then
  usage
  exit
fi

switches=()
alias dry_run=false
alias force=false

source ~/bin/gwenv
GW_PL_VERSION=${GW_PL_VERSION%%.*}
prodColor=${GW_COLOR##* }
prodColor=${prodColor:-$fgColor}

while [[ -n "$*" ]]; do
  switch=${1%%=*}; value=${1#*=}
  case ${switch} in
    --dry-run)# Print the commands that will be run, but to not run them
      alias dry_run=true
      ;;
    --fg)# set the foreground color
      fgColor=${value}
      ;;
    --font)#
      font=${value}
      ;;
    --force)# overwrite existing file
      alias force=true
      ;;
    --help)#
      usage
      exit
      ;;
    --prodColor)# override the default product color
      prodColor=${value}
      ;;
    --product)# override the calculated product
      GW_APPCODE=${value}
      ;;
    --setx)# run "set -x" once this switch is parsed
      typeset -p prodColor
      set -x
      ;;
    --size)# override the default size
      pointsize=${value}
      ;;
    --smush)# override the default smush value
      smush=${value}
      ;;
     --version)# override the calculated version
      GW_PL_VERSION=${value}
      ;;
    -*)
      switches+=(${1})
      ;;
    *)
      txt=$1
      shift
      break
      ;;
  esac
  shift
done

if ((!$#txt)); then
  echo Error: missing text!
  usage
  exit 1
elif ((${#*})); then
  echo "Error: extra arguments after the text '${txt}': '${*}'!"
  usage
  exit 1
fi

filename=banner_${GW_APPCODE}${GW_PL_VERSION}_${fgColor}${font:+_$font}_${txt}.png
filename=`echo ${filename} | sed 's/[^-.A-Za-z0-9_]/_/g'`

force && (dry_run || rm -f ${filename})
if [[ -e ${filename} ]]; then
  echo Warning: will only overwrite existing file if --force is specified
  dry_run || exit 1
fi

command=( convert
  -background none
  -pointsize ${pointsize}
  -channel A -evaluate multiply 0.5 +channel        # transparency
  -stroke white -strokewidth 4                      # GW_APPCODE name+GW_PL_VERSION outline
  -fill ${prodColor}  label:"${GW_APPCODE}${GW_PL_VERSION}"
  ${font:+-font} ${font}
  -stroke white -strokewidth 2                      # label outline
  -fill ${fgColor}    label:"${txt}"
  +smush ${smush}                                   # smush the two strings together
  -resize $maxWidthx$maxHeight                      # if necessary shrink to fit within this box
  ${filename}
)

echo '   '${(q)command}
if ! dry_run; then
  ${command}

#  eval `identify -ping -format 'width=%w; height=%h' ${filename}`

  echo Created ${filename}
  open ${filename}

  echo -n 'Keep this file? (y,N) '
  read -q keep; echo
  if [ "$keep" = 'n' ] || [ "$keep" = 'N' ]; then
    rm -f ${filename}
    echo Deleted ${filename}
  fi
fi