#!/usr/bin/env zsh

# Set the Defaults
# lower number is darker, gray60 is too light
fg=gray60
pointsize=240
height=231
h_offset=25
v_offset=178
char_width=117
product=`sed -n "s/^appCode=//gp" gradle.properties`
version=`sed -En "s/^version=([0-9]+).*/\1/gp; s/^integrationGatewayVersion=//gp" gradle.properties`
product=${product:u}
smush=100

function usage() {
   echo "Usage: ${0:t} [OPTION...] TEXT
  Creates an image filename containing the supplied text.
  --smush      Sets the spacing between the product and the project name (defaults to '${smush}')
  --fg=COLOR   Set the foreground color (defaults to '${fg}')
  --width=NUM  Set the width of the text box
  --debug      Trace the execution
  --dry_run    Show the resulting command but do not execute
  --force      Overwrite the existing file, if any
  -h, --help   Show this screen

  All other switches are passed through to 'convert', after replacing any equals signs with a space. So for instance
  the switch '-font=fixed' will be passed through as '-font fixed'.

  For a list of color names see https://imagemagick.org/script/color.php#color_names
"
}

if ((!$#1)); then
   usage
   exit
fi

switches=()
alias dry_run=false
alias force=false
while [[ -n "$*" ]]; do
   switch=${1%%=*}; value=${1#*=}
   case ${switch} in
      --debug)
         set -x
         ;;
      --dry_run|--dry-run)
         alias dry_run=true
         ;;
      -h|--help)
         usage
         exit
         ;;
      --fg)
         fg=${value}
         ;;
     --font)
         font=${value}
         ;;
      --force)
         alias force=true
         ;;
#      --width)
#         width=${value}
#         ;;
      --product)
         product=${value}
         ;;
      --smush)
         smush=${value}
         ;;
      -*)
         switches+=(${1})
         ;;
      *)
         txt=$1
         shift
         break
         ;;
   esac
   shift
done

prodColor=${fg}
case ${product} in
  AB)
    prodColor=aqua
    ;;
  BC)
    prodColor=magenta
    ;;
  CC)
    prodColor=royalblue;
    ;;
  PC)
    prodColor=tan;
    ;;
  PL|PX)
    prodColor=green;
    ;;
esac

if ((!$#txt)); then
   echo Error: missing text!
   usage
   exit 1
elif ((${#*})); then
   echo "Error: extra arguments after the text '${txt}': '${*}'!"
   usage
   exit 1
fi

filename=banner_${product}${version}_${fg}${font:+_$font}_${txt// /_}.png

force && (dry_run || rm -f ${filename})
if [[ -e ${filename} ]]; then
   echo Warning: will only overwrite existing file if --force is specified
   dry_run || exit 1
fi

command=( convert
  -background none
  -pointsize ${pointsize}
  -stroke white -strokewidth 2         # text outline
  -fill ${prodColor}                        label:"${product}${version}"
  -fill ${fg}        ${font:+-font ${font}} label:\'${txt}\'
  +smush ${smush}                      # smush the two strings together
  ${filename}
)

if dry_run; then
  echo '   '${command}
else
   ${command}

   echo Created ${filename}
   open ${filename}

   echo -n 'Keep this file? (y,N) '
   read -q keep; echo
   if [ "$keep" = 'n' ] || [ "$keep" = 'N' ]; then
      rm -f ${filename}
      echo Deleted ${filename}
   fi
fi
