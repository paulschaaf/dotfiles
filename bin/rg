#!/bin/zsh
# list all file extensions:
#   find * -type f -printf '%f\n' | grep -v '~$' | sed -n '/\./ { s/^.*\.//g; p; }' | sort -u | tee extensions

export debug expanded
binary=$(if [ -f /usr/local/bin/rg ]; then \
      echo /usr/local/bin/rg; \
   elif [ -f ~/homebrew/bin/rg ]; then \
      echo ~/homebrew/bin/rg; \
   else echo /usr/bin/rg; \
   fi)

bizrules=('**/bizrules/*.xml')
test_dirs=(
   '**/*-test*/'
   '**/*-gunit-*/'
   '**/apitestbench*/'
   '**/gtest/'
   '**/pcftest/'
   '**/servertest/'
   '**/smoketests/'
   '**/test-*/'
   '**/test/'
   '**/testdata/'
   '**/testharness/'
   '**/testResources/'
   '**/tests/'
   '**/testsupport/'
)

function help() {
   local type_adds extensions patterns includes
   type_adds=$(sed -En 's/^--type-add=//p' $RIPGREP_CONFIG_PATH | sort)

   # summarize matching entries on one line, wrapping if necessary
   extensions=$(echo "$type_adds" | sed -En 's/^([^:]*):\*\..*$/\1, 	/p' | fmt -w $((COLUMNS)))

   # split matching lines into two columns
   patterns=$(echo "$type_adds" | sed -En "s/^([^:]*):(([^*]|.[^.])[^:]*)$/   \1 		\2/p")
   includes=$(echo "$type_adds" | sed -En "s/^([^:]*):include:(.*)$/   \1   		\2/p")

   cat <<HEREDOC
   --inIntelliJ     Mostly for testing
   --notIntelliJ
   --expanded
   --heading

GUIDEWIRE MACROS:       INCLUDES
   --bizrules, no-bizrules
       '${(j:', ':)bizrules}'

   --test-dirs, no-test-dirs
    	'${(j:', ':)test_dirs}'

EXTENSION TYPES (use with --type= or --type-not=)
   ${extensions%,}

PATTERN TYPES           PATTERN
${patterns}

INCLUDE TYPES           INCLUDES
${includes//,/, }

HEREDOC
   exit
}

command=()

function addSwitches() {
   # shellcheck disable=SC2034
   for switch in "${@}"; do
      command+=("${switch}")
   done
}

function addGlobs() {
   local negate=
   # shellcheck disable=SC2034
   [ "$1" = "--negate" ] && negate=true && shift

   for pattern in "${@}"; do
      (($#negate)) && pattern="!${pattern}"
      addSwitches --glob "${(qq)${pattern}}"
   done
   expanded=true
}

if [[ "$TERMINAL_EMULATOR" = "JetBrains-JediTerm" ]]; then
  addSwitches --color=always
  inIntelliJ=true
fi

# shellcheck disable=SC1105
while (($#@)); do
   #   (($#debug)) && typeset firstArg
   case ${1} in
      --debug)
         debug=true
         ;;
      --dry-run)
         dry_run=true
         expanded=true
         ;;
      --heading)
         addSwitches --heading --color=never
         expanded=true
         ;;
      -h|--help)
         $binary --help
         help
         ;;
      --bizrules)
         addGlobs "${bizrules[@]}"
         ;;
      --no-bizrules)
         addGlobs --negate "${bizrules[@]}"
         ;;
      --no-test-dirs)
         addGlobs --negate "${test_dirs[@]}"
         ;;
      --inIntelliJ)
         inIntelliJ=true
         ;;
      --notIntelliJ)
         unset inIntelliJ
         ;;
      --test-dirs)
         addGlobs "${test_dirs[@]}"
         ;;
      --type-list)
         ${binary} --type-list
         exit
         ;;
      -*)
         # don't enquote switches
         addSwitches "${1}"
         ;;
      *)
         addSwitches "${(qq)1}"
         ;;
   esac
   shift
done

(($#expanded)) && printf "\e[90mExpanded to => %s %s\e[0m\n"  "${binary}" "${command[*]}"

if (($#dry_run)); then
   exit
fi

(($#debug)) && set -x

if (($#inIntelliJ)); then
   # use a separator extremely unlikely to match legit text (and wouldn't match again on a second run)
   fieldSeparator=`date '+%s@@@'`
   # put a space after the last coordinate colon
   eval "${binary} --field-match-separator '${fieldSeparator}' ${command[*]}" | sed -E "s/(.*)${fieldSeparator}/\1 /g; s/${fieldSeparator}/:/g" | toFileUrl
#   eval "${binary} ${command[*]}" | toFileUrl
else
   eval ${binary} ${command[*]}
fi
