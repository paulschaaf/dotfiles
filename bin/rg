#!/bin/zsh
# list all file extensions:
#   find * -type f -printf '%f\n' | sed -n '/\./ { s/^.*\.//g; p; }' | sort -u | tee extensions

export debug expanded
binary=$([ -f /usr/local/bin/rg ] && echo /usr/local/bin/rg || echo /usr/bin/rg)

ignore_bizrules=('!**/bizrules/*.xml')
ignore_test_dirs=(
   '!**/*-test*/'
   '!**/apitestbench*/'
   '!**/gtest/'
   '!**/pcftest/'
   '!**/servertest/'
   '!**/smoketests/'
   '!**/test-*/'
   '!**/test/'
   '!**/testdata/'
   '!**/testharness/'
   '!**/tests/'
   '!**/testsupport/'
)

function help() {
   local extensions patterns includes
   extensions=$(sed -En 's/^--type-add=([^:]*):\*\..*$/\1, 	/p' $RIPGREP_CONFIG_PATH | sort | fmt -w $((COLUMNS)))
   patterns=$(sed -En "s/^--type-add=([^:]*):(([^*]|.[^.])[^:]*)$/   \1 		\2/p" $RIPGREP_CONFIG_PATH | sort)
   includes=$(sed -En "s/^--type-add=([^:]*):include:(.*)$/   \1   		\2/p" $RIPGREP_CONFIG_PATH | sort)
   ignore_test_dirs_string=$(echo "'${(j:', ':)ignore_test_dirs}'" | fmt -w $((COLUMNS/2)) | column -t | sed 's/^/			/')
   ignore_test_dirs_string=$(echo "'${(j:', ':)ignore_test_dirs}'" | fmt -w $((COLUMNS*3/4)) | column -t | sed 's/^/		/')

   cat <<HEREDOC
GUIDEWIRE MACROS:       WILL IGNORE
   --ignore-bizrules    '${(j:', ':)ignore_bizrules}'
   --ignore-test-dirs
${ignore_test_dirs_string}

EXTENSION TYPES (use with --type= or --type-not=)
   ${extensions%,}

PATTERN TYPES           PATTERN
${patterns}

INCLUDE TYPES           INCLUDES
${includes//,/, }

HEREDOC
   exit
}

command=()

function addSwitches() {
   # shellcheck disable=SC2034
   for switch in "${@}"; do
      command+=("${switch}")
   done
}

function addGlobs() {
   # shellcheck disable=SC2034
   for pattern in "${@}"; do
      addSwitches --glob "${(qq)pattern}"
   done
   expanded=true
}

function typeNot() {
   # shellcheck disable=SC2034
   for pattern in "${@}"; do
      addSwitches --type-not "${pattern}"
   done
   expanded=true
}

args=($@)
(($#inIntelliJ)) && addSwitches --color=always

while (($#args)); do
   #   (($#debug)) && echo -n '\n=== ' && typeset args
   firstArg=${args[1]}
   args=(${args[@]:1}) # pop the argument

   #   (($#debug)) && typeset firstArg
   case ${firstArg} in
      --debug)
         debug=true
         ;;
      --heading)
         addSwitches --heading --color=never
         expanded=true
         ;;
      -h|--help)
         $binary --help
         help
         ;;
      --ignore-bizrules)
         addGlobs "${ignore_bizrules[@]}"
         ;;
      --ignore-test-dirs)
         addGlobs "${ignore_test_dirs[@]}"
         ;;
      --type-list)
         ${binary} --type-list
         exit
         ;;
      -*)
         # don't enquote switches
         addSwitches "${firstArg}"
         ;;
      *)
         addSwitches "${(qq)firstArg}"
         ;;
   esac
done

(($#expanded)) && printf "\e[90mExpanded to => %s %s\n"  "${binary}" "${command[*]}\e[0m"
if (($#inIntelliJ)); then
   (($#debug)) && set -x
   # insert a space between the column number and the matching text
   eval "${binary} ${command[*]}" | sed -E 's_(:.[[]0m[0-9]+.[[]0m:)_\1 _' | toFileUrl
else
   (($#debug)) && set -x
   eval ${binary} ${command[*]}
fi
