#!/bin/zsh

allVars=(GW_ANSI_APPCODE GW_ANSI_NAME GW_ANSI_PLATFORM GW_APPCODE GW_APPNAME GW_COLOR GW_DB_DIR GW_PL_NUM GW_PL_VERSION GW_PLATFORM GW_PORT GW_PORT_DEBUG GW_STUDIO_VERSION GW_TITLE GW_VERSION IDEA_HOME IDEA_JDK JAVA_HOME)
namedVars=()
unset $allVars

autoload -Uz colorLabel

# shellcheck disable=SC1036 # '(' is invalid here
# shellcheck disable=SC1088 # Parsing stopped here
function ⭑⭑⭑() {
  (($#quiet)) && return
  echo
  pastel -f paint -n white --on teal "${@}"
  echo
}

(($#communityEdition)) && ijEdition='CE' || ijEdition='UE'

while (($#*)); do
  case $1 in
    --debug)#
      # shellcheck disable=SC2034
      debug=true
      ;;
    --setx)# turn on tracing
      set -x
      ;;
    --all)
      namedVars+=(${allVars[@]})
      ;;
    --quiet)
      quiet=true
      ;;
    *)
      echo Illegal argument: "$1"
      exit 1
      ;;
  esac
  shift
done

(($#setx)) && set -x

# if it's a customer build
if [[ -f product.properties ]]; then
  eval "$(sed -En '
    s/^product.name(.*)/export GW_APPNAME\1 cust/p;
    s/^product.code/export GW_APPCODE/p;
    s/^product\./export product_/p
  ' product.properties)"
  set | grep product

  (($#GW_VERSION)) || export GW_VERSION=${product_majorversion}.${product_minorversion}.${product_patchversion}${product_patchsuffix}
  (($#GW_PL_VERSION)) || export GW_PL_VERSION=${GW_VERSION}

  if ((! $#GW_PORT)); then
      case ${GW_APPCODE} in
      ab)
        export GW_PORT=8280
        ;;
      bc)
        export GW_PORT=8580
        ;;
      cc)
        export GW_PORT=8080
        ;;
      pc)
        export GW_PORT=8180
        ;;
      esac
  fi

# it's a dev build
elif [[ -f gradle.properties ]]; then
  eval "$(sed -En '
    s/^appCode/GW_APPCODE/p;
    s/^appName/GW_APPNAME/p;
    s/^version/GW_VERSION/p;
    s/^plVersion/GW_PL_VERSION/p;
    s/^jettyPort/GW_PORT/p;
    s/^studioVersion/GW_STUDIO_VERSION/p;
    s/^camelVersion=.*/GW_APPCODE=ccpi\nGW_APPNAME=CCPI\n/p
  ' gradle.properties | sed '/./ { s/^/export /g; }')"

  # or maybe this *is* platform
  # shellcheck disable=SC2155 # declare separately
  (($#GW_PL_VERSION)) || eval "$(sed -nE 's/^version=/export GW_PL_VERSION=/gp' gradle.properties 2>/dev/null)"
fi

# advance the port # based on the digits in the dirname
lastDigits=$(echo ${PWD##$HOME/gw/} | sed -E 's/[^0-9]//g')
(($#lastDigits)) && GW_PORT=$(($GW_PORT + 5 + $lastDigits))
unset lastDigits

if (($#GW_PL_VERSION)); then
  typeset -A GW_PLATFORM_MAP=(
     9       ferrite
    10       granite
    # see https://guidewireconfluence.atlassian.net/wiki/spaces/DEV/pages/796889885/Ski+Release+Name+Decoder
    50.0     halite
    50.1     Aspen
    50.2     Banff
    50.3     Cortina
    50.4     Dobson
    50.5     Elysian
    50.6     Flaine
    50.7     Garmisch
    50.8     Hakuba
    50.9     Innsbruck
    50.10    Jasper
    50.11    Kufri
    50.12    'Las Leñas'
    50.13    Mammoth
    50.14    Niseko
    50.15    Olos
    50.16    Palisades
    50.17    Qusar
    50.18    Revelstoke
    50.19    Sestriere
    50.20    Tiffindell
    50.21    Unazuki
    50.22    Voss
    50.23    Wengen
    50.24    Xiling
    50.25    Yongpyong
    50.26    Zermatt
    # if you add a new version here make sure to set the required environment below
  )

  ver_key="${GW_PL_VERSION%%.*}"
  if [[ "$ver_key" == "50" ]]; then
    # For 50.x.y, use the first two components
    ver_key="${GW_PL_VERSION%.*}"
  fi

  GW_PLATFORM="${GW_PLATFORM_MAP[$ver_key]:-'???'}"
  export GW_PL_NUM=${GW_PL_VERSION%%.*}
  GW_ANSI_PLATFORM=$(colorLabel black orange ${GW_PLATFORM})
  export GW_PLATFORM GW_ANSI_PLATFORM
fi

#
# SET THE JDK AND PLATFORM CONFIGURATION
#

case ${GW_PLATFORM} in
  "")
    (($#quiet)) || echo No GW_PLATFORM determined!
    return
    unsetGWVars
    ;;
#  athena|bedrock|carbon|diamond)
#    export AARDVARK_HOME=/depot/aardvark/alpha
#    export ANT_HOME=/depot/ant/apache-ant-1.7.1
#    export GW_LIB_DIR=../lib
#    export GW_START_SCRIPT=./all
#    export JAVA_HOME=/usr/lib32/jvm/jdk1.6.0_45
#    export M2_HOME=/depot/maven/apache-maven-2.2.1
#    ;;
#  emerald)
#    export AARDVARK_HOME=/depot/aardvark/alpha
#    export ANT_HOME=/depot/ant/apache-ant-1.8.2
#    export GW_LIB_DIR=../lib
#    export GW_START_SCRIPT=./all
#    export IDEA_HOME=/opt/idea_emerald
#    export IDEA_JDK=/usr/lib32/jvm/java-7-jdk
#    export JAVA_HOME=/usr/lib/jvm/java-7-jdk
#    export M2_HOME=/depot/maven/apache-maven-3.0.4
#    ;;
#  ferrite)
#    export IDEA_HOME='/Applications/IntelliJ IDEA 15.app/Contents'
#    export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home
#    ;;
  granite)
    case ${GW_PL_VERSION} in
      10.0.0*|10.0.1)
        # for <= 10.0.1
        announce 'Using older config for this platform version'
        export IDEA_HOME='/Applications/IntelliJ IDEA 2017.app/Contents'
        export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home
        export JAVA_HOME=/usr/lib/jvm/java-8-jdk
        export GW_DB_DIR=/tmp/guidewire/granite
        ;;
      10.201.*)
        export IDEA_HOME="/Applications/IntelliJ IDEA 2021.1.3 ${ijEdition}.app/Contents"
        export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
        export GW_DB_DIR=./tmp/granite
        if [[ "$GW_APPCODE" = "ab" ]]; then
          export GW_DB_DIR=./tmp
        fi
        ;;
      *)
        export IDEA_HOME="/Applications/IntelliJ IDEA 2022.3.3 ${ijEdition}.app/Contents"
        export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
        export GW_DB_DIR=./tmp/granite
        ;;
    esac
    ;;
  halite|Aspen|Banff|Cortina) # the cutoff between C and D may be incorrect
    export IDEA_HOME="/Applications/IntelliJ IDEA 2019.3.5 ${ijEdition}.app/Contents"
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
    export GW_DB_DIR=/tmp/guidewire/granite
    ;;
  Dobson|Elysian|Flaine|Garmisch|Hakuba)
    export IDEA_HOME="/Applications/IntelliJ IDEA 2021.1.3 ${ijEdition}.app/Contents"
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
    ;;
  Innsbruck|Jasper|Kufri)
    export IDEA_HOME="/Applications/IntelliJ IDEA 2022.3.3 ${ijEdition}.app/Contents"
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
    export GW_DB_DIR=./tmp
    [[ "$GW_APPCODE" = "cc" ]] && GW_DB_DIR=$GW_DB_DIR/test
    ;;
  Las\ Leñas|Mammoth)
    export IDEA_HOME="/Applications/IntelliJ IDEA 2024.1.5 ${ijEdition}.app/Contents"
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
    export GW_DB_DIR=./tmp
    [[ "$GW_APPCODE" = "cc" ]] && GW_DB_DIR=$GW_DB_DIR/test
    ;;
  Niseko|Olos|*)
    export IDEA_HOME="/Applications/IntelliJ IDEA 2024.1.5 ${ijEdition}.app/Contents"
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-21.jdk/Contents/Home
    export GW_DB_DIR=./tmp
    [[ "$GW_APPCODE" = "cc" ]] && GW_DB_DIR=$GW_DB_DIR/test
    ;;
  # if you add a new version here make sure to set the required environment above
esac


#
# Source environment overrides
#

for env in {../..,..,.}/gw.env; do
  if [[ -s ${env} ]]; then
    ⭑⭑⭑ "** Applying overrides from ${env}"
#    cat ${env} | sed 's/^/  - /'
    # shellcheck disable=SC1090 # can't follow non-constant source
    source ${env}
    (($#quiet)) || echo
  fi
done

(($#GW_PORT)) && export GW_PORT_DEBUG=$(($GW_PORT + 10))


namedVars=(${namedVars:-$*})

if (( $#GW_APPNAME )); then
  export GW_COLOR=${GW_COLORS[$GW_APPNAME]}
  export GW_ANSI_APPCODE=$(pastel -f paint -n ${(Q)GW_COLOR%% *} --on ${(Q)GW_COLOR##* } ${(U)GW_APPCODE})
  export GW_ANSI_NAME=$(colorLabel ${(Q)GW_COLOR%% *} ${(Q)GW_COLOR##* } ${GW_APPNAME})

  # if this file is being executed directly--i.e. NOT being sourced--default to reporting on all variables
  if [[ ! $ZSH_EVAL_CONTEXT =~ :file$ ]] && ((! $#namedVars )); then
    namedVars=(${allVars[@]})
  fi
fi

export GW_TITLE="${PWD//$HOME/~} (${GW_APPCODE} ${GW_VERSION})"

(($#namedVars)) && eval typeset -p "${namedVars[@]}" 2>/dev/null

unset allVars namedVars