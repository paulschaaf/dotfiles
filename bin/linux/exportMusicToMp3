#!/bin/zsh

srcRoot=~/data/Music
dstRoot=~/data/soundKonverter/Music

alias TEST_MODE=false
alias DEBUG=false
alias TRACE=false

#setopt +o nullglob
setopt +o nomatch # supress display of "No match found" when globbing fails

function showTree() {
  tree -n --noreport ${srcRoot}
  echo -n Files: ; fd --type=f | wc -l
  tree -n --noreport ${dstRoot}
  echo "────────────────"
}

######################################################
# process command line arguments
while [[ -n "$*" ]]; do
  case $1 in
    --debug)#
      # shellcheck disable=SC2034
      alias DEBUG=true
      ;;
    --dry-run)# Print the commands that will be run, but do not actually run them
      # shellcheck disable=SC2034 # unused
      _dry_run='echo '
      ;;
    --dstRoot)
      dstRoot="$2"
      shift
      ;;
    --report)
      fd --type=f . ${srcRoot} | grep -v '\.(jpg|png)$' | sed "s_^${srcRoot}__; s_[.][^.]*\$__" | sort >| source.txt
      fd --type=f . ${dstRoot} | sed "s_^${dstRoot}__; s_[.][^.]*\$__" | sort >| dest.txt
      exit
      ;;
    --srcRoot)
      srcRoot="$2"
      shift
      ;;
    --setx)
      set -x
      ;;
    --test)
      testRoot=~/tmp/exportMusicTest
      rm -rf ${testRoot}
      mkdir $testRoot && cd $testRoot || exit 1
      srcRoot=$testRoot/src
      dstRoot=$testRoot/dest

      mkdir -p ${srcRoot}/{Blues,Rock,Soul}
      mkdir -p ${dstRoot}/{Blues,Rock,Jazz,Soul}
      mkdir ${srcRoot}/Soul/"What's Going On?"
      mkdir ${dstRoot}/Soul/"What's Going On?"

      touch "${srcRoot}/Blues/identical[file].flac"
      touch "${dstRoot}/Blues/identical[file].flac"

      touch "${srcRoot}/Rock/existing[file].flac"
      touch "${dstRoot}/Rock/existing[file].mp3"

      touch "${srcRoot}/Soul/What's Going On?/identical.flac"
      touch "${dstRoot}/Soul/What's Going On?/identical.flac"

      touch "${srcRoot}/Blues/added(file).flac"

      touch "${srcRoot}/Rock/added([{file}])\"\`.flac"
      touch "${srcRoot}/Rock/added_file.mp3"

      touch "${srcRoot}/Soul/What's Going On?/added_file.flac"

      touch "${dstRoot}/Jazz/orphaned - 'file\"name.mp3"
      touch "${dstRoot}/Rock/orphaned - 'file\"name.mp3"

      showTree
      alias TEST_MODE=true
      ;;
    --trace)
      alias TRACE=true
      ;;
    --*)
      echo Illegal switch: "$1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

function log() {
  echo
  level=$1; shift
  case $level in
    1)
      echo -n "\e[46m"
      ;;
    2)
      echo -n "   \e[96m"
      ;;
    3)
      echo -n "      \e[36m"
      ;;
    *)
      echo -n "─────────"
      ;;
    esac
  echo "$*\e[0m"
}

function showFileCount() {
  echo $(fd . ${srcRoot} --type=f | wc -l) "files in Source ${(q)srcRoot}"
  echo $(fd . ${dstRoot} --type=f | wc -l) "files in Dest   ${(q)dstRoot}"
}

before=$(showFileCount)

######################################################
log 1 'Delete orphaned files (no corresponding file of any type in src)'
cd ${dstRoot} || exit 1

count=0; ignore=0
for dest in **/*.*; do
    srcFileSpec=${srcRoot}/${dest%.*}
#    src=$(fd --max-depth 1 "^${srcFileSpec##*/}" ${srcFileSpec%/*})
#    TRACE && typeset srcFileSpec src
    if [[ -n $(ls "${srcFileSpec}".* 2>/dev/null) ]]; then
      TRACE && log 2 "Keeping \e[4m${(q)dstRoot}/${(q)dest}\e[24m"
      ((ignore++))
    else
      log 2 "Deleting \e[4m${(q)dstRoot}/${(q)dest}\e[24m"
      eval $_dry_run rm "${(q)dstRoot}/${(q)dest}"
      ((count++))
    fi
    DEBUG && showTree
done
log 2 Deleted ${count} files, kept ${ignore}


######################################################
log 1 "Removing empty directories from \e[4mfile://${(q)dstRoot}\e[24m"

for dir in ${srcRoot} ${dstRoot}; do
  log 2 "... from \e[4m${(q)dir}\e[24m"
  eval $_dry_run find ${(q)dir} -type d -empty -exec rmdir -pv {} + &>/dev/null
done
DEBUG && showTree


######################################################
log 1 'Convert FLAC to MP3 if missing'
cd ${srcRoot} || exit 1

count=0; ignore=0
for src in **/*.flac; do
    destRootName="${dstRoot}/${src%.flac}"
#    TRACE && typeset src dest
    if [[ -n $(ls "${destRootName}".* 2>/dev/null) ]]; then
      TRACE && log 2 "Already converted \e[4m${(q)src}\e[24m"
      ((ignore++))
    else
      log 2 "Converting \e[4m${(q)src}\e[24m"
      dest="${destRootName}.mp3"
      destDir=$(dirname ${(q)dest})
      cmd="mkdir -p ${(q)destDir}; ffmpeg -i ${(q)src} -q:a 2 ${(q)dest}"

      echo $cmd

      # shameful hack to silently swap the command when in test mode
      TEST_MODE && pwd
      TEST_MODE && cmd="cp ${(q)src} ${(q)dest}" && TRACE && log 3 "Replacing 'ffmpeg' with 'cp' due to test mode"

      (($#_dry_run)) || eval ${cmd}
      ((count++))
    fi
    DEBUG && showTree
done
log 2 Converted ${count} files, kept ${ignore}


######################################################
log 1 Copy M4A, M4P, MP3, and MP4 files if missing
count=0; ignore=0
for src in **/*.{m4a,m4p,mp3,mp4}; do
    [[ ! -f "${src}" ]] && continue # nomatch means we'll enter this loop even if e.g. no mp4's exist
    dest="${dstRoot}/${src}"
    if [[ -f "${dest}" ]]; then
      TRACE && log 2 "Already copied \e[4m${(q)src}\e[24m"
      ((ignore++))
    else
      log 2 "Copying \e[4m${(q)src}\e[24m"
      destDir=$(dirname ${dest})
      cmd="mkdir -p ${(q)destDir}; cp ${(q)src} ${(q)dest}"

      echo $cmd

      (($#_dry_run)) || eval $cmd
      ((count++))
    fi
    DEBUG && showTree
done
log 2 Copied ${count} files, kept ${ignore} existing files

echo "\nBefore"
echo $before

echo "\nAfter"
showFileCount


######################################################
if TEST_MODE; then
  log 1 Cleaning up tests
  log 2 Removing test files
  cd ${(q)testRoot} || exit 1
  find -type f -empty -exec rm {} +
  log 2 Removing test directories
  find -type d -empty -exec rmdir -p {} + &>/dev/null
  cd ..
  rmdir ${(q)testRoot}
fi