#!/usr/bin/env ruby
# -*- mode: Ruby -*-

# find \( -path '*/~*' -o -path '*/CVS/*' \) -prune -o -type f ! -name '*~' -printf '%f ' -exec md5sum {} \; | sed 's,/[^/]*$,,' | sort | column -t >| md5sums.txt

#require 'optparse'

$debug_io = $stderr
$debug_overlay_options = %w(file-align font margins rotate-even-pages tabsize)

$cmd = 'enscript'

def debug_puts(*args)
  $debug_io.puts '' if args.empty?
  args.each {|e| $debug_io.puts('# debug: ' + e)} if $DEBUG
end

class << ($margins = ['']*4)
  def left;         self[0];     end
  def left=(val);   self[0]=val; end

  def right;        self[1];     end
  def right=(val);  self[1]=val; end

  def top;          self[2];     end
  def top=(val);    self[2]=val; end

  def bottom;       self[3];     end
  def bottom=(val); self[3]=val; end

  def reset
    self.left, self.right, self.top, self.bottom = nil
  end

  def to_s
    self.join(':')
  end
end

class Options < Hash
  def [](key)
    super(keyFrom(key))
  end

  def []=(key, value)
    return self.delete(key) unless value and value != '#false'
    super(keyFrom(key), (value == '') || value)
  end

  def delete(key)
    super(self.keyFrom(key))
  end

  def to_s
    self.collect {|key_value| switchAt(*key_value)}.sort_by {|e| e.downcase}.join(' ')
  end

  def keyFrom(string)
    string.to_s.gsub(/^-+/, '').to_sym
  end

  def switchAt(symbol, value=self[symbol])
    key, value = symbol.to_s, (value == true ? '' : value.to_s)
    if key.size > 1
      answer = '--'
      sep = '='
    else
      answer = '-'
      sep = ' '
    end
    sep = '' if value.empty?
    answer << key << sep << value
  end
end

(options = Options.new).instance_eval {
  self[:borders                ] = true
  self[:columns                ] = 2
  self['extended-return-values'] = true
  self['fancy-header'          ] = true
#   self['file-align'            ] = 2
  self[:font                   ] = 'Courier6' # don't make smaller than 5
#   self['highlight-bars'        ] = true
  self['line-numbers'          ] = 1
  self[:landscape              ] = true
  self[:margins                ] = $margins
  self['mark-wrapped-lines'    ] = :arrow     #:box
  self['pretty-print'          ] = true
#   self[:printer                ] = ENV['PP_PRINTER'] || ENV['PRINTER']
#   self['rotate-even-pages'     ] = 
#           ! ['lj2100', 'lj2100_2up', 'http://copernicus:631'].include?(self[:printer])
#   self['swap-even-page-margins'] = true  # doesn't work for n-up output
  self[:tabsize                ] = 3

  # maybe add --toc if multiple files are supplied
}

args = ARGV.dup

until args.empty? do
  args[0].match(/^ *-+([^=]+)(=([^-][^ ]*))?$/)

  case $1
  when 'debug'
    $DEBUG = true

  when 'two-hole'
    $margins.reset
    $margins.top, $margins.bottom = *[60]*2

  when 'three-hole'

  when 'e', 'echo'
    $echoOnly = true

  when 'sums'
    options[:filter] = %q<"echo \`sum %s\` \`md5sum %s\` | awk '{printf \"\000bggraysum is %%s-%%s,  md5sum is %%s\n\", $1, $2, $3}' | cat - %s">
    options['line-numbers'] = 0

  when '-'
    debug_puts "found end of switch mark '--'"
    break

  when nil
    debug_puts "Assuming that switches ended before '#{args[0]}'"
    break

  else
    debug_puts "forwarding option #$1 #$3" if $DEBUG
    options[$1] = $3 || true
  end
  args.shift
end

debug_puts

if $DEBUG
  some_opts = Options.new
  $debug_overlay_options.each {|e| some_opts[e] = options[e]}
  #some_opts = options
  unless some_opts.empty?
    string  = "'#{$some_opts}'"
    #(1..string.size).step(50) {|index| string.insert(index, "\n")}
    options[:underlay] = string
    options['ul-font'] = 'Times-Roman40'
  end
end

$cmd += " #{options} #{args.join(' ')}"
puts $cmd

unless $echoOnly
  puts ''
  system($cmd)
end

# opts = OptionParser.new {|opts|
#   opts.banner = "Usage: `basename $0` [options]"
#   opts.separator ''
#   opts.separator 'Specific options:'
# }

#   # Mandatory argument.
#   opts.on("-r", "--require LIBRARY", "Require the LIBRARY before executing your script") {|lib|
#     options.library << lib
#   }

#   # Optional argument; multi-line description.
#   opts.on("-i", "--inplace [EXTENSION]",
#           "Edit ARGV files in place",
#           "  (make backup if EXTENSION supplied)") {|ext|
#     options.inplace = true
#     options.extension = ext || ''
#     options.extension.sub!(/\A\.?(?=.)/, ".")  # Ensure extension begins with dot.
#   }

#   # Cast 'delay' argument to a Float.
#   opts.on("--delay N", Float, "Delay N seconds before executing") {|n|
#     options.delay = n
#   }
